/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { portalBookmarkAddbookmark } from "../funcs/portalBookmarkAddbookmark.js";
import { portalBookmarkDeletebookmark } from "../funcs/portalBookmarkDeletebookmark.js";
import { portalBookmarkGetbookmark } from "../funcs/portalBookmarkGetbookmark.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as models from "../models/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Bookmark extends ClientSDK {
  /**
   * Add a Bookmark
   *
   * @remarks
   * ## Overview
   *   * The Add a Bookmark API adds a bookmark from a portal.
   */
  async addbookmark(
    request: operations.AddbookmarkRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(portalBookmarkAddbookmark(
      this,
      request,
      options,
    ));
  }

  /**
   * Get All Bookmarks for a Portal
   *
   * @remarks
   * ## Overview
   *   The Get All Bookmarks for a Portal API returns all bookmarks for a portal. Only the topic bookmarks that are available in the scope of the portal are returned.
   *
   * ## Permissions
   *   * The user must have the __View Author Portal__ action to access the authoring view.
   *   * The user must have the __View Staging Portal__ action to access the staging view.
   */
  async getbookmark(
    request: operations.GetbookmarkRequest,
    options?: RequestOptions,
  ): Promise<models.BookmarkResult | undefined> {
    return unwrapAsync(portalBookmarkGetbookmark(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete a Bookmark
   *
   * @remarks
   * ## Overview
   *   The Delete a Bookmark API deletes a bookmark from a portal.
   */
  async deletebookmark(
    request: operations.DeletebookmarkRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(portalBookmarkDeletebookmark(
      this,
      request,
      options,
    ));
  }
}
