/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { portalGuidedhelpAcceptGHSolution } from "../funcs/portalGuidedhelpAcceptGHSolution.js";
import { portalGuidedhelpCreateQuickpick } from "../funcs/portalGuidedhelpCreateQuickpick.js";
import { portalGuidedhelpGetAllCasebasesReleases } from "../funcs/portalGuidedhelpGetAllCasebasesReleases.js";
import { portalGuidedhelpGetAllCases } from "../funcs/portalGuidedhelpGetAllCases.js";
import { portalGuidedhelpGetAllProfilesInPortal } from "../funcs/portalGuidedhelpGetAllProfilesInPortal.js";
import { portalGuidedhelpGetAllQuickPicks } from "../funcs/portalGuidedhelpGetAllQuickPicks.js";
import { portalGuidedhelpGetCasebaseReleaseById } from "../funcs/portalGuidedhelpGetCasebaseReleaseById.js";
import { portalGuidedhelpGetCaseById } from "../funcs/portalGuidedhelpGetCaseById.js";
import { portalGuidedhelpGetClusterByCasebaseReleaseId } from "../funcs/portalGuidedhelpGetClusterByCasebaseReleaseId.js";
import { portalGuidedhelpRejectGHSolution } from "../funcs/portalGuidedhelpRejectGHSolution.js";
import { portalGuidedhelpRestoreQuickpick } from "../funcs/portalGuidedhelpRestoreQuickpick.js";
import { portalGuidedhelpStartGHSearch } from "../funcs/portalGuidedhelpStartGHSearch.js";
import { portalGuidedhelpStepGHSearch } from "../funcs/portalGuidedhelpStepGHSearch.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as models from "../models/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Guidedhelp extends ClientSDK {
  /**
   * Get Available Casebases Releases
   *
   * @remarks
   * ## Overview
   *   The Get Available Casebases Releases API retrieves all Casebase Releases associated with a portal.
   */
  async getAllCasebasesReleases(
    request: operations.GetAllCasebasesReleasesRequest,
    options?: RequestOptions,
  ): Promise<models.CasebaseResult | undefined> {
    return unwrapAsync(portalGuidedhelpGetAllCasebasesReleases(
      this,
      request,
      options,
    ));
  }

  /**
   * Get Details of a Casebase Release
   *
   * @remarks
   * ## Overview
   *   The Get Details of a Casebase Release API retrieves details of Casebase Release.
   */
  async getCasebaseReleaseById(
    request: operations.GetCasebaseReleaseByIdRequest,
    options?: RequestOptions,
  ): Promise<models.CasebaseResult | undefined> {
    return unwrapAsync(portalGuidedhelpGetCasebaseReleaseById(
      this,
      request,
      options,
    ));
  }

  /**
   * Get Cluster Details of a Casebase Release
   *
   * @remarks
   * ## Overview
   *   The Get Cluster Details of a Casebase Release API retrieves cluster details of Casebase Release.
   */
  async getClusterByCasebaseReleaseId(
    request: operations.GetClusterByCasebaseReleaseIdRequest,
    options?: RequestOptions,
  ): Promise<models.ClusterResults | undefined> {
    return unwrapAsync(portalGuidedhelpGetClusterByCasebaseReleaseId(
      this,
      request,
      options,
    ));
  }

  /**
   * Get All Profiles Available in Portal
   *
   * @remarks
   * ## Overview
   *   The Get All Profiles Available in Portal API retrieves all Guided Help profiles associated with a portal.
   */
  async getAllProfilesInPortal(
    request: operations.GetAllProfilesInPortalRequest,
    options?: RequestOptions,
  ): Promise<models.ProfileResult | undefined> {
    return unwrapAsync(portalGuidedhelpGetAllProfilesInPortal(
      this,
      request,
      options,
    ));
  }

  /**
   * Start a Guided Help Search
   *
   * @remarks
   * ## Overview
   *    The Start a Guided Help search can be used to start a search session in the Guided Help.
   *
   *    A Guided Help profile can also be specified while starting the session and it is used to filter the results of search.
   *    If this is not passed in the request, the default profile of the portal is used. Questions can also be answered at time of starting the search session.
   *
   *    A Guided Help search session can be started in following ways:
   *    * Launch session for a specific Casebase Release.
   *    * Launch session for a Casebase and specify the release type.
   *    * Use a Guided Help session Article and pass the required session parameters.
   *
   * ## Prerequisites
   *    * A Guided Help profile must be assigned to the user.
   *    * Casebase Release passed in the request must be associated with the portal passed in URI.
   */
  async startGHSearch(
    request: operations.StartGHSearchRequest,
    options?: RequestOptions,
  ): Promise<operations.StartGHSearchResponse> {
    return unwrapAsync(portalGuidedhelpStartGHSearch(
      this,
      request,
      options,
    ));
  }

  /**
   * Perform a Step in a Guided Help Search
   *
   * @remarks
   * ## Overview
   *    The Perform a Step in a Guided Help Search API can be used to answer one or more questions (perform a step) in Guided Help search.
   *
   * ## Prerequisites
   *    * A Guided Help session must be in progress before this API is invoked.
   */
  async stepGHSearch(
    request: operations.StepGHSearchRequest,
    options?: RequestOptions,
  ): Promise<models.GHSearchResult> {
    return unwrapAsync(portalGuidedhelpStepGHSearch(
      this,
      request,
      options,
    ));
  }

  /**
   * Get All Cases of a Cluster in Release
   *
   * @remarks
   * ## Overview
   *   The Get All Cases of a Cluster in Release API retrieves all cases in cluster of a Casebase Release. A Case is a group of Questions, Articles, and control actions that work together to guide users through a series of questions and scenarios in a Guided Help session.
   *
   * ## Prerequisites
   *   A Guided Help search session for the provided Casebase Release must be in progress before this API is invoked.
   */
  async getAllCases(
    request: operations.GetAllCasesRequest,
    options?: RequestOptions,
  ): Promise<models.CaseListResults | undefined> {
    return unwrapAsync(portalGuidedhelpGetAllCases(
      this,
      request,
      options,
    ));
  }

  /**
   * Get Details of a Case
   *
   * @remarks
   * ## Overview
   *   The Get Details of a Case API retrieves details of a case in a release.
   *
   * ## Prerequisites
   *   * A Guided Help search session for the provided Casebase Release must be in progress before this API is invoked.
   */
  async getCaseById(
    request: operations.GetCaseByIdRequest,
    options?: RequestOptions,
  ): Promise<models.Case | undefined> {
    return unwrapAsync(portalGuidedhelpGetCaseById(
      this,
      request,
      options,
    ));
  }

  /**
   * Accept Solution
   *
   * @remarks
   * ## Overview
   *   The Accept Solution API can be used to accept and add positive score to a solution of a Guided Help case.
   *
   * ## Prerequisites
   *    * A Guided Help search session must be started before invoking this API.
   */
  async acceptGHSolution(
    request: operations.AcceptGHSolutionRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(portalGuidedhelpAcceptGHSolution(
      this,
      request,
      options,
    ));
  }

  /**
   * Reject Solution
   *
   * @remarks
   * ## Overview
   *   The Reject Solution API can be used to reject and add negative score to a solution of a Guided Help case.
   *
   * ## Prerequisites
   *    * A Guided Help search session must be started before invoking this API.
   */
  async rejectGHSolution(
    request: operations.RejectGHSolutionRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(portalGuidedhelpRejectGHSolution(
      this,
      request,
      options,
    ));
  }

  /**
   * Create Quickpick
   *
   * @remarks
   * ## Overview
   *    The Create Quickpick API can be used to create a new quickpick(bookmark) for current Guided Help search session.
   *
   *   Note: If "linkToActivity" attribute is passed as true in request body then one of below must be passed in header
   *    * <code>XEgainTenantId</code>
   *    * <code>xEgainActivityId</code>
   *    * <code>XInteractionId</code>
   *
   * ## Prerequisites
   *    * A Guided Help search session must be in progress before this API is invoked.
   *    * QuickPick can only be created for a live release of a Casebase.
   */
  async createQuickpick(
    request: operations.CreateQuickpickRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(portalGuidedhelpCreateQuickpick(
      this,
      request,
      options,
    ));
  }

  /**
   * Get All Quickpicks for a Portal
   *
   * @remarks
   * ## Overview
   *   The Get All Quickpicks for a Portal API retrieves details of quickpicks created for the Casebase.
   *
   * ## Conditions
   *    If "getLastSavedQuickPickForInteraction" query parameter is passed as "Yes" then one of below must be passed in request header.
   *    * X-ext-integration-id
   *    * X-egain-activity-id
   *    * X-ext-interaction-id
   *   Either casebaseID or getLastSavedQuickPickForInteraction must be passed in request.
   */
  async getAllQuickPicks(
    request: operations.GetAllQuickPicksRequest,
    options?: RequestOptions,
  ): Promise<models.QuickpickResults | undefined> {
    return unwrapAsync(portalGuidedhelpGetAllQuickPicks(
      this,
      request,
      options,
    ));
  }

  /**
   * Resume a Quickpick
   *
   * @remarks
   * ## Overview
   *   The Resume a Quickpick API can be used to restore (resume) a specific quickpick.
   *
   * ## Prerequisites
   *    * A Guided Help session for the Casebase must be started before invoking this API.
   */
  async restoreQuickpick(
    request: operations.RestoreQuickpickRequest,
    options?: RequestOptions,
  ): Promise<models.GHSearchResult> {
    return unwrapAsync(portalGuidedhelpRestoreQuickpick(
      this,
      request,
      options,
    ));
  }
}
