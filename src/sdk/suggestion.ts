/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { portalSuggestionDeleteSuggestion } from "../funcs/portalSuggestionDeleteSuggestion.js";
import { portalSuggestionGetRelatedArticlesForSuggestion } from "../funcs/portalSuggestionGetRelatedArticlesForSuggestion.js";
import { portalSuggestionGetSuggestion } from "../funcs/portalSuggestionGetSuggestion.js";
import { portalSuggestionGetSuggestionAttachmentById } from "../funcs/portalSuggestionGetSuggestionAttachmentById.js";
import { portalSuggestionGetSuggestionAttachments } from "../funcs/portalSuggestionGetSuggestionAttachments.js";
import { portalSuggestionGetSuggestionComments } from "../funcs/portalSuggestionGetSuggestionComments.js";
import { portalSuggestionMakeSuggestion } from "../funcs/portalSuggestionMakeSuggestion.js";
import { portalSuggestionModifySuggestions } from "../funcs/portalSuggestionModifySuggestions.js";
import { portalSuggestionSearchSuggestion } from "../funcs/portalSuggestionSearchSuggestion.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as models from "../models/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Suggestion extends ClientSDK {
  /**
   * Make a Suggestion
   *
   * @remarks
   * ## Overview
   *   The Make a Suggestion API allows users to create an Article Suggestion from within a knowledge portal.
   *
   * ## Prerequisites
   *   * Enable the setting "Manage a Suggestion" for the portal specified in the URL.
   *   * If the user is a Customer, enable the setting "Allow Customer Access" for the portal.
   *   * If you want to add an attachment to a Suggestion, first call the Generate Signed URL to Upload API to add an attachment using the provided returned altID in attachment request.
   */
  async makeSuggestion(
    request: operations.MakeSuggestionRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(portalSuggestionMakeSuggestion(
      this,
      request,
      options,
    ));
  }

  /**
   * Modify Suggestion
   *
   * @remarks
   * ## Overview
   *   The Modify Suggestion API allows authenticated users to modify their own Suggestion.
   *
   * ## Prerequisites
   *   * Enable the setting "Manage a Suggestion" for the portal specified in the URL.
   *   * If the user is a Customer, enable the setting "Allow Customer Access" for the portal.
   *   * The "Suggestion ID" specified in the request body must exist and belong to the user.
   *   * The status of this Suggestion as returned by the Get Suggestion by ID API must be "pending".
   *   * At least one of the optional request body attributes must be provided.
   */
  async modifySuggestions(
    request: operations.ModifySuggestionsRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(portalSuggestionModifySuggestions(
      this,
      request,
      options,
    ));
  }

  /**
   * Get Suggestion by Status
   *
   * @remarks
   * ## Overview
   *   The Get Suggestion by Status API allows authenticated users to retrieve their own suggestions based on Suggestion status.
   *
   * ## Prerequisites
   *   * Enable the setting "My Suggestions" for the portal specified in the URL.
   *   * If the user is a customer, enable the setting "Allow Customer Access" for the portal.
   */
  async searchSuggestion(
    request: operations.SearchSuggestionRequest,
    options?: RequestOptions,
  ): Promise<models.Suggestions | undefined> {
    return unwrapAsync(portalSuggestionSearchSuggestion(
      this,
      request,
      options,
    ));
  }

  /**
   * Get Suggestion by ID
   *
   * @remarks
   * ## Overview
   *   The Get Suggestion by ID API allows authenticated users to retrieve their own suggestions.
   *
   * ## Prerequisites
   *   * Enable the setting "My Suggestions" for the portal specified in the URL.
   *   * If the user is a customer, enable the setting "Allow Customer Access" for the portal.
   *   * The "Suggestion for the ID" specified in the URL must belong to the user.
   */
  async getSuggestion(
    request: operations.GetSuggestionRequest,
    options?: RequestOptions,
  ): Promise<models.Suggestion | undefined> {
    return unwrapAsync(portalSuggestionGetSuggestion(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete a Suggestion
   *
   * @remarks
   * ## Overview
   *   The Delete a Suggestion API allows authenticated users to delete their own Suggestion.
   *
   * ## Prerequisites
   *   * Enable the setting "Manage a Suggestion" for the portal specified in the URL.
   *   * If the user is a customer, enable the setting "Allow Customer Access" for the portal.
   *   * The Suggestion must belong to the user.
   *   * The status of the Suggestion must not be "approved".
   */
  async deleteSuggestion(
    request: operations.DeleteSuggestionRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(portalSuggestionDeleteSuggestion(
      this,
      request,
      options,
    ));
  }

  /**
   * Get Related Articles for Suggestion
   *
   * @remarks
   * ## Overview
   *   The Get Related Articles for Suggestion API allows authenticated users to retrieve related articles for a Suggestion.
   *
   * ## Prerequisites
   *   * Enable the setting "My Suggestions" for the portal specified in the URL.
   *   * If the user is a customer, enable the setting "Allow Customer Access" for the portal.
   *   * The Suggestion specified in the URL must belong to the user.
   */
  async getRelatedArticlesForSuggestion(
    request: operations.GetRelatedArticlesForSuggestionRequest,
    options?: RequestOptions,
  ): Promise<models.FeedbackArticleForSuggestion | undefined> {
    return unwrapAsync(portalSuggestionGetRelatedArticlesForSuggestion(
      this,
      request,
      options,
    ));
  }

  /**
   * Get Suggestion Comments
   *
   * @remarks
   * ## Overview
   *   The Get Suggestion Comments API allows authenticated users to retrieve all comments for a Suggestion.
   *
   * ## Prerequisites
   *   * Enable the setting "My Suggestions" for the portal specified in the URL.
   *   * If the user is a customer, enable the setting "Allow Customer Access" for the portal.
   *   * The Suggestion specified in the URL must belong to the user.
   */
  async getSuggestionComments(
    request: operations.GetSuggestionCommentsRequest,
    options?: RequestOptions,
  ): Promise<models.Comments | undefined> {
    return unwrapAsync(portalSuggestionGetSuggestionComments(
      this,
      request,
      options,
    ));
  }

  /**
   * Get Suggestion Attachments
   *
   * @remarks
   * ## Overview
   *   The Get Suggestion Attachments API allows authenticated users to retrieve attachments for a Suggestion.
   *
   * ## Prerequisites
   *   * Enable the setting "My Suggestions" for the portal specified in the URL
   *   * If the user is a customer, enable the setting "Allow Customer Access" for the portal.
   *   * The Suggestion specified in the URL must belong to the user.
   */
  async getSuggestionAttachments(
    request: operations.GetSuggestionAttachmentsRequest,
    options?: RequestOptions,
  ): Promise<models.Attachments | undefined> {
    return unwrapAsync(portalSuggestionGetSuggestionAttachments(
      this,
      request,
      options,
    ));
  }

  /**
   * Get Suggestion Attachment by ID
   *
   * @remarks
   * ## Overview
   *   The Get Suggestion Attachment by ID API allows authenticated users to get the details of an attachment that belongs to their own Suggestion. It also allows the download of attachment content.
   *
   * ## Prerequisites
   *   * Enable the setting "My Suggestions" for the portal specified in the URL
   *   * If the user is a customer, enable the setting "Allow Customer Access" for the portal.
   *   * The Suggestion specified in the URL must belong to the user.
   */
  async getSuggestionAttachmentById(
    request: operations.GetSuggestionAttachmentByIdRequest,
    options?: RequestOptions,
  ): Promise<models.SuggestionAttachment | undefined> {
    return unwrapAsync(portalSuggestionGetSuggestionAttachmentById(
      this,
      request,
      options,
    ));
  }
}
