/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { portalEscalationAvertCustomerEscalation } from "../funcs/portalEscalationAvertCustomerEscalation.js";
import { portalEscalationCompleteCustomerEscalation } from "../funcs/portalEscalationCompleteCustomerEscalation.js";
import { portalEscalationSearchPriorToEscalation } from "../funcs/portalEscalationSearchPriorToEscalation.js";
import { portalEscalationStartCustomerEscalation } from "../funcs/portalEscalationStartCustomerEscalation.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as models from "../models/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Escalation extends ClientSDK {
  /**
   * Start Customer Escalation
   *
   * @remarks
   * ## Overview
   *   The Start Escalation API is called to initiate an escalation and it must be called before any other escalation API.
   *   An escalation occurs when a customer is referred to a higher level of support, such as chat or email, to address their issue.
   *   This process is initiated when the initial support resources are insufficient by themselves.
   *
   *   Customer object is optional for authenticated customers. Values provided in request takes precedence over the values provided during customer registration.
   */
  async startCustomerEscalation(
    request: operations.StartCustomerEscalationRequest,
    options?: RequestOptions,
  ): Promise<operations.StartCustomerEscalationResponse | undefined> {
    return unwrapAsync(portalEscalationStartCustomerEscalation(
      this,
      request,
      options,
    ));
  }

  /**
   * Search Prior To Customer Escalation
   *
   * @remarks
   * ## Overview
   *   The Search Prior to Customer Escalation API performs search on the subject and description parameters, but filters out any articles that the customer has viewed in the current session.
   */
  async searchPriorToEscalation(
    request: operations.SearchPriorToEscalationRequest,
    options?: RequestOptions,
  ): Promise<models.ArticleSearchResults | undefined> {
    return unwrapAsync(portalEscalationSearchPriorToEscalation(
      this,
      request,
      options,
    ));
  }

  /**
   * Complete Customer Escalation
   *
   * @remarks
   * ## Overview
   *   The Complete Customer Escalation API allows customer to complete escalation and send an email to a customer service agent on behalf of the customer.
   *
   *   After invoking the Complete Escalation or Avert Escalation APIs, the escalation ID associated with the escalation becomes invalid.
   *   **Important:** Further attempts to use or reference the same escalation ID results in an error or failure.
   */
  async completeCustomerEscalation(
    request: operations.CompleteCustomerEscalationRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(portalEscalationCompleteCustomerEscalation(
      this,
      request,
      options,
    ));
  }

  /**
   * Avert Customer Escalation
   *
   * @remarks
   * ## Overview
   *   The Avert Customer Escalation API notifies the server that escalation to a live agent has been averted. Usually this means that the customer found the information they needed.
   *
   *   After invoking the Complete Escalation or Avert Escalation APIs, the escalation ID associated with the escalation becomes invalid.
   *   **Important:** Further attempts to use or reference the same escalation ID results in an error or failure.
   */
  async avertCustomerEscalation(
    request: operations.AvertCustomerEscalationRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(portalEscalationAvertCustomerEscalation(
      this,
      request,
      options,
    ));
  }
}
