/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { portalTopicGetalltopics } from "../funcs/portalTopicGetalltopics.js";
import { portalTopicGetancestortopics } from "../funcs/portalTopicGetancestortopics.js";
import { portalTopicGetchildtopics } from "../funcs/portalTopicGetchildtopics.js";
import { portalTopicGetTopicBreadcrumbForArticle } from "../funcs/portalTopicGetTopicBreadcrumbForArticle.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as models from "../models/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Topic extends ClientSDK {
  /**
   * Get Topic Breadcrumb for Article
   *
   * @remarks
   * ## Overview
   *   * Use this API to retrieve the topic breadcrumb for an article in a portal. A breadcrumb shows the hierarchical path from the root topic to the article's primary topic.
   */
  async getTopicBreadcrumbForArticle(
    request: operations.GetTopicBreadcrumbForArticleRequest,
    options?: RequestOptions,
  ): Promise<models.TopicBreadcrumb> {
    return unwrapAsync(portalTopicGetTopicBreadcrumbForArticle(
      this,
      request,
      options,
    ));
  }

  /**
   * Get Immediate Child Topics
   *
   * @remarks
   * ## Overview
   *   The Get Immediate Child Topics API retrieves details about a topic and it's immediate child topics. The <code>$level</code> attribute determines how deep the topic hierarchy should go, or how many child topics of a topic are returned in the response.
   */
  async getchildtopics(
    request: operations.GetchildtopicsRequest,
    options?: RequestOptions,
  ): Promise<models.TopicTreeResult | undefined> {
    return unwrapAsync(portalTopicGetchildtopics(
      this,
      request,
      options,
    ));
  }

  /**
   * Get All Ancestor Topics
   *
   * @remarks
   * ## Overview
   *   The Get All Ancestor Topics API retrieves the hierarchy from the root topic down to the given topic.
   */
  async getancestortopics(
    request: operations.GetancestortopicsRequest,
    options?: RequestOptions,
  ): Promise<models.TopicResult | undefined> {
    return unwrapAsync(portalTopicGetancestortopics(
      this,
      request,
      options,
    ));
  }

  /**
   * Get All Topics
   *
   * @remarks
   * ## Overview
   *   The Get All Topics API retrieves the topic tree for a portal. The <code>$level</code> attribute determines how deep the topic hierarchy should go, or how many child topics of a topic are returned in the response.
   */
  async getalltopics(
    request: operations.GetalltopicsRequest,
    options?: RequestOptions,
  ): Promise<models.TopicTreeResult | undefined> {
    return unwrapAsync(portalTopicGetalltopics(
      this,
      request,
      options,
    ));
  }
}
