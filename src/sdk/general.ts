/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { portalGeneralGetAllPortals } from "../funcs/portalGeneralGetAllPortals.js";
import { portalGeneralGetMyPortals } from "../funcs/portalGeneralGetMyPortals.js";
import { portalGeneralGetPortalDetailsById } from "../funcs/portalGeneralGetPortalDetailsById.js";
import { portalGeneralGetTagCategoriesForInterestForPortal } from "../funcs/portalGeneralGetTagCategoriesForInterestForPortal.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as models from "../models/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class General extends ClientSDK {
  /**
   * Get All Portals
   *
   * @remarks
   * ## Overview
   *   The Get All Portals API returns all portals in a partition or department.
   */
  async getAllPortals(
    request: operations.GetAllPortalsRequest,
    options?: RequestOptions,
  ): Promise<models.PortalResult | undefined> {
    return unwrapAsync(portalGeneralGetAllPortals(
      this,
      request,
      options,
    ));
  }

  /**
   * Get All Portals Accessible To User
   *
   * @remarks
   * ## Overview
   *   The Get All Portals Accessible to User API allows a user to fetch all portals accessible to user across all department.
   *   * If no access tags are specified for a portal, then any user can access the portal.
   *   * If access tags are specified for a portal, users with a user profile that allows access have access to the portal. For users with multiple user profiles, the user profile that allows access does not need to be the active user profile.
   *   * All the global users(partition) cannot be assigned user profiles; their access is limited to portals without access restrictions.
   *   * The only articles returned are associated to an Article type when the parameter, “Include in browse on portals” is set to "Yes".
   *   * When the "shortUrlTemplate" query parameter is provided, the API filters accessible portals according to the specified language and template name. Portal Short URL specific to to the "shortUrlTemplate" query parameter value is returned in the response.
   *   * When there is no short URL available for a specific language, the API returns a portal object with an empty "shortURL" field.
   */
  async getMyPortals(
    request: operations.GetMyPortalsRequest,
    options?: RequestOptions,
  ): Promise<models.AllAccessiblePortals | undefined> {
    return unwrapAsync(portalGeneralGetMyPortals(
      this,
      request,
      options,
    ));
  }

  /**
   * Get Portal Details By ID
   *
   * @remarks
   * ## Overview
   *   The Get Portal Details By ID API allows a user to fetch details of a portal by the ID.
   */
  async getPortalDetailsById(
    request: operations.GetPortalDetailsByIdRequest,
    options?: RequestOptions,
  ): Promise<models.Portal | undefined> {
    return unwrapAsync(portalGeneralGetPortalDetailsById(
      this,
      request,
      options,
    ));
  }

  /**
   * Get Tag Categories for Interest for a Portal
   *
   * @remarks
   * ## Overview
   *   The Get Tag Categories for Interest for a Portal API retrieves the Tag Categories for Interest configured for a portal.
   *   * Tag Categories are ordered in order of their addition in the "Tag Categories for Interest" in the Portal configuration.
   *   * Tags are ordered as per their order defined in their Tag Category.
   *   * Tag Groups are sorted by their name, in ascending order.
   */
  async getTagCategoriesForInterestForPortal(
    request: operations.GetTagCategoriesForInterestForPortalRequest,
    options?: RequestOptions,
  ): Promise<models.TagCategoriesForInterest | undefined> {
    return unwrapAsync(portalGeneralGetTagCategoriesForInterestForPortal(
      this,
      request,
      options,
    ));
  }
}
