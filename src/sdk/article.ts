/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { portalArticleAddAsReference } from "../funcs/portalArticleAddAsReference.js";
import { portalArticleAddToReply } from "../funcs/portalArticleAddToReply.js";
import { portalArticleComplyArticle } from "../funcs/portalArticleComplyArticle.js";
import { portalArticleGetAcknowledgedComplianceArticles } from "../funcs/portalArticleGetAcknowledgedComplianceArticles.js";
import { portalArticleGetAnnouncementArticles } from "../funcs/portalArticleGetAnnouncementArticles.js";
import { portalArticleGetArticleAttachmentById } from "../funcs/portalArticleGetArticleAttachmentById.js";
import { portalArticleGetArticleById } from "../funcs/portalArticleGetArticleById.js";
import { portalArticleGetArticleByIdWithEditions } from "../funcs/portalArticleGetArticleByIdWithEditions.js";
import { portalArticleGetArticleEditionDetails } from "../funcs/portalArticleGetArticleEditionDetails.js";
import { portalArticleGetArticlePermissionsById } from "../funcs/portalArticleGetArticlePermissionsById.js";
import { portalArticleGetArticlePersonalization } from "../funcs/portalArticleGetArticlePersonalization.js";
import { portalArticleGetArticleRatings } from "../funcs/portalArticleGetArticleRatings.js";
import { portalArticleGetArticlesInTopic } from "../funcs/portalArticleGetArticlesInTopic.js";
import { portalArticleGetAttachmentByIdInPortal } from "../funcs/portalArticleGetAttachmentByIdInPortal.js";
import { portalArticleGetMySubscription } from "../funcs/portalArticleGetMySubscription.js";
import { portalArticleGetPendingComplianceArticles } from "../funcs/portalArticleGetPendingComplianceArticles.js";
import { portalArticleGetRelatedArticles } from "../funcs/portalArticleGetRelatedArticles.js";
import { portalArticleRateArticle } from "../funcs/portalArticleRateArticle.js";
import { portalArticleSubscribeArticle } from "../funcs/portalArticleSubscribeArticle.js";
import { portalArticleUnsubscribeArticle } from "../funcs/portalArticleUnsubscribeArticle.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as models from "../models/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Article extends ClientSDK {
  /**
   * Get Article by ID
   *
   * @remarks
   * ## Overview
   *   * The Get Article by ID API allows a user to retrieve an Article using its ID.
   *     * Additional Article attributes and contextual views can be specified in the query parameters.
   *
   *   * This API returns structured authoring attributes of Issue, Environment, Cause and Confidence Level when the following conditions are met:
   *     * The "Allow Structured Authoring" setting is enabled at the partition/department level through the Administrative Console.
   *     * The "Use Structured Authoring" flag is set on the article type.
   *
   * ## Prerequisites
   *   * Agents without a user profile and customers in a portal without a default user profile only have access to articles that:
   *     * Do not contain any access tags.
   *     * Do not contain any publish views.
   *     * Contain publish views without any associated tags.
   *   * Agents with a user profile and customers in a portal with a default user profile have access to articles that:
   *     * Do not contain any access tags.
   *     * Do not contain any publish views.
   *     * Contain publish views without any associated tags.
   *     * Contain access tags that are also in the assigned user profiles.
   *     * Contain publish views with associated tags that are also in the assigned user profiles.
   *   * Agents with the following assigned actions can view updates to articles currently being processed in workflows:
   *     * View Author Portal – Allows agents to view updates to articles at any stage in a workflow.
   *     * View Staging Portal – Allows agents to view updates to articles in the Staging stage or a subsequent stage in a workflow.
   */
  async getArticleById(
    request: operations.GetArticleByIdRequest,
    options?: RequestOptions,
  ): Promise<models.Article | undefined> {
    return unwrapAsync(portalArticleGetArticleById(
      this,
      request,
      options,
    ));
  }

  /**
   * Get Article By ID with Editions
   *
   * @remarks
   * ## Overview
   *   * This API allows a user to retrieve an article with all its editions.
   *   * If there are no editions for the article, the response will contain the base content of the article.
   */
  async getArticleByIdWithEditions(
    request: operations.GetArticleByIdWithEditionsRequest,
    options?: RequestOptions,
  ): Promise<models.ArticleWithEditions> {
    return unwrapAsync(portalArticleGetArticleByIdWithEditions(
      this,
      request,
      options,
    ));
  }

  /**
   * Get Article Edition Details
   *
   * @remarks
   * ## Overview
   *   * This API allows a user to retrieve an article with all its editions.
   */
  async getArticleEditionDetails(
    request: operations.GetArticleEditionDetailsRequest,
    options?: RequestOptions,
  ): Promise<models.EditionWithContent> {
    return unwrapAsync(portalArticleGetArticleEditionDetails(
      this,
      request,
      options,
    ));
  }

  /**
   * Add Article to Reply
   *
   * @remarks
   * ## Overview
   * The Add Article to Reply API captures events for articles used in a reply for a digital channel activity.
   *
   * Note:  Either the <code>x-ext-activity-id</code> or<br><code>x-ext-integration-id</code> and <code>x-ext-interaction-id</code> header must be provided.
   *
   * ## Permissions
   *   * Only Agents can invoke this API.
   */
  async addToReply(
    request: operations.AddToReplyRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(portalArticleAddToReply(
      this,
      request,
      options,
    ));
  }

  /**
   * Add as Reference
   *
   * @remarks
   * ## Overview
   * The Add as Reference API captures events for articles that are referenced by agents replying inside of a digital channel activity.
   *
   * Note: Either the <code>x-ext-activity-id</code> or<br><code>x-ext-integration-id</code> and <code>x-ext-interaction-id</code> header must be provided.
   *
   * ## Permissions
   *   * Only Agents can invoke this API.
   */
  async addAsReference(
    request: operations.AddAsReferenceRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(portalArticleAddAsReference(
      this,
      request,
      options,
    ));
  }

  /**
   * Get Articles in Topic
   *
   * @remarks
   * ## Overview
   * The Get Articles in Topic API allows a user to retrieve the browsable articles in a topic.
   *
   * ## Prerequisites
   *   * Set the Article type’s parameter “Include in browse on portals” to "Yes" for an article to be returned by this API.
   *   * Agents without a user profile and customers in a portal without a default user profile only have access to articles that:
   *     * Do not contain any access tags.
   *     * Do not contain any publish views.
   *     * Contain published views without any associated tags.
   *   * Agents with a user profile and customers in a portal with a default user profile have access to articles that:
   *     * Do not contain any access tags.
   *     * Do not contain any publish views.
   *     * Contain publish views without any associated tags.
   *     * Contain access tags that are also in the assigned user profiles.
   *     * Contain publish views with associated tags that are also in the assigned user profiles.
   *
   * ## Permissions
   *   * Agents with the following assigned actions can view updates to articles currently being processed in workflows:
   *     * View Author Portal – Allows agents to view updates to articles at any stage in a workflow.
   *     * View Staging Portal – Allows agents to view updates to articles in the Staging stage or a subsequent stage in a workflow.
   */
  async getArticlesInTopic(
    request: operations.GetArticlesInTopicRequest,
    options?: RequestOptions,
  ): Promise<models.ArticleResults | undefined> {
    return unwrapAsync(portalArticleGetArticlesInTopic(
      this,
      request,
      options,
    ));
  }

  /**
   * Get Article Attachment By ID
   *
   * @remarks
   * ## Overview
   *   This API allows one article attachment identified by an attachment ID to be retrieved.
   */
  async getArticleAttachmentById(
    request: operations.GetArticleAttachmentByIdRequest,
    options?: RequestOptions,
  ): Promise<models.AttachmentContentResult> {
    return unwrapAsync(portalArticleGetArticleAttachmentById(
      this,
      request,
      options,
    ));
  }

  /**
   * Get Article Attachment in Portal
   *
   * @remarks
   * ## Overview
   * The Get Article Attachment API retrieves an attachment associated to an article by calling the attachment ID for a specified portal ID.
   */
  async getAttachmentByIdInPortal(
    request: operations.GetAttachmentByIdInPortalRequest,
    options?: RequestOptions,
  ): Promise<models.AttachmentContentResult | undefined> {
    return unwrapAsync(portalArticleGetAttachmentByIdInPortal(
      this,
      request,
      options,
    ));
  }

  /**
   * Get Related Articles
   *
   * @remarks
   * ## Overview
   * The Get Related Articles API retrieves all related articles associated to a given article.
   *
   * ## Prerequisites
   *   * Set the Article type’s parameter “Include in browse on portals” to "Yes" for an article to be returned by this API.
   *   * Agents without a user profile and customers in a portal without a default user profile only have access to articles that:
   *     * Do not contain any access tags.
   *     * Do not contain any publish views.
   *     * Contain publish views without any associated tags.
   *   * Agents with a user profile and customers in a portal with a default user profile have access to articles that:
   *     * Do not contain any access tags.
   *     * Do not contain any publish views.
   *     * Contain publish views without any associated tags.
   *     * Contain access tags that are also in the assigned user profiles.
   *     * Contain publish views with associated tags that are also in the assigned user profiles.
   *
   * ## Permissions
   *   * Agents with the following assigned actions can view updates to articles currently being processed in workflows:
   *     * View Author Portal – Allows agents to view updates to articles at any stage in a workflow.
   *     * View Staging Portal – Allows agents to view updates to articles in the Staging stage or a subsequent stage in a workflow.
   */
  async getRelatedArticles(
    request: operations.GetRelatedArticlesRequest,
    options?: RequestOptions,
  ): Promise<models.ArticleResults | undefined> {
    return unwrapAsync(portalArticleGetRelatedArticles(
      this,
      request,
      options,
    ));
  }

  /**
   * Get Announcement Articles
   *
   * @remarks
   * ## Overview
   * The Get Announcement Articles API returns a portal's announcement articles. Only displayable announcement articles in the portal are returned.
   *
   * ## Prerequisites
   *   * For an article to display or be returned, set the Article type’s parameter, “Include in browse on portals,” to "Yes".
   *   * Agents without a user profile and customers in a portal without a default user profile only have access to articles that:
   *     * Do not contain any access tags.
   *     * Do not contain any publish views.
   *     * Contain publish views without any associated tags.
   *   * Agents with a user profile and customers in a portal with a default user profile have access to articles that:
   *     * Do not contain any access tags.
   *     * Do not contain any publish views.
   *     * Contain publish views without any associated tags.
   *     * Contain access tags that are also in the assigned user profiles.
   *     * Contain publish views with associated tags that are also in the assigned user profiles.
   *
   * ## Permissions
   *   * Agents with the following assigned actions can view updates to articles currently being processed in workflows:
   *     * View Author Portal – Allows agents to view updates to articles at any stage in a workflow.
   *     * View Staging Portal – Allows agents to view updates to articles in the Staging stage or a subsequent stage in a workflow.
   */
  async getAnnouncementArticles(
    request: operations.GetAnnouncementArticlesRequest,
    options?: RequestOptions,
  ): Promise<models.ArticleResults | undefined> {
    return unwrapAsync(portalArticleGetAnnouncementArticles(
      this,
      request,
      options,
    ));
  }

  /**
   * Get Article Ratings
   *
   * @remarks
   * ## Overview
   * The Get Article Ratings API returns ratings set for an Article. These ratings help you to assess the quality, helpfulness, or relevance of an article.
   */
  async getArticleRatings(
    request: operations.GetArticleRatingsRequest,
    options?: RequestOptions,
  ): Promise<models.ArticleRatingsResponse | undefined> {
    return unwrapAsync(portalArticleGetArticleRatings(
      this,
      request,
      options,
    ));
  }

  /**
   * Rate an Article
   *
   * @remarks
   * ## Overview
   * The Rate an Article API allows a user to set a rating for an article. These ratings allow you to assess the quality, helpfulness, or relevance of an article.
   */
  async rateArticle(
    request: operations.RateArticleRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(portalArticleRateArticle(
      this,
      request,
      options,
    ));
  }

  /**
   * Get Pending Article Compliances
   *
   * @remarks
   * ## Overview
   * The Get Pending Article Compliances API retrieves all compliance-enabled articles in a portal that need to be read by the current user. Results are sorted in ascending order of the compliance due date.
   *
   * ## Prerequisites
   * * The Article compliances that are returned must be:
   *     * Available for the current user profile.
   *     * Displayable. An article is displayable when the "Include in browse on portals" property is enabled for the article.
   */
  async getPendingComplianceArticles(
    request: operations.GetPendingComplianceArticlesRequest,
    options?: RequestOptions,
  ): Promise<models.ComplianceArticleResults | undefined> {
    return unwrapAsync(portalArticleGetPendingComplianceArticles(
      this,
      request,
      options,
    ));
  }

  /**
   * Get Acknowledged Article Compliances
   *
   * @remarks
   * ## Overview
   * The Get Acknowledged Article Compliances API retrieves all compliance-enabled articles in a portal that have been read by the current user in the last 60 days. Results are sorted in descending order of the acknowledgement date.
   *
   * ## Prerequisites
   * * The Article compliances that are returned must be:
   *     * Available for the current user profile.
   *     * Displayable. An article is displayable when the "Include in browse on portals" property is enabled for the article.
   *     * Acknowledged within the last 60 days.
   *     * Only the latest version of a republished compliance article will be shown.
   *     * Results will be sorted in descending order of acknowledgment date.
   */
  async getAcknowledgedComplianceArticles(
    request: operations.GetAcknowledgedComplianceArticlesRequest,
    options?: RequestOptions,
  ): Promise<models.ComplianceArticleResults | undefined> {
    return unwrapAsync(portalArticleGetAcknowledgedComplianceArticles(
      this,
      request,
      options,
    ));
  }

  /**
   * Comply With an Article
   *
   * @remarks
   * ## Overview
   * The Comply with an Article API allows the user to comply with an article by passing the Article's ID, which marks it as read by the user.
   *
   * ## Prerequisites
   *   * The user must be an agent and:
   *     * Be available in the portal.
   *     * Be available for the current user profile.
   *     * Have the Article's compliance policy enabled.
   *   * If the Article has Access Tags, then it must be available for the agent's current user profile.
   *   * If the Article has Publish Views, then at least one edition of the Article must be available for the agent's current user profile.
   */
  async complyArticle(
    request: operations.ComplyArticleRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(portalArticleComplyArticle(
      this,
      request,
      options,
    ));
  }

  /**
   * My Subscription
   *
   * @remarks
   * ## Overview
   * The My Subscription API allows authenticated users and agents to retrieve the list of articles to which they are subscribed.
   */
  async getMySubscription(
    request: operations.GetMySubscriptionRequest,
    options?: RequestOptions,
  ): Promise<models.ArticleResults | undefined> {
    return unwrapAsync(portalArticleGetMySubscription(
      this,
      request,
      options,
    ));
  }

  /**
   * Subscribe to an Article
   *
   * @remarks
   * ## Overview
   * The Subscribe to an Article API allows eGain users, authenticated customers and agents to subscribe and receive notifications about changes to an Article.
   *
   * ## Prerequisites
   *   * Notifications are sent only if the following conditions are met:
   *     * The Article content has been modified since the last published version.
   *     * The attachment list has been modified since the last published version.
   *     * The author has checked the "Include Article in new and modified Article list" option while publishing the Article.
   *   * For the Subscribe to an Article API to execute successfully:
   *     * The Article must be in the portal.
   *     * The user must have provided an email address.
   *
   * ## Permissions
   *   * Agent Permissions: The following permissions are required if the user is an agent:
   *     * If the Article has Access Tags:
   *       * The Article must be available for the agent's current user profile.
   *     * If the Article has Publish Views:
   *       * At least one edition of the Article must be available for the agent's current user profile.
   *     * If the Article has filters and the "tags query parameter" is provided:
   *       * The Article filters must match the provided tags or tag groups.
   *   * Customer Permissions: The following permissions are required if the user is a customer:
   *     * If the Article has Access Tags:
   *       * The portal must have a default user profile
   *       * The Article must be available for the portal's default user profile.
   *     * If the Article has Publish Views:
   *       * The portal must have a default user profile
   *       * At least one edition must be available for the portal's default user profile.
   *     * If the Article has filters and the "tags query parameter" is provided, then the Article filters must match the provided tags or tag groups.
   */
  async subscribeArticle(
    request: operations.SubscribeArticleRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(portalArticleSubscribeArticle(
      this,
      request,
      options,
    ));
  }

  /**
   * Unsubscribe to an Article
   *
   * @remarks
   * ## Overview
   * The Unsubscribe to an Article API allows authenticated users and agents to unsubscribe to an Article for which they were earlier subscribed to receive change notifications.
   */
  async unsubscribeArticle(
    request: operations.UnsubscribeArticleRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(portalArticleUnsubscribeArticle(
      this,
      request,
      options,
    ));
  }

  /**
   * Get Article Permissions By ID
   *
   * @remarks
   * ## Overview
   *   * The Get Article Permission by ID permits a user to retrieve permissions associated to an article.
   */
  async getArticlePermissionsById(
    request: operations.GetArticlePermissionsByIdRequest,
    options?: RequestOptions,
  ): Promise<models.ArticlePermissionsResult | undefined> {
    return unwrapAsync(portalArticleGetArticlePermissionsById(
      this,
      request,
      options,
    ));
  }

  /**
   * Get Article Personalization Details
   *
   * @remarks
   * ## Overview
   *   The Get Article Personalization Details API allows agents to retrieve the personalization tag details of an Article.
   */
  async getArticlePersonalization(
    request: operations.GetArticlePersonalizationRequest,
    options?: RequestOptions,
  ): Promise<models.Personalization | undefined> {
    return unwrapAsync(portalArticleGetArticlePersonalization(
      this,
      request,
      options,
    ));
  }
}
