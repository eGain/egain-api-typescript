/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { contentHealthGetHealth } from "../funcs/contentHealthGetHealth.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Health extends ClientSDK {
  /**
   * Check service health status
   *
   * @remarks
   * # Service Health Check
   *
   * ## Overview
   * This API provides comprehensive health status information for the Import Content service. It's designed for infrastructure monitoring, load balancer health checks, and operational monitoring to ensure service availability and performance.
   *
   * ## Health Check Features
   * - **Service Status**: Overall service health (healthy/unhealthy)
   * - **Version Information**: Current API version and build details
   *
   * ## Monitoring Use Cases
   * - **Load Balancers**: Automatic health checks for traffic routing
   * - **Alerting Systems**: Automated notifications for service issues
   *
   * ## Health Status Values
   * - **Healthy**: Service is operating normally
   * - **Unhealthy**: Service is experiencing critical issues
   * - **Maintenance**: Service is under planned maintenance
   *
   * ## Response Components
   * - **Status**: Current health state
   * - **Timestamp**: When health check was performed
   * - **Version**: API version information
   * - **Uptime**: Service uptime since last restart
   *
   * ## Monitoring Best Practices
   * - **Check Frequency**: Monitor every 1-2 minutes for production
   * - **Response Time**: Track health check response times
   *
   * ## Permissions
   * | Actor | Permission |
   * | ------- | --------|
   * | System |<ul><li>No authentication required for basic health checks.</li><li>This endpoint is designed for infrastructure monitoring.</li><li>Rate limiting applies to prevent abuse.</li></ul>|
   */
  async getHealth(
    options?: RequestOptions,
  ): Promise<operations.GetHealthResponse> {
    return unwrapAsync(contentHealthGetHealth(
      this,
      options,
    ));
  }
}
