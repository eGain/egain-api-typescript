/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { EgainCore } from "../core.js";
import { encodeSimple } from "../lib/encodings.js";
import * as M from "../lib/matchers.js";
import { compactMap } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { RequestOptions } from "../lib/sdks.js";
import { extractSecurity, resolveGlobalSecurity } from "../lib/security.js";
import { pathToFunc } from "../lib/url.js";
import { EgainError } from "../models/errors/egainerror.js";
import {
  ConnectionError,
  InvalidRequestError,
  RequestAbortedError,
  RequestTimeoutError,
  UnexpectedClientError,
} from "../models/errors/httpclienterrors.js";
import * as errors from "../models/errors/index.js";
import { ResponseValidationError } from "../models/errors/responsevalidationerror.js";
import { SDKValidationError } from "../models/errors/sdkvalidationerror.js";
import * as operations from "../models/operations/index.js";
import { APICall, APIPromise } from "../types/async.js";
import { Result } from "../types/fp.js";

/**
 * Subscribe to an Article
 *
 * @remarks
 * ## Overview
 * The Subscribe to an Article API allows eGain users, authenticated customers and agents to subscribe and receive notifications about changes to an Article.
 *
 * ## Prerequisites
 *   * Notifications are sent only if the following conditions are met:
 *     * The Article content has been modified since the last published version.
 *     * The attachment list has been modified since the last published version.
 *     * The author has checked the "Include Article in new and modified Article list" option while publishing the Article.
 *   * For the Subscribe to an Article API to execute successfully:
 *     * The Article must be in the portal.
 *     * The user must have provided an email address.
 *
 * ## Permissions
 *   * Agent Permissions: The following permissions are required if the user is an agent:
 *     * If the Article has Access Tags:
 *       * The Article must be available for the agent's current user profile.
 *     * If the Article has Publish Views:
 *       * At least one edition of the Article must be available for the agent's current user profile.
 *     * If the Article has filters and the "tags query parameter" is provided:
 *       * The Article filters must match the provided tags or tag groups.
 *   * Customer Permissions: The following permissions are required if the user is a customer:
 *     * If the Article has Access Tags:
 *       * The portal must have a default user profile
 *       * The Article must be available for the portal's default user profile.
 *     * If the Article has Publish Views:
 *       * The portal must have a default user profile
 *       * At least one edition must be available for the portal's default user profile.
 *     * If the Article has filters and the "tags query parameter" is provided, then the Article filters must match the provided tags or tag groups.
 */
export function portalArticleSubscribeArticle(
  client: EgainCore,
  request: operations.SubscribeArticleRequest,
  options?: RequestOptions,
): APIPromise<
  Result<
    void,
    | errors.WSErrorCommon
    | EgainError
    | ResponseValidationError
    | ConnectionError
    | RequestAbortedError
    | RequestTimeoutError
    | InvalidRequestError
    | UnexpectedClientError
    | SDKValidationError
  >
> {
  return new APIPromise($do(
    client,
    request,
    options,
  ));
}

async function $do(
  client: EgainCore,
  request: operations.SubscribeArticleRequest,
  options?: RequestOptions,
): Promise<
  [
    Result<
      void,
      | errors.WSErrorCommon
      | EgainError
      | ResponseValidationError
      | ConnectionError
      | RequestAbortedError
      | RequestTimeoutError
      | InvalidRequestError
      | UnexpectedClientError
      | SDKValidationError
    >,
    APICall,
  ]
> {
  const parsed = safeParse(
    request,
    (value) => operations.SubscribeArticleRequest$outboundSchema.parse(value),
    "Input validation failed",
  );
  if (!parsed.ok) {
    return [parsed, { status: "invalid" }];
  }
  const payload = parsed.value;
  const body = null;

  const pathParams = {
    articleID: encodeSimple("articleID", payload.articleID, {
      explode: false,
      charEncoding: "percent",
    }),
    portalID: encodeSimple("portalID", payload.portalID, {
      explode: false,
      charEncoding: "percent",
    }),
  };

  const path = pathToFunc("/portals/{portalID}/articles/{articleID}/subscribe")(
    pathParams,
  );

  const headers = new Headers(compactMap({
    Accept: "application/json",
    "Accept-Language": encodeSimple(
      "Accept-Language",
      payload["Accept-Language"],
      { explode: false, charEncoding: "none" },
    ),
  }));

  const securityInput = await extractSecurity(client._options.security);
  const requestSecurity = resolveGlobalSecurity(securityInput);

  const context = {
    options: client._options,
    baseURL: options?.serverURL ?? client._baseURL ?? "",
    operationID: "subscribeArticle",
    oAuth2Scopes: [],

    resolvedSecurity: requestSecurity,

    securitySource: client._options.security,
    retryConfig: options?.retries
      || client._options.retryConfig
      || { strategy: "none" },
    retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
  };

  const requestRes = client._createRequest(context, {
    security: requestSecurity,
    method: "PUT",
    baseURL: options?.serverURL,
    path: path,
    headers: headers,
    body: body,
    userAgent: client._options.userAgent,
    timeoutMs: options?.timeoutMs || client._options.timeoutMs || -1,
  }, options);
  if (!requestRes.ok) {
    return [requestRes, { status: "invalid" }];
  }
  const req = requestRes.value;

  const doResult = await client._do(req, {
    context,
    errorCodes: ["400", "401", "403", "404", "406", "4XX", "500", "5XX"],
    retryConfig: context.retryConfig,
    retryCodes: context.retryCodes,
  });
  if (!doResult.ok) {
    return [doResult, { status: "request-error", request: req }];
  }
  const response = doResult.value;

  const responseFields = {
    HttpMeta: { Response: response, Request: req },
  };

  const [result] = await M.match<
    void,
    | errors.WSErrorCommon
    | EgainError
    | ResponseValidationError
    | ConnectionError
    | RequestAbortedError
    | RequestTimeoutError
    | InvalidRequestError
    | UnexpectedClientError
    | SDKValidationError
  >(
    M.nil(204, z.void()),
    M.jsonErr([400, 401, 403, 404, 406], errors.WSErrorCommon$inboundSchema),
    M.jsonErr(500, errors.WSErrorCommon$inboundSchema),
    M.fail("4XX"),
    M.fail("5XX"),
  )(response, req, { extraFields: responseFields });
  if (!result.ok) {
    return [result, { status: "complete", request: req, response }];
  }

  return [result, { status: "complete", request: req, response }];
}
