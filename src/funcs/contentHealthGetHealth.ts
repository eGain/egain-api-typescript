/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { EgainCore } from "../core.js";
import * as M from "../lib/matchers.js";
import { compactMap } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import { extractSecurity, resolveGlobalSecurity } from "../lib/security.js";
import { pathToFunc } from "../lib/url.js";
import { EgainError } from "../models/errors/egainerror.js";
import {
  ConnectionError,
  InvalidRequestError,
  RequestAbortedError,
  RequestTimeoutError,
  UnexpectedClientError,
} from "../models/errors/httpclienterrors.js";
import * as errors from "../models/errors/index.js";
import { ResponseValidationError } from "../models/errors/responsevalidationerror.js";
import { SDKValidationError } from "../models/errors/sdkvalidationerror.js";
import { GetHealthServerList } from "../models/operations/gethealth.js";
import * as operations from "../models/operations/index.js";
import { APICall, APIPromise } from "../types/async.js";
import { Result } from "../types/fp.js";

/**
 * Check service health status
 *
 * @remarks
 * # Service Health Check
 *
 * ## Overview
 * This API provides comprehensive health status information for the Import Content service. It's designed for infrastructure monitoring, load balancer health checks, and operational monitoring to ensure service availability and performance.
 *
 * ## Health Check Features
 * - **Service Status**: Overall service health (healthy/unhealthy)
 * - **Version Information**: Current API version and build details
 *
 * ## Monitoring Use Cases
 * - **Load Balancers**: Automatic health checks for traffic routing
 * - **Alerting Systems**: Automated notifications for service issues
 *
 * ## Health Status Values
 * - **Healthy**: Service is operating normally
 * - **Unhealthy**: Service is experiencing critical issues
 * - **Maintenance**: Service is under planned maintenance
 *
 * ## Response Components
 * - **Status**: Current health state
 * - **Timestamp**: When health check was performed
 * - **Version**: API version information
 * - **Uptime**: Service uptime since last restart
 *
 * ## Monitoring Best Practices
 * - **Check Frequency**: Monitor every 1-2 minutes for production
 * - **Response Time**: Track health check response times
 *
 * ## Permissions
 * | Actor | Permission |
 * | ------- | --------|
 * | System |<ul><li>No authentication required for basic health checks.</li><li>This endpoint is designed for infrastructure monitoring.</li><li>Rate limiting applies to prevent abuse.</li></ul>|
 */
export function contentHealthGetHealth(
  client: EgainCore,
  options?: RequestOptions,
): APIPromise<
  Result<
    operations.GetHealthResponse,
    | errors.ServiceUnavailableError
    | EgainError
    | ResponseValidationError
    | ConnectionError
    | RequestAbortedError
    | RequestTimeoutError
    | InvalidRequestError
    | UnexpectedClientError
    | SDKValidationError
  >
> {
  return new APIPromise($do(
    client,
    options,
  ));
}

async function $do(
  client: EgainCore,
  options?: RequestOptions,
): Promise<
  [
    Result<
      operations.GetHealthResponse,
      | errors.ServiceUnavailableError
      | EgainError
      | ResponseValidationError
      | ConnectionError
      | RequestAbortedError
      | RequestTimeoutError
      | InvalidRequestError
      | UnexpectedClientError
      | SDKValidationError
    >,
    APICall,
  ]
> {
  const baseURL = options?.serverURL
    || pathToFunc(GetHealthServerList[0], { charEncoding: "percent" })({
      API_DOMAIN: "api.egain.cloud",
    });

  const path = pathToFunc("/import/content/health")();

  const headers = new Headers(compactMap({
    Accept: "application/json",
  }));

  const securityInput = await extractSecurity(client._options.security);
  const requestSecurity = resolveGlobalSecurity(securityInput);

  const context = {
    options: client._options,
    baseURL: baseURL ?? "",
    operationID: "getHealth",
    oAuth2Scopes: [],

    resolvedSecurity: requestSecurity,

    securitySource: client._options.security,
    retryConfig: options?.retries
      || client._options.retryConfig
      || { strategy: "none" },
    retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
  };

  const requestRes = client._createRequest(context, {
    security: requestSecurity,
    method: "GET",
    baseURL: baseURL,
    path: path,
    headers: headers,
    userAgent: client._options.userAgent,
    timeoutMs: options?.timeoutMs || client._options.timeoutMs || -1,
  }, options);
  if (!requestRes.ok) {
    return [requestRes, { status: "invalid" }];
  }
  const req = requestRes.value;

  const doResult = await client._do(req, {
    context,
    errorCodes: ["4XX", "503", "5XX"],
    retryConfig: context.retryConfig,
    retryCodes: context.retryCodes,
  });
  if (!doResult.ok) {
    return [doResult, { status: "request-error", request: req }];
  }
  const response = doResult.value;

  const responseFields = {
    HttpMeta: { Response: response, Request: req },
  };

  const [result] = await M.match<
    operations.GetHealthResponse,
    | errors.ServiceUnavailableError
    | EgainError
    | ResponseValidationError
    | ConnectionError
    | RequestAbortedError
    | RequestTimeoutError
    | InvalidRequestError
    | UnexpectedClientError
    | SDKValidationError
  >(
    M.json(200, operations.GetHealthResponse$inboundSchema),
    M.jsonErr(503, errors.ServiceUnavailableError$inboundSchema),
    M.fail("4XX"),
    M.fail("5XX"),
  )(response, req, { extraFields: responseFields });
  if (!result.ok) {
    return [result, { status: "complete", request: req, response }];
  }

  return [result, { status: "complete", request: req, response }];
}
