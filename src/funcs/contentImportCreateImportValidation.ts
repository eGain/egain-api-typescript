/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { EgainCore } from "../core.js";
import { encodeJSON } from "../lib/encodings.js";
import * as M from "../lib/matchers.js";
import { compactMap } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { RequestOptions } from "../lib/sdks.js";
import { extractSecurity, resolveGlobalSecurity } from "../lib/security.js";
import { pathToFunc } from "../lib/url.js";
import { EgainError } from "../models/errors/egainerror.js";
import {
  ConnectionError,
  InvalidRequestError,
  RequestAbortedError,
  RequestTimeoutError,
  UnexpectedClientError,
} from "../models/errors/httpclienterrors.js";
import * as errors from "../models/errors/index.js";
import { ResponseValidationError } from "../models/errors/responsevalidationerror.js";
import { SDKValidationError } from "../models/errors/sdkvalidationerror.js";
import * as models from "../models/index.js";
import { CreateImportValidationServerList } from "../models/operations/createimportvalidation.js";
import * as operations from "../models/operations/index.js";
import { APICall, APIPromise } from "../types/async.js";
import { Result } from "../types/fp.js";

/**
 * Validate content structure and format before import
 *
 * @remarks
 * # Validate Import Content
 *
 * ## Overview
 * This API enables users to validate content structure, format, and compliance before importing it into the production knowledge base. Validation is a non-destructive operation that checks content without making any changes to your existing data.
 *
 * ## What Validation Checks
 * - **Content Structure**: Verifies required fields and data types
 * - **Format Compliance**: Ensures content meets platform requirements
 * - **Language Support**: Validates content against supported languages
 * - **Metadata Mapping**: Checks field mappings and transformations
 * - **Business Rules**: Validates against department-specific rules
 *
 * ## Validation Benefits
 * - **Risk Mitigation**: Identify issues before affecting production data
 * - **Quality Assurance**: Ensure content meets organizational standards
 * - **Cost Savings**: Avoid failed imports that waste processing time
 * - **Compliance**: Meet regulatory and internal content requirements
 *
 * ## Validation Process
 * 1. **Content Analysis**: System analyzes content structure and format
 * 2. **Rule Validation**: Applies business rules and validation logic
 * 3. **Quality Assessment**: Evaluates content quality and completeness
 * 4. **Report Generation**: Creates detailed validation report
 * 5. **Issue Categorization**: Classifies issues by severity and type
 *
 * ## Common Validation Issues
 * - **Missing Required Fields**: Title, description, category, etc.
 * - **Invalid Data Types**: Incorrect field formats (dates, numbers, etc.)
 * - **Language Mismatches**: Content language not supported by department
 *
 * ## Best Practices
 * - **Always Validate First**: Run validation before any import operation
 * - **Review Reports**: Carefully examine validation results and warnings
 * - **Fix Issues**: Address validation errors before proceeding with import
 * - **Test Small Batches**: Validate with small content samples first
 * - **Iterate**: Use validation feedback to improve content quality
 *
 * ## Permissions
 * | Actor | Permission |
 * | ------- | --------|
 * | User |<ul><li>User must be a department user.</li><li>User must have 'Author' role.</li><li>Content can only be imported if the user has all the required languages assigned.</li></ul>|
 */
export function contentImportCreateImportValidation(
  client: EgainCore,
  request: models.ValidateImportContent,
  options?: RequestOptions,
): APIPromise<
  Result<
    operations.CreateImportValidationResponse | undefined,
    | errors.WSErrorCommon
    | errors.SchemasWSErrorCommon
    | EgainError
    | ResponseValidationError
    | ConnectionError
    | RequestAbortedError
    | RequestTimeoutError
    | InvalidRequestError
    | UnexpectedClientError
    | SDKValidationError
  >
> {
  return new APIPromise($do(
    client,
    request,
    options,
  ));
}

async function $do(
  client: EgainCore,
  request: models.ValidateImportContent,
  options?: RequestOptions,
): Promise<
  [
    Result<
      operations.CreateImportValidationResponse | undefined,
      | errors.WSErrorCommon
      | errors.SchemasWSErrorCommon
      | EgainError
      | ResponseValidationError
      | ConnectionError
      | RequestAbortedError
      | RequestTimeoutError
      | InvalidRequestError
      | UnexpectedClientError
      | SDKValidationError
    >,
    APICall,
  ]
> {
  const parsed = safeParse(
    request,
    (value) => models.ValidateImportContent$outboundSchema.parse(value),
    "Input validation failed",
  );
  if (!parsed.ok) {
    return [parsed, { status: "invalid" }];
  }
  const payload = parsed.value;
  const body = encodeJSON("body", payload, { explode: true });

  const baseURL = options?.serverURL
    || pathToFunc(CreateImportValidationServerList[0], {
      charEncoding: "percent",
    })({
      API_DOMAIN: "api.egain.cloud",
    });

  const path = pathToFunc("/import/content/validate")();

  const headers = new Headers(compactMap({
    "Content-Type": "application/json",
    Accept: "application/json",
  }));

  const securityInput = await extractSecurity(client._options.security);
  const requestSecurity = resolveGlobalSecurity(securityInput);

  const context = {
    options: client._options,
    baseURL: baseURL ?? "",
    operationID: "createImportValidation",
    oAuth2Scopes: [],

    resolvedSecurity: requestSecurity,

    securitySource: client._options.security,
    retryConfig: options?.retries
      || client._options.retryConfig
      || { strategy: "none" },
    retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
  };

  const requestRes = client._createRequest(context, {
    security: requestSecurity,
    method: "POST",
    baseURL: baseURL,
    path: path,
    headers: headers,
    body: body,
    userAgent: client._options.userAgent,
    timeoutMs: options?.timeoutMs || client._options.timeoutMs || -1,
  }, options);
  if (!requestRes.ok) {
    return [requestRes, { status: "invalid" }];
  }
  const req = requestRes.value;

  const doResult = await client._do(req, {
    context,
    errorCodes: ["400", "401", "403", "406", "412", "4XX", "500", "5XX"],
    retryConfig: context.retryConfig,
    retryCodes: context.retryCodes,
  });
  if (!doResult.ok) {
    return [doResult, { status: "request-error", request: req }];
  }
  const response = doResult.value;

  const responseFields = {
    HttpMeta: { Response: response, Request: req },
  };

  const [result] = await M.match<
    operations.CreateImportValidationResponse | undefined,
    | errors.WSErrorCommon
    | errors.SchemasWSErrorCommon
    | EgainError
    | ResponseValidationError
    | ConnectionError
    | RequestAbortedError
    | RequestTimeoutError
    | InvalidRequestError
    | UnexpectedClientError
    | SDKValidationError
  >(
    M.nil(
      202,
      operations.CreateImportValidationResponse$inboundSchema.optional(),
      { hdrs: true },
    ),
    M.jsonErr([400, 401, 403, 406], errors.WSErrorCommon$inboundSchema),
    M.jsonErr(412, errors.SchemasWSErrorCommon$inboundSchema),
    M.jsonErr(500, errors.WSErrorCommon$inboundSchema),
    M.fail("4XX"),
    M.fail("5XX"),
  )(response, req, { extraFields: responseFields });
  if (!result.ok) {
    return [result, { status: "complete", request: req, response }];
  }

  return [result, { status: "complete", request: req, response }];
}
