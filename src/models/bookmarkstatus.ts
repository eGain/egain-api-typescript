/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  FolderBreadcrumb,
  FolderBreadcrumb$inboundSchema,
  FolderBreadcrumb$Outbound,
  FolderBreadcrumb$outboundSchema,
} from "./folderbreadcrumb.js";

/**
 * Article Bookmark Status
 */
export type BookmarkStatus = {
  /**
   * Indicates whether the Article is bookmarked
   */
  isBookmarked: boolean;
  /**
   * The ID of the Bookmark, if Article is bookmarked.
   */
  bookmarkID?: number | undefined;
  /**
   * This schema contains one or more FolderSummary instances.
   */
  folderBreadcrumb?: FolderBreadcrumb | undefined;
};

/** @internal */
export const BookmarkStatus$inboundSchema: z.ZodType<
  BookmarkStatus,
  z.ZodTypeDef,
  unknown
> = z.object({
  isBookmarked: z.boolean(),
  bookmarkID: z.number().int().optional(),
  folderBreadcrumb: FolderBreadcrumb$inboundSchema.optional(),
});

/** @internal */
export type BookmarkStatus$Outbound = {
  isBookmarked: boolean;
  bookmarkID?: number | undefined;
  folderBreadcrumb?: FolderBreadcrumb$Outbound | undefined;
};

/** @internal */
export const BookmarkStatus$outboundSchema: z.ZodType<
  BookmarkStatus$Outbound,
  z.ZodTypeDef,
  BookmarkStatus
> = z.object({
  isBookmarked: z.boolean(),
  bookmarkID: z.number().int().optional(),
  folderBreadcrumb: FolderBreadcrumb$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BookmarkStatus$ {
  /** @deprecated use `BookmarkStatus$inboundSchema` instead. */
  export const inboundSchema = BookmarkStatus$inboundSchema;
  /** @deprecated use `BookmarkStatus$outboundSchema` instead. */
  export const outboundSchema = BookmarkStatus$outboundSchema;
  /** @deprecated use `BookmarkStatus$Outbound` instead. */
  export type Outbound = BookmarkStatus$Outbound;
}

export function bookmarkStatusToJSON(bookmarkStatus: BookmarkStatus): string {
  return JSON.stringify(BookmarkStatus$outboundSchema.parse(bookmarkStatus));
}

export function bookmarkStatusFromJSON(
  jsonString: string,
): SafeParseResult<BookmarkStatus, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => BookmarkStatus$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BookmarkStatus' from JSON`,
  );
}
