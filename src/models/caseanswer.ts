/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type CaseAnswer = {
  /**
   * ID of the answer
   */
  id?: string | undefined;
  /**
   * Text of the answer
   */
  text?: string | undefined;
};

/** @internal */
export const CaseAnswer$inboundSchema: z.ZodType<
  CaseAnswer,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  text: z.string().optional(),
});

/** @internal */
export type CaseAnswer$Outbound = {
  id?: string | undefined;
  text?: string | undefined;
};

/** @internal */
export const CaseAnswer$outboundSchema: z.ZodType<
  CaseAnswer$Outbound,
  z.ZodTypeDef,
  CaseAnswer
> = z.object({
  id: z.string().optional(),
  text: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CaseAnswer$ {
  /** @deprecated use `CaseAnswer$inboundSchema` instead. */
  export const inboundSchema = CaseAnswer$inboundSchema;
  /** @deprecated use `CaseAnswer$outboundSchema` instead. */
  export const outboundSchema = CaseAnswer$outboundSchema;
  /** @deprecated use `CaseAnswer$Outbound` instead. */
  export type Outbound = CaseAnswer$Outbound;
}

export function caseAnswerToJSON(caseAnswer: CaseAnswer): string {
  return JSON.stringify(CaseAnswer$outboundSchema.parse(caseAnswer));
}

export function caseAnswerFromJSON(
  jsonString: string,
): SafeParseResult<CaseAnswer, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CaseAnswer$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CaseAnswer' from JSON`,
  );
}
