/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type OwnedBy = {
  /**
   * The ID of the user that owns this resource.
   */
  id?: string | undefined;
  /**
   * The resource owner's username.
   */
  userName?: string | undefined;
  /**
   * The resource owner's first name.
   */
  firstName?: string | undefined;
  /**
   * The resource owner's middle name.
   */
  middleName?: string | undefined;
  /**
   * The resource owner's last name.
   */
  lastName?: string | undefined;
};

/** @internal */
export const OwnedBy$inboundSchema: z.ZodType<OwnedBy, z.ZodTypeDef, unknown> =
  z.object({
    id: z.string().optional(),
    userName: z.string().optional(),
    firstName: z.string().optional(),
    middleName: z.string().optional(),
    lastName: z.string().optional(),
  });

/** @internal */
export type OwnedBy$Outbound = {
  id?: string | undefined;
  userName?: string | undefined;
  firstName?: string | undefined;
  middleName?: string | undefined;
  lastName?: string | undefined;
};

/** @internal */
export const OwnedBy$outboundSchema: z.ZodType<
  OwnedBy$Outbound,
  z.ZodTypeDef,
  OwnedBy
> = z.object({
  id: z.string().optional(),
  userName: z.string().optional(),
  firstName: z.string().optional(),
  middleName: z.string().optional(),
  lastName: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OwnedBy$ {
  /** @deprecated use `OwnedBy$inboundSchema` instead. */
  export const inboundSchema = OwnedBy$inboundSchema;
  /** @deprecated use `OwnedBy$outboundSchema` instead. */
  export const outboundSchema = OwnedBy$outboundSchema;
  /** @deprecated use `OwnedBy$Outbound` instead. */
  export type Outbound = OwnedBy$Outbound;
}

export function ownedByToJSON(ownedBy: OwnedBy): string {
  return JSON.stringify(OwnedBy$outboundSchema.parse(ownedBy));
}

export function ownedByFromJSON(
  jsonString: string,
): SafeParseResult<OwnedBy, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OwnedBy$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OwnedBy' from JSON`,
  );
}
