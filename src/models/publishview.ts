/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  TagCategory,
  TagCategory$inboundSchema,
  TagCategory$Outbound,
  TagCategory$outboundSchema,
} from "./tagcategory.js";

export type PublishViewTagCategory = {
  tagCategory?: Array<TagCategory> | undefined;
};

export type PublishView = {
  /**
   * name of the publish view
   */
  name?: string | undefined;
  id?: string | undefined;
  /**
   * Tag categories are comprised of both tags and tag groups.<br><br>Note that the total number of tag and tag groups cannot exceed 20.
   */
  tagCategories?: Array<PublishViewTagCategory> | undefined;
};

/** @internal */
export const PublishViewTagCategory$inboundSchema: z.ZodType<
  PublishViewTagCategory,
  z.ZodTypeDef,
  unknown
> = z.object({
  tagCategory: z.array(TagCategory$inboundSchema).optional(),
});

/** @internal */
export type PublishViewTagCategory$Outbound = {
  tagCategory?: Array<TagCategory$Outbound> | undefined;
};

/** @internal */
export const PublishViewTagCategory$outboundSchema: z.ZodType<
  PublishViewTagCategory$Outbound,
  z.ZodTypeDef,
  PublishViewTagCategory
> = z.object({
  tagCategory: z.array(TagCategory$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PublishViewTagCategory$ {
  /** @deprecated use `PublishViewTagCategory$inboundSchema` instead. */
  export const inboundSchema = PublishViewTagCategory$inboundSchema;
  /** @deprecated use `PublishViewTagCategory$outboundSchema` instead. */
  export const outboundSchema = PublishViewTagCategory$outboundSchema;
  /** @deprecated use `PublishViewTagCategory$Outbound` instead. */
  export type Outbound = PublishViewTagCategory$Outbound;
}

export function publishViewTagCategoryToJSON(
  publishViewTagCategory: PublishViewTagCategory,
): string {
  return JSON.stringify(
    PublishViewTagCategory$outboundSchema.parse(publishViewTagCategory),
  );
}

export function publishViewTagCategoryFromJSON(
  jsonString: string,
): SafeParseResult<PublishViewTagCategory, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PublishViewTagCategory$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PublishViewTagCategory' from JSON`,
  );
}

/** @internal */
export const PublishView$inboundSchema: z.ZodType<
  PublishView,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string().optional(),
  id: z.string().optional(),
  tagCategories: z.array(z.lazy(() => PublishViewTagCategory$inboundSchema))
    .optional(),
});

/** @internal */
export type PublishView$Outbound = {
  name?: string | undefined;
  id?: string | undefined;
  tagCategories?: Array<PublishViewTagCategory$Outbound> | undefined;
};

/** @internal */
export const PublishView$outboundSchema: z.ZodType<
  PublishView$Outbound,
  z.ZodTypeDef,
  PublishView
> = z.object({
  name: z.string().optional(),
  id: z.string().optional(),
  tagCategories: z.array(z.lazy(() => PublishViewTagCategory$outboundSchema))
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PublishView$ {
  /** @deprecated use `PublishView$inboundSchema` instead. */
  export const inboundSchema = PublishView$inboundSchema;
  /** @deprecated use `PublishView$outboundSchema` instead. */
  export const outboundSchema = PublishView$outboundSchema;
  /** @deprecated use `PublishView$Outbound` instead. */
  export type Outbound = PublishView$Outbound;
}

export function publishViewToJSON(publishView: PublishView): string {
  return JSON.stringify(PublishView$outboundSchema.parse(publishView));
}

export function publishViewFromJSON(
  jsonString: string,
): SafeParseResult<PublishView, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PublishView$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PublishView' from JSON`,
  );
}
