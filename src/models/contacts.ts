/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import {
  ContactPerson,
  ContactPerson$inboundSchema,
  ContactPerson$Outbound,
  ContactPerson$outboundSchema,
} from "./contactperson.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

/**
 * Contacts
 */
export type Contacts = {
  /**
   * Contact Person
   */
  contact?: Array<ContactPerson> | undefined;
};

/** @internal */
export const Contacts$inboundSchema: z.ZodType<
  Contacts,
  z.ZodTypeDef,
  unknown
> = z.object({
  contact: z.array(ContactPerson$inboundSchema).optional(),
});

/** @internal */
export type Contacts$Outbound = {
  contact?: Array<ContactPerson$Outbound> | undefined;
};

/** @internal */
export const Contacts$outboundSchema: z.ZodType<
  Contacts$Outbound,
  z.ZodTypeDef,
  Contacts
> = z.object({
  contact: z.array(ContactPerson$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Contacts$ {
  /** @deprecated use `Contacts$inboundSchema` instead. */
  export const inboundSchema = Contacts$inboundSchema;
  /** @deprecated use `Contacts$outboundSchema` instead. */
  export const outboundSchema = Contacts$outboundSchema;
  /** @deprecated use `Contacts$Outbound` instead. */
  export type Outbound = Contacts$Outbound;
}

export function contactsToJSON(contacts: Contacts): string {
  return JSON.stringify(Contacts$outboundSchema.parse(contacts));
}

export function contactsFromJSON(
  jsonString: string,
): SafeParseResult<Contacts, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Contacts$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Contacts' from JSON`,
  );
}
