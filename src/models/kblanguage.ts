/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

/**
 * Name of the language.
 */
export const Name = {
  EnglishUnitedStates: "English (United States)",
  EnglishUnitedKingdom: "English (United Kingdom)",
  FrenchFrance: "French (France)",
  SpanishSpain: "Spanish (Spain)",
  ItalianItaly: "Italian (Italy)",
  GermanGermany: "German (Germany)",
  DutchNetherlands: "Dutch (Netherlands)",
  PortugueseBrazil: "Portuguese (Brazil)",
  PortuguesePortugal: "Portuguese (Portugal)",
  DanishDenmark: "Danish (Denmark)",
  SwedishSweden: "Swedish (Sweden)",
  RussianRussia: "Russian (Russia)",
  FrenchCanada: "French (Canada)",
  ChineseSimplified: "Chinese (Simplified)",
  JapaneseJapan: "Japanese (Japan)",
  KoreanSouthKorea: "Korean (South Korea)",
} as const;
/**
 * Name of the language.
 */
export type Name = ClosedEnum<typeof Name>;

/**
 * IETF code of the language.
 */
export const KbLanguageCode1 = {
  EnUS: "en-US",
  EnGB: "en-GB",
  FRFR: "fr-FR",
  ESES: "es-ES",
  ITIT: "it-IT",
  DEDE: "de-DE",
  NLNL: "nl-NL",
  PtBR: "pt-BR",
  PTPT: "pt-PT",
  DaDK: "da-DK",
  SvSE: "sv-SE",
  RURU: "ru-RU",
  FrCA: "fr-CA",
  ZhCN: "zh-CN",
  JaJP: "ja-JP",
  KoKR: "ko-KR",
} as const;
/**
 * IETF code of the language.
 */
export type KbLanguageCode1 = ClosedEnum<typeof KbLanguageCode1>;

export type KbLanguage = {
  /**
   * Name of the language.
   */
  name?: Name | undefined;
  /**
   * IETF code of the language.
   */
  code?: KbLanguageCode1 | undefined;
};

/** @internal */
export const Name$inboundSchema: z.ZodNativeEnum<typeof Name> = z.nativeEnum(
  Name,
);

/** @internal */
export const Name$outboundSchema: z.ZodNativeEnum<typeof Name> =
  Name$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Name$ {
  /** @deprecated use `Name$inboundSchema` instead. */
  export const inboundSchema = Name$inboundSchema;
  /** @deprecated use `Name$outboundSchema` instead. */
  export const outboundSchema = Name$outboundSchema;
}

/** @internal */
export const KbLanguageCode1$inboundSchema: z.ZodNativeEnum<
  typeof KbLanguageCode1
> = z.nativeEnum(KbLanguageCode1);

/** @internal */
export const KbLanguageCode1$outboundSchema: z.ZodNativeEnum<
  typeof KbLanguageCode1
> = KbLanguageCode1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace KbLanguageCode1$ {
  /** @deprecated use `KbLanguageCode1$inboundSchema` instead. */
  export const inboundSchema = KbLanguageCode1$inboundSchema;
  /** @deprecated use `KbLanguageCode1$outboundSchema` instead. */
  export const outboundSchema = KbLanguageCode1$outboundSchema;
}

/** @internal */
export const KbLanguage$inboundSchema: z.ZodType<
  KbLanguage,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: Name$inboundSchema.optional(),
  code: KbLanguageCode1$inboundSchema.optional(),
});

/** @internal */
export type KbLanguage$Outbound = {
  name?: string | undefined;
  code?: string | undefined;
};

/** @internal */
export const KbLanguage$outboundSchema: z.ZodType<
  KbLanguage$Outbound,
  z.ZodTypeDef,
  KbLanguage
> = z.object({
  name: Name$outboundSchema.optional(),
  code: KbLanguageCode1$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace KbLanguage$ {
  /** @deprecated use `KbLanguage$inboundSchema` instead. */
  export const inboundSchema = KbLanguage$inboundSchema;
  /** @deprecated use `KbLanguage$outboundSchema` instead. */
  export const outboundSchema = KbLanguage$outboundSchema;
  /** @deprecated use `KbLanguage$Outbound` instead. */
  export type Outbound = KbLanguage$Outbound;
}

export function kbLanguageToJSON(kbLanguage: KbLanguage): string {
  return JSON.stringify(KbLanguage$outboundSchema.parse(kbLanguage));
}

export function kbLanguageFromJSON(
  jsonString: string,
): SafeParseResult<KbLanguage, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => KbLanguage$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'KbLanguage' from JSON`,
  );
}
