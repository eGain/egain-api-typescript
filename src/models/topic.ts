/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import {
  CreatedBy,
  CreatedBy$inboundSchema,
  CreatedBy$Outbound,
  CreatedBy$outboundSchema,
} from "./createdby.js";
import {
  CustomAttribute,
  CustomAttribute$inboundSchema,
  CustomAttribute$Outbound,
  CustomAttribute$outboundSchema,
} from "./customattribute.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  Link,
  Link$inboundSchema,
  Link$Outbound,
  Link$outboundSchema,
} from "./link.js";
import {
  ModifiedBy,
  ModifiedBy$inboundSchema,
  ModifiedBy$Outbound,
  ModifiedBy$outboundSchema,
} from "./modifiedby.js";

/**
 * This schema contains general information about the topic.
 */
export type Topic = {
  /**
   * The alphanumeric ID of the topic.<br><br>A topic ID is composed of a 4-letter prefix, followed by a dash and 4-15 digits.
   */
  id: string;
  /**
   * The name of the topic.
   */
  name?: any | undefined;
  /**
   * A description of the topic.
   */
  description?: string | undefined;
  /**
   * Number of articles in this topic.
   */
  articleCountInTopic?: number | undefined;
  /**
   * Number of articles in this topic and all sub-topics.
   */
  articleCountInTopicTree?: number | undefined;
  createdBy?: CreatedBy | undefined;
  createdDate?: string | undefined;
  /**
   * ID of the topic's department.
   */
  departmentId?: string | undefined;
  /**
   * The URL of an image to be associated with the topic.
   */
  imageUrl?: string | undefined;
  modifiedBy?: ModifiedBy | undefined;
  /**
   * The date on which the topic was last modified.
   */
  modifiedDate?: string | undefined;
  /**
   * Number of sub-topics below this topic.
   */
  childCount?: number | undefined;
  /**
   * Array with the list of sub-topics. <br><br>Valid IDs are composed of a 2-4 letter prefix, followed by a dash and 4-15 digits.
   */
  subTopicIds?: Array<string> | undefined;
  /**
   * ID of the parent topic. -1 if it is the root topic. <br><br>Valid IDs are composed of a 2-4 letter prefix, followed by a dash and 4-15 digits.
   */
  parentTopicId?: string | undefined;
  /**
   * Custom attributes for the Topic.
   */
  customAttributes?: Array<CustomAttribute> | undefined;
  /**
   * The ID of the article used as the home page of this topic. <br><br>Valid IDs are composed of a 2-4 letter prefix, followed by a dash and 4-15 digits.
   */
  topicHomeArticleId?: string | undefined;
  /**
   * Defines the relationship between this resource and another object.
   */
  link?: Link | undefined;
};

/** @internal */
export const Topic$inboundSchema: z.ZodType<Topic, z.ZodTypeDef, unknown> = z
  .object({
    id: z.string(),
    name: z.any().optional(),
    description: z.string().optional(),
    articleCountInTopic: z.number().int().optional(),
    articleCountInTopicTree: z.number().int().optional(),
    createdBy: CreatedBy$inboundSchema.optional(),
    createdDate: z.string().optional(),
    departmentId: z.string().optional(),
    imageUrl: z.string().optional(),
    modifiedBy: ModifiedBy$inboundSchema.optional(),
    modifiedDate: z.string().optional(),
    childCount: z.number().int().optional(),
    subTopicIds: z.array(z.string()).optional(),
    parentTopicId: z.string().optional(),
    customAttributes: z.array(CustomAttribute$inboundSchema).optional(),
    topicHomeArticleId: z.string().optional(),
    link: Link$inboundSchema.optional(),
  });

/** @internal */
export type Topic$Outbound = {
  id: string;
  name?: any | undefined;
  description?: string | undefined;
  articleCountInTopic?: number | undefined;
  articleCountInTopicTree?: number | undefined;
  createdBy?: CreatedBy$Outbound | undefined;
  createdDate?: string | undefined;
  departmentId?: string | undefined;
  imageUrl?: string | undefined;
  modifiedBy?: ModifiedBy$Outbound | undefined;
  modifiedDate?: string | undefined;
  childCount?: number | undefined;
  subTopicIds?: Array<string> | undefined;
  parentTopicId?: string | undefined;
  customAttributes?: Array<CustomAttribute$Outbound> | undefined;
  topicHomeArticleId?: string | undefined;
  link?: Link$Outbound | undefined;
};

/** @internal */
export const Topic$outboundSchema: z.ZodType<
  Topic$Outbound,
  z.ZodTypeDef,
  Topic
> = z.object({
  id: z.string(),
  name: z.any().optional(),
  description: z.string().optional(),
  articleCountInTopic: z.number().int().optional(),
  articleCountInTopicTree: z.number().int().optional(),
  createdBy: CreatedBy$outboundSchema.optional(),
  createdDate: z.string().optional(),
  departmentId: z.string().optional(),
  imageUrl: z.string().optional(),
  modifiedBy: ModifiedBy$outboundSchema.optional(),
  modifiedDate: z.string().optional(),
  childCount: z.number().int().optional(),
  subTopicIds: z.array(z.string()).optional(),
  parentTopicId: z.string().optional(),
  customAttributes: z.array(CustomAttribute$outboundSchema).optional(),
  topicHomeArticleId: z.string().optional(),
  link: Link$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Topic$ {
  /** @deprecated use `Topic$inboundSchema` instead. */
  export const inboundSchema = Topic$inboundSchema;
  /** @deprecated use `Topic$outboundSchema` instead. */
  export const outboundSchema = Topic$outboundSchema;
  /** @deprecated use `Topic$Outbound` instead. */
  export type Outbound = Topic$Outbound;
}

export function topicToJSON(topic: Topic): string {
  return JSON.stringify(Topic$outboundSchema.parse(topic));
}

export function topicFromJSON(
  jsonString: string,
): SafeParseResult<Topic, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Topic$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Topic' from JSON`,
  );
}
