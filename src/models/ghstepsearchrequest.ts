/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  QuestionAndAnswer,
  QuestionAndAnswer$inboundSchema,
  QuestionAndAnswer$Outbound,
  QuestionAndAnswer$outboundSchema,
} from "./questionandanswer.js";
import {
  SessionContextVariable,
  SessionContextVariable$inboundSchema,
  SessionContextVariable$Outbound,
  SessionContextVariable$outboundSchema,
} from "./sessioncontextvariable.js";

export type GHStepSearchRequest = {
  /**
   * The numerical ID of the Casebase.
   */
  casebaseId: string;
  /**
   * Pre-answered Questions in Guided Help search
   */
  questions: Array<QuestionAndAnswer>;
  /**
   * The ID of the guided help profile.<br>
   *
   * @remarks
   * 1 will always be the **system profile**.
   */
  profileId?: string | undefined;
  /**
   * Session variables used to give Guided Help additional context.
   */
  sessionVariable?: Array<SessionContextVariable> | undefined;
  /**
   * Restart the current Guided Help search with the existing context along with session variable context.
   */
  startOver?: boolean | undefined;
  /**
   * Use current live release snapshot of the Casebase otherwise use the authoring release.
   */
  useLiveRelease?: boolean | undefined;
  /**
   * Numeric ID of the guided help session article used for starting search.
   */
  ghsArticleId?: string | undefined;
};

/** @internal */
export const GHStepSearchRequest$inboundSchema: z.ZodType<
  GHStepSearchRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  casebaseId: z.string(),
  questions: z.array(QuestionAndAnswer$inboundSchema),
  profileId: z.string().optional(),
  sessionVariable: z.array(SessionContextVariable$inboundSchema).optional(),
  startOver: z.boolean().optional(),
  useLiveRelease: z.boolean().optional(),
  ghsArticleId: z.string().optional(),
});

/** @internal */
export type GHStepSearchRequest$Outbound = {
  casebaseId: string;
  questions: Array<QuestionAndAnswer$Outbound>;
  profileId?: string | undefined;
  sessionVariable?: Array<SessionContextVariable$Outbound> | undefined;
  startOver?: boolean | undefined;
  useLiveRelease?: boolean | undefined;
  ghsArticleId?: string | undefined;
};

/** @internal */
export const GHStepSearchRequest$outboundSchema: z.ZodType<
  GHStepSearchRequest$Outbound,
  z.ZodTypeDef,
  GHStepSearchRequest
> = z.object({
  casebaseId: z.string(),
  questions: z.array(QuestionAndAnswer$outboundSchema),
  profileId: z.string().optional(),
  sessionVariable: z.array(SessionContextVariable$outboundSchema).optional(),
  startOver: z.boolean().optional(),
  useLiveRelease: z.boolean().optional(),
  ghsArticleId: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GHStepSearchRequest$ {
  /** @deprecated use `GHStepSearchRequest$inboundSchema` instead. */
  export const inboundSchema = GHStepSearchRequest$inboundSchema;
  /** @deprecated use `GHStepSearchRequest$outboundSchema` instead. */
  export const outboundSchema = GHStepSearchRequest$outboundSchema;
  /** @deprecated use `GHStepSearchRequest$Outbound` instead. */
  export type Outbound = GHStepSearchRequest$Outbound;
}

export function ghStepSearchRequestToJSON(
  ghStepSearchRequest: GHStepSearchRequest,
): string {
  return JSON.stringify(
    GHStepSearchRequest$outboundSchema.parse(ghStepSearchRequest),
  );
}

export function ghStepSearchRequestFromJSON(
  jsonString: string,
): SafeParseResult<GHStepSearchRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GHStepSearchRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GHStepSearchRequest' from JSON`,
  );
}
