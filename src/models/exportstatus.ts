/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export const ExportStatusStatus = {
  Pending: "Pending",
  InProgress: "In Progress",
  Successful: "Successful",
  Failed: "Failed",
} as const;
export type ExportStatusStatus = ClosedEnum<typeof ExportStatusStatus>;

/**
 * Details about the job's progress.
 */
export type Progress = {
  /**
   * The number of items processed so far.
   */
  processed?: number | undefined;
  /**
   * The total number of items to process.
   */
  total?: number | undefined;
  /**
   * The percentage of the job that is complete.
   */
  percentage?: number | undefined;
};

/**
 * Breakdown of completed job results.
 */
export type Results = {
  /**
   * The count of successfully processed items.
   */
  successful?: number | undefined;
  /**
   * The count of items with warnings.
   */
  warnings?: number | undefined;
  /**
   * The count of items with errors.
   */
  errors?: number | undefined;
};

export type ExportStatus = {
  status: ExportStatusStatus;
  /**
   * Details about the job's progress.
   */
  progress?: Progress | undefined;
  /**
   * The timestamp when the job started.
   */
  startTime?: Date | undefined;
  /**
   * The estimated timestamp when the job is expected to finish.
   */
  estimatedCompletion?: Date | undefined;
  /**
   * The timestamp when the job failed.
   */
  failureTime?: Date | undefined;
  /**
   * Breakdown of completed job results.
   */
  results?: Results | undefined;
  /**
   * A description of the job failure reason.
   */
  error?: string | undefined;
};

/** @internal */
export const ExportStatusStatus$inboundSchema: z.ZodNativeEnum<
  typeof ExportStatusStatus
> = z.nativeEnum(ExportStatusStatus);

/** @internal */
export const ExportStatusStatus$outboundSchema: z.ZodNativeEnum<
  typeof ExportStatusStatus
> = ExportStatusStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ExportStatusStatus$ {
  /** @deprecated use `ExportStatusStatus$inboundSchema` instead. */
  export const inboundSchema = ExportStatusStatus$inboundSchema;
  /** @deprecated use `ExportStatusStatus$outboundSchema` instead. */
  export const outboundSchema = ExportStatusStatus$outboundSchema;
}

/** @internal */
export const Progress$inboundSchema: z.ZodType<
  Progress,
  z.ZodTypeDef,
  unknown
> = z.object({
  processed: z.number().int().optional(),
  total: z.number().int().optional(),
  percentage: z.number().optional(),
});

/** @internal */
export type Progress$Outbound = {
  processed?: number | undefined;
  total?: number | undefined;
  percentage?: number | undefined;
};

/** @internal */
export const Progress$outboundSchema: z.ZodType<
  Progress$Outbound,
  z.ZodTypeDef,
  Progress
> = z.object({
  processed: z.number().int().optional(),
  total: z.number().int().optional(),
  percentage: z.number().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Progress$ {
  /** @deprecated use `Progress$inboundSchema` instead. */
  export const inboundSchema = Progress$inboundSchema;
  /** @deprecated use `Progress$outboundSchema` instead. */
  export const outboundSchema = Progress$outboundSchema;
  /** @deprecated use `Progress$Outbound` instead. */
  export type Outbound = Progress$Outbound;
}

export function progressToJSON(progress: Progress): string {
  return JSON.stringify(Progress$outboundSchema.parse(progress));
}

export function progressFromJSON(
  jsonString: string,
): SafeParseResult<Progress, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Progress$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Progress' from JSON`,
  );
}

/** @internal */
export const Results$inboundSchema: z.ZodType<Results, z.ZodTypeDef, unknown> =
  z.object({
    successful: z.number().int().optional(),
    warnings: z.number().int().optional(),
    errors: z.number().int().optional(),
  });

/** @internal */
export type Results$Outbound = {
  successful?: number | undefined;
  warnings?: number | undefined;
  errors?: number | undefined;
};

/** @internal */
export const Results$outboundSchema: z.ZodType<
  Results$Outbound,
  z.ZodTypeDef,
  Results
> = z.object({
  successful: z.number().int().optional(),
  warnings: z.number().int().optional(),
  errors: z.number().int().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Results$ {
  /** @deprecated use `Results$inboundSchema` instead. */
  export const inboundSchema = Results$inboundSchema;
  /** @deprecated use `Results$outboundSchema` instead. */
  export const outboundSchema = Results$outboundSchema;
  /** @deprecated use `Results$Outbound` instead. */
  export type Outbound = Results$Outbound;
}

export function resultsToJSON(results: Results): string {
  return JSON.stringify(Results$outboundSchema.parse(results));
}

export function resultsFromJSON(
  jsonString: string,
): SafeParseResult<Results, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Results$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Results' from JSON`,
  );
}

/** @internal */
export const ExportStatus$inboundSchema: z.ZodType<
  ExportStatus,
  z.ZodTypeDef,
  unknown
> = z.object({
  status: ExportStatusStatus$inboundSchema,
  progress: z.lazy(() => Progress$inboundSchema).optional(),
  startTime: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  estimatedCompletion: z.string().datetime({ offset: true }).transform(v =>
    new Date(v)
  ).optional(),
  failureTime: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  results: z.lazy(() => Results$inboundSchema).optional(),
  error: z.string().optional(),
});

/** @internal */
export type ExportStatus$Outbound = {
  status: string;
  progress?: Progress$Outbound | undefined;
  startTime?: string | undefined;
  estimatedCompletion?: string | undefined;
  failureTime?: string | undefined;
  results?: Results$Outbound | undefined;
  error?: string | undefined;
};

/** @internal */
export const ExportStatus$outboundSchema: z.ZodType<
  ExportStatus$Outbound,
  z.ZodTypeDef,
  ExportStatus
> = z.object({
  status: ExportStatusStatus$outboundSchema,
  progress: z.lazy(() => Progress$outboundSchema).optional(),
  startTime: z.date().transform(v => v.toISOString()).optional(),
  estimatedCompletion: z.date().transform(v => v.toISOString()).optional(),
  failureTime: z.date().transform(v => v.toISOString()).optional(),
  results: z.lazy(() => Results$outboundSchema).optional(),
  error: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ExportStatus$ {
  /** @deprecated use `ExportStatus$inboundSchema` instead. */
  export const inboundSchema = ExportStatus$inboundSchema;
  /** @deprecated use `ExportStatus$outboundSchema` instead. */
  export const outboundSchema = ExportStatus$outboundSchema;
  /** @deprecated use `ExportStatus$Outbound` instead. */
  export type Outbound = ExportStatus$Outbound;
}

export function exportStatusToJSON(exportStatus: ExportStatus): string {
  return JSON.stringify(ExportStatus$outboundSchema.parse(exportStatus));
}

export function exportStatusFromJSON(
  jsonString: string,
): SafeParseResult<ExportStatus, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ExportStatus$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ExportStatus' from JSON`,
  );
}
