/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type AnswerRange = {
  /**
   * Id of the answer range
   */
  id?: string | undefined;
  /**
   * minimum value of range
   */
  min?: number | undefined;
  /**
   * maximum value of range
   */
  max?: number | undefined;
  /**
   * flag indicating if minimum value is included
   */
  minInclusive?: boolean | undefined;
  /**
   * flag indicating if maximim value is included
   */
  maxInclusive?: boolean | undefined;
};

/** @internal */
export const AnswerRange$inboundSchema: z.ZodType<
  AnswerRange,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  min: z.number().optional(),
  max: z.number().optional(),
  minInclusive: z.boolean().optional(),
  maxInclusive: z.boolean().optional(),
});

/** @internal */
export type AnswerRange$Outbound = {
  id?: string | undefined;
  min?: number | undefined;
  max?: number | undefined;
  minInclusive?: boolean | undefined;
  maxInclusive?: boolean | undefined;
};

/** @internal */
export const AnswerRange$outboundSchema: z.ZodType<
  AnswerRange$Outbound,
  z.ZodTypeDef,
  AnswerRange
> = z.object({
  id: z.string().optional(),
  min: z.number().optional(),
  max: z.number().optional(),
  minInclusive: z.boolean().optional(),
  maxInclusive: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AnswerRange$ {
  /** @deprecated use `AnswerRange$inboundSchema` instead. */
  export const inboundSchema = AnswerRange$inboundSchema;
  /** @deprecated use `AnswerRange$outboundSchema` instead. */
  export const outboundSchema = AnswerRange$outboundSchema;
  /** @deprecated use `AnswerRange$Outbound` instead. */
  export type Outbound = AnswerRange$Outbound;
}

export function answerRangeToJSON(answerRange: AnswerRange): string {
  return JSON.stringify(AnswerRange$outboundSchema.parse(answerRange));
}

export function answerRangeFromJSON(
  jsonString: string,
): SafeParseResult<AnswerRange, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AnswerRange$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AnswerRange' from JSON`,
  );
}
