/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

/**
 * Email
 */
export type Email = {
  /**
   * Email address of customer
   */
  emailAddress?: string | undefined;
};

/** @internal */
export const Email$inboundSchema: z.ZodType<Email, z.ZodTypeDef, unknown> = z
  .object({
    emailAddress: z.string().optional(),
  });

/** @internal */
export type Email$Outbound = {
  emailAddress?: string | undefined;
};

/** @internal */
export const Email$outboundSchema: z.ZodType<
  Email$Outbound,
  z.ZodTypeDef,
  Email
> = z.object({
  emailAddress: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Email$ {
  /** @deprecated use `Email$inboundSchema` instead. */
  export const inboundSchema = Email$inboundSchema;
  /** @deprecated use `Email$outboundSchema` instead. */
  export const outboundSchema = Email$outboundSchema;
  /** @deprecated use `Email$Outbound` instead. */
  export type Outbound = Email$Outbound;
}

export function emailToJSON(email: Email): string {
  return JSON.stringify(Email$outboundSchema.parse(email));
}

export function emailFromJSON(
  jsonString: string,
): SafeParseResult<Email, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Email$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Email' from JSON`,
  );
}
