/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import {
  CasebaseSearchSettings,
  CasebaseSearchSettings$inboundSchema,
  CasebaseSearchSettings$Outbound,
  CasebaseSearchSettings$outboundSchema,
} from "./casebasesearchsettings.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  KbLanguages,
  KbLanguages$inboundSchema,
  KbLanguages$Outbound,
  KbLanguages$outboundSchema,
} from "./kblanguages.js";
import {
  Link,
  Link$inboundSchema,
  Link$Outbound,
  Link$outboundSchema,
} from "./link.js";
import {
  ProfileResult,
  ProfileResult$inboundSchema,
  ProfileResult$Outbound,
  ProfileResult$outboundSchema,
} from "./profileresult.js";

/**
 * status of the Casebase
 */
export const CasebaseStatus = {
  Author: "author",
  Live: "live",
  Qa: "qa",
} as const;
/**
 * status of the Casebase
 */
export type CasebaseStatus = ClosedEnum<typeof CasebaseStatus>;

export type Casebase = {
  /**
   * The numerical ID of the Casebase.
   */
  casebaseId?: string | undefined;
  /**
   * name of the Casebase Release.
   */
  name?: string | undefined;
  /**
   * The numerical ID of the Casebase Release.
   */
  id?: string | undefined;
  /**
   * status of the Casebase
   */
  status?: CasebaseStatus | undefined;
  /**
   * All Guided Help Profiles associated with Casebase release
   */
  profiles?: Array<ProfileResult> | undefined;
  searchSettings?: CasebaseSearchSettings | undefined;
  /**
   * KB languages
   */
  languages?: KbLanguages | undefined;
  /**
   * Defines the relationship between this resource and another object.
   */
  link?: Link | undefined;
};

/** @internal */
export const CasebaseStatus$inboundSchema: z.ZodNativeEnum<
  typeof CasebaseStatus
> = z.nativeEnum(CasebaseStatus);

/** @internal */
export const CasebaseStatus$outboundSchema: z.ZodNativeEnum<
  typeof CasebaseStatus
> = CasebaseStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CasebaseStatus$ {
  /** @deprecated use `CasebaseStatus$inboundSchema` instead. */
  export const inboundSchema = CasebaseStatus$inboundSchema;
  /** @deprecated use `CasebaseStatus$outboundSchema` instead. */
  export const outboundSchema = CasebaseStatus$outboundSchema;
}

/** @internal */
export const Casebase$inboundSchema: z.ZodType<
  Casebase,
  z.ZodTypeDef,
  unknown
> = z.object({
  casebaseId: z.string().optional(),
  name: z.string().optional(),
  id: z.string().optional(),
  status: CasebaseStatus$inboundSchema.optional(),
  profiles: z.array(ProfileResult$inboundSchema).optional(),
  searchSettings: CasebaseSearchSettings$inboundSchema.optional(),
  languages: KbLanguages$inboundSchema.optional(),
  link: Link$inboundSchema.optional(),
});

/** @internal */
export type Casebase$Outbound = {
  casebaseId?: string | undefined;
  name?: string | undefined;
  id?: string | undefined;
  status?: string | undefined;
  profiles?: Array<ProfileResult$Outbound> | undefined;
  searchSettings?: CasebaseSearchSettings$Outbound | undefined;
  languages?: KbLanguages$Outbound | undefined;
  link?: Link$Outbound | undefined;
};

/** @internal */
export const Casebase$outboundSchema: z.ZodType<
  Casebase$Outbound,
  z.ZodTypeDef,
  Casebase
> = z.object({
  casebaseId: z.string().optional(),
  name: z.string().optional(),
  id: z.string().optional(),
  status: CasebaseStatus$outboundSchema.optional(),
  profiles: z.array(ProfileResult$outboundSchema).optional(),
  searchSettings: CasebaseSearchSettings$outboundSchema.optional(),
  languages: KbLanguages$outboundSchema.optional(),
  link: Link$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Casebase$ {
  /** @deprecated use `Casebase$inboundSchema` instead. */
  export const inboundSchema = Casebase$inboundSchema;
  /** @deprecated use `Casebase$outboundSchema` instead. */
  export const outboundSchema = Casebase$outboundSchema;
  /** @deprecated use `Casebase$Outbound` instead. */
  export type Outbound = Casebase$Outbound;
}

export function casebaseToJSON(casebase: Casebase): string {
  return JSON.stringify(Casebase$outboundSchema.parse(casebase));
}

export function casebaseFromJSON(
  jsonString: string,
): SafeParseResult<Casebase, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Casebase$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Casebase' from JSON`,
  );
}
