/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  TopicSummary,
  TopicSummary$inboundSchema,
  TopicSummary$Outbound,
  TopicSummary$outboundSchema,
} from "./topicsummary.js";

/**
 * This schema contains one or more TopicSummary instances.
 */
export type TopicBreadcrumb = {
  /**
   * An instance of TopicSummary.
   */
  topicSummary?: Array<TopicSummary> | undefined;
};

/** @internal */
export const TopicBreadcrumb$inboundSchema: z.ZodType<
  TopicBreadcrumb,
  z.ZodTypeDef,
  unknown
> = z.object({
  topicSummary: z.array(TopicSummary$inboundSchema).optional(),
});

/** @internal */
export type TopicBreadcrumb$Outbound = {
  topicSummary?: Array<TopicSummary$Outbound> | undefined;
};

/** @internal */
export const TopicBreadcrumb$outboundSchema: z.ZodType<
  TopicBreadcrumb$Outbound,
  z.ZodTypeDef,
  TopicBreadcrumb
> = z.object({
  topicSummary: z.array(TopicSummary$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TopicBreadcrumb$ {
  /** @deprecated use `TopicBreadcrumb$inboundSchema` instead. */
  export const inboundSchema = TopicBreadcrumb$inboundSchema;
  /** @deprecated use `TopicBreadcrumb$outboundSchema` instead. */
  export const outboundSchema = TopicBreadcrumb$outboundSchema;
  /** @deprecated use `TopicBreadcrumb$Outbound` instead. */
  export type Outbound = TopicBreadcrumb$Outbound;
}

export function topicBreadcrumbToJSON(
  topicBreadcrumb: TopicBreadcrumb,
): string {
  return JSON.stringify(TopicBreadcrumb$outboundSchema.parse(topicBreadcrumb));
}

export function topicBreadcrumbFromJSON(
  jsonString: string,
): SafeParseResult<TopicBreadcrumb, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TopicBreadcrumb$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TopicBreadcrumb' from JSON`,
  );
}
