/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import {
  CreatedBy,
  CreatedBy$inboundSchema,
  CreatedBy$Outbound,
  CreatedBy$outboundSchema,
} from "./createdby.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

/**
 * This schema contains the definition of a comment object.
 */
export type Comment = {
  /**
   * The ID of the comment.
   */
  id?: string | undefined;
  /**
   * The content of the comment.
   */
  content?: string | undefined;
  createdBy?: CreatedBy | undefined;
  createdDate?: string | undefined;
};

/** @internal */
export const Comment$inboundSchema: z.ZodType<Comment, z.ZodTypeDef, unknown> =
  z.object({
    id: z.string().optional(),
    content: z.string().optional(),
    createdBy: CreatedBy$inboundSchema.optional(),
    createdDate: z.string().optional(),
  });

/** @internal */
export type Comment$Outbound = {
  id?: string | undefined;
  content?: string | undefined;
  createdBy?: CreatedBy$Outbound | undefined;
  createdDate?: string | undefined;
};

/** @internal */
export const Comment$outboundSchema: z.ZodType<
  Comment$Outbound,
  z.ZodTypeDef,
  Comment
> = z.object({
  id: z.string().optional(),
  content: z.string().optional(),
  createdBy: CreatedBy$outboundSchema.optional(),
  createdDate: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Comment$ {
  /** @deprecated use `Comment$inboundSchema` instead. */
  export const inboundSchema = Comment$inboundSchema;
  /** @deprecated use `Comment$outboundSchema` instead. */
  export const outboundSchema = Comment$outboundSchema;
  /** @deprecated use `Comment$Outbound` instead. */
  export type Outbound = Comment$Outbound;
}

export function commentToJSON(comment: Comment): string {
  return JSON.stringify(Comment$outboundSchema.parse(comment));
}

export function commentFromJSON(
  jsonString: string,
): SafeParseResult<Comment, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Comment$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Comment' from JSON`,
  );
}
