/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import {
  Answer,
  Answer$inboundSchema,
  Answer$Outbound,
  Answer$outboundSchema,
} from "./answer.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

/**
 * Questions and answers of the Casebase
 */
export type StartQuestionAndAnswer = {
  /**
   * ID of question
   */
  id: string;
  /**
   * Answers of question
   */
  answers: Array<Answer>;
};

/** @internal */
export const StartQuestionAndAnswer$inboundSchema: z.ZodType<
  StartQuestionAndAnswer,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  answers: z.array(Answer$inboundSchema),
});

/** @internal */
export type StartQuestionAndAnswer$Outbound = {
  id: string;
  answers: Array<Answer$Outbound>;
};

/** @internal */
export const StartQuestionAndAnswer$outboundSchema: z.ZodType<
  StartQuestionAndAnswer$Outbound,
  z.ZodTypeDef,
  StartQuestionAndAnswer
> = z.object({
  id: z.string(),
  answers: z.array(Answer$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StartQuestionAndAnswer$ {
  /** @deprecated use `StartQuestionAndAnswer$inboundSchema` instead. */
  export const inboundSchema = StartQuestionAndAnswer$inboundSchema;
  /** @deprecated use `StartQuestionAndAnswer$outboundSchema` instead. */
  export const outboundSchema = StartQuestionAndAnswer$outboundSchema;
  /** @deprecated use `StartQuestionAndAnswer$Outbound` instead. */
  export type Outbound = StartQuestionAndAnswer$Outbound;
}

export function startQuestionAndAnswerToJSON(
  startQuestionAndAnswer: StartQuestionAndAnswer,
): string {
  return JSON.stringify(
    StartQuestionAndAnswer$outboundSchema.parse(startQuestionAndAnswer),
  );
}

export function startQuestionAndAnswerFromJSON(
  jsonString: string,
): SafeParseResult<StartQuestionAndAnswer, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => StartQuestionAndAnswer$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'StartQuestionAndAnswer' from JSON`,
  );
}
