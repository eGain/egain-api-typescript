/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

/**
 * Category of articles to return. All includes browsable and searchable.
 */
export const ArticleCategories = {
  Searchable: "searchable",
  All: "all",
} as const;
/**
 * Category of articles to return. All includes browsable and searchable.
 */
export type ArticleCategories = ClosedEnum<typeof ArticleCategories>;

/**
 * The code of the language.
 */
export const KnowledgeExportCode = {
  EnUS: "en-US",
  ESES: "es-ES",
  FRFR: "fr-FR",
  ITIT: "it-IT",
  DEDE: "de-DE",
  NLNL: "nl-NL",
  PtBR: "pt-BR",
  PTPT: "pt-PT",
  DaDK: "da-DK",
  RURU: "ru-RU",
  FrCA: "fr-CA",
  ZhCN: "zh-CN",
  JaJP: "ja-JP",
  KoKR: "ko-KR",
  SvSE: "sv-SE",
} as const;
/**
 * The code of the language.
 */
export type KnowledgeExportCode = ClosedEnum<typeof KnowledgeExportCode>;

/**
 * The Knowledge Base language in which the content is created.
 */
export type KnowledgeExportLanguage = {
  /**
   * The code of the language.
   */
  code: KnowledgeExportCode;
};

export const KnowledgeExportResourceType = {
  Articles: "articles",
  Topics: "topics",
  Portals: "portals",
  All: "all",
} as const;
export type KnowledgeExportResourceType = ClosedEnum<
  typeof KnowledgeExportResourceType
>;

/**
 * Type of data destination
 */
export const DestinationType = {
  AWSS3Bucket: "AWS S3 bucket",
  SharedFilePath: "Shared file path",
} as const;
/**
 * Type of data destination
 */
export type DestinationType = ClosedEnum<typeof DestinationType>;

export type KnowledgeExportCredentials = {
  accessKey?: string | undefined;
  secretKey?: string | undefined;
};

export type DataDestination = {
  /**
   * Type of data destination
   */
  destinationType: DestinationType;
  /**
   * Path of the data destination
   */
  path: string;
  /**
   * Region of the data destination
   */
  region?: string | undefined;
  credentials?: KnowledgeExportCredentials | undefined;
};

export type KnowledgeExport = {
  /**
   * Category of articles to return. All includes browsable and searchable.
   */
  articleCategories?: ArticleCategories | undefined;
  /**
   * The ID of the portal being accessed.<br><br>A portal ID is composed of a 2-4 letter prefix, followed by a dash and 4-15 digits.
   */
  portalID: string;
  /**
   * The Knowledge Base language in which the content is created.
   */
  language: KnowledgeExportLanguage;
  /**
   * Types of Knowledge Hub resources to export. Multiple values can be specified using a comma-separated list. Details of a single portal are exported.
   *
   * @remarks
   * Articles whose state is Published are returned.
   * | Portal Attribute Name | Description
   * | ------------------------------- | -----------
   * | id | The ID of the Portal in Readable format.
   * | alternateId | The system-generated ID of the Portal in long format.
   * | name  | The name of the Portal.
   * | description | The Portal's description.
   * | departmentId | ID of the department this Portal belongs to.
   * | defaultContentLanguageId | The default ID of the language for the portal content.
   *
   * | Topic Attribute Name | Description
   * | ------------------------------ | -----------
   * | id | The ID of the Topic in Readable form.
   * | alternateId | The system-generated ID of the Topic in long form.
   * | name  | The name of the Topic.
   * | departmentId | ID of the department this Topic belongs to.
   * | modifiedDate | The date when the Topic was last modified on.
   * | topicHomeArticleId | The ID of the Article used as the home page of this Topic.
   * | childCount | Total number of children sub-topis below the current Topic.
   * | subTopicIds | Array with the list of sub-topics (all levels of the topic hierarchy).
   * | parentTopicId | ID of the parent Topic. -1 if it is the root Topic.
   * | imageURL | URL of the inline Topic image.
   * | customAttributes | One or more comma-separated names for Topic custom attributes defined by the user to be returned.
   *
   * | Article Attribute Name | Description
   * | ---------------------- | -----------
   * | id | The ID of the Article in Readable form.
   * | alternateId | The system-generated ID of the Article in long form.
   * | name  | The name of the Article.
   * | additionalInfo | Additional information provided as Article metadata.
   * | type | The Article type object and its attributes.
   * | keywords | A comma-separated list of keywords associated with this Article, provided as metadata.
   * | summary | A brief summary of the Article, provided as metadata.
   * | state | The state of the Article. State P (Published).
   * | departmentId | ID of the department this Article belongs to.
   * | description | The description of the Article.
   * | imageURL | The URL of the image that is present in the Article version. It is used as the thumbnail image for the Article.
   * | attachements | The Article's uploaded attachments and their IDs.
   * | includeInGenAI  | Indicates whether this Article is used for eGain's generative AI features.
   * | topicBreadcrumb | Contains a list of topics from the top-level topic to this Article. There may be multiple paths.
   * | versionId | The ID of the Article version that is returned.
   * | expirationDate | The date that the Article is set to expire.
   * | averageRating | Average rating of the Article.
   * | timesRated | Number or times the Article was rated.
   * | availabilityDate | The date the Article is set to be available.
   * | articleMacro | The macro of the Article.
   * | content | path to the Article content in .html format.
   * | customAttributes | One or more comma-separated names for Article custom attributes defined by the user to be returned.
   * | personalization | Article personalization details, incuding tag categories.
   * | editions | The editions of the Article, including the publish profile (view) associated with each edition.
   */
  resourceTypes: Array<KnowledgeExportResourceType>;
  dataDestination: DataDestination;
};

/** @internal */
export const ArticleCategories$inboundSchema: z.ZodNativeEnum<
  typeof ArticleCategories
> = z.nativeEnum(ArticleCategories);

/** @internal */
export const ArticleCategories$outboundSchema: z.ZodNativeEnum<
  typeof ArticleCategories
> = ArticleCategories$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ArticleCategories$ {
  /** @deprecated use `ArticleCategories$inboundSchema` instead. */
  export const inboundSchema = ArticleCategories$inboundSchema;
  /** @deprecated use `ArticleCategories$outboundSchema` instead. */
  export const outboundSchema = ArticleCategories$outboundSchema;
}

/** @internal */
export const KnowledgeExportCode$inboundSchema: z.ZodNativeEnum<
  typeof KnowledgeExportCode
> = z.nativeEnum(KnowledgeExportCode);

/** @internal */
export const KnowledgeExportCode$outboundSchema: z.ZodNativeEnum<
  typeof KnowledgeExportCode
> = KnowledgeExportCode$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace KnowledgeExportCode$ {
  /** @deprecated use `KnowledgeExportCode$inboundSchema` instead. */
  export const inboundSchema = KnowledgeExportCode$inboundSchema;
  /** @deprecated use `KnowledgeExportCode$outboundSchema` instead. */
  export const outboundSchema = KnowledgeExportCode$outboundSchema;
}

/** @internal */
export const KnowledgeExportLanguage$inboundSchema: z.ZodType<
  KnowledgeExportLanguage,
  z.ZodTypeDef,
  unknown
> = z.object({
  code: KnowledgeExportCode$inboundSchema,
});

/** @internal */
export type KnowledgeExportLanguage$Outbound = {
  code: string;
};

/** @internal */
export const KnowledgeExportLanguage$outboundSchema: z.ZodType<
  KnowledgeExportLanguage$Outbound,
  z.ZodTypeDef,
  KnowledgeExportLanguage
> = z.object({
  code: KnowledgeExportCode$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace KnowledgeExportLanguage$ {
  /** @deprecated use `KnowledgeExportLanguage$inboundSchema` instead. */
  export const inboundSchema = KnowledgeExportLanguage$inboundSchema;
  /** @deprecated use `KnowledgeExportLanguage$outboundSchema` instead. */
  export const outboundSchema = KnowledgeExportLanguage$outboundSchema;
  /** @deprecated use `KnowledgeExportLanguage$Outbound` instead. */
  export type Outbound = KnowledgeExportLanguage$Outbound;
}

export function knowledgeExportLanguageToJSON(
  knowledgeExportLanguage: KnowledgeExportLanguage,
): string {
  return JSON.stringify(
    KnowledgeExportLanguage$outboundSchema.parse(knowledgeExportLanguage),
  );
}

export function knowledgeExportLanguageFromJSON(
  jsonString: string,
): SafeParseResult<KnowledgeExportLanguage, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => KnowledgeExportLanguage$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'KnowledgeExportLanguage' from JSON`,
  );
}

/** @internal */
export const KnowledgeExportResourceType$inboundSchema: z.ZodNativeEnum<
  typeof KnowledgeExportResourceType
> = z.nativeEnum(KnowledgeExportResourceType);

/** @internal */
export const KnowledgeExportResourceType$outboundSchema: z.ZodNativeEnum<
  typeof KnowledgeExportResourceType
> = KnowledgeExportResourceType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace KnowledgeExportResourceType$ {
  /** @deprecated use `KnowledgeExportResourceType$inboundSchema` instead. */
  export const inboundSchema = KnowledgeExportResourceType$inboundSchema;
  /** @deprecated use `KnowledgeExportResourceType$outboundSchema` instead. */
  export const outboundSchema = KnowledgeExportResourceType$outboundSchema;
}

/** @internal */
export const DestinationType$inboundSchema: z.ZodNativeEnum<
  typeof DestinationType
> = z.nativeEnum(DestinationType);

/** @internal */
export const DestinationType$outboundSchema: z.ZodNativeEnum<
  typeof DestinationType
> = DestinationType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DestinationType$ {
  /** @deprecated use `DestinationType$inboundSchema` instead. */
  export const inboundSchema = DestinationType$inboundSchema;
  /** @deprecated use `DestinationType$outboundSchema` instead. */
  export const outboundSchema = DestinationType$outboundSchema;
}

/** @internal */
export const KnowledgeExportCredentials$inboundSchema: z.ZodType<
  KnowledgeExportCredentials,
  z.ZodTypeDef,
  unknown
> = z.object({
  accessKey: z.string().optional(),
  secretKey: z.string().optional(),
});

/** @internal */
export type KnowledgeExportCredentials$Outbound = {
  accessKey?: string | undefined;
  secretKey?: string | undefined;
};

/** @internal */
export const KnowledgeExportCredentials$outboundSchema: z.ZodType<
  KnowledgeExportCredentials$Outbound,
  z.ZodTypeDef,
  KnowledgeExportCredentials
> = z.object({
  accessKey: z.string().optional(),
  secretKey: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace KnowledgeExportCredentials$ {
  /** @deprecated use `KnowledgeExportCredentials$inboundSchema` instead. */
  export const inboundSchema = KnowledgeExportCredentials$inboundSchema;
  /** @deprecated use `KnowledgeExportCredentials$outboundSchema` instead. */
  export const outboundSchema = KnowledgeExportCredentials$outboundSchema;
  /** @deprecated use `KnowledgeExportCredentials$Outbound` instead. */
  export type Outbound = KnowledgeExportCredentials$Outbound;
}

export function knowledgeExportCredentialsToJSON(
  knowledgeExportCredentials: KnowledgeExportCredentials,
): string {
  return JSON.stringify(
    KnowledgeExportCredentials$outboundSchema.parse(knowledgeExportCredentials),
  );
}

export function knowledgeExportCredentialsFromJSON(
  jsonString: string,
): SafeParseResult<KnowledgeExportCredentials, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => KnowledgeExportCredentials$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'KnowledgeExportCredentials' from JSON`,
  );
}

/** @internal */
export const DataDestination$inboundSchema: z.ZodType<
  DataDestination,
  z.ZodTypeDef,
  unknown
> = z.object({
  destinationType: DestinationType$inboundSchema,
  path: z.string(),
  region: z.string().optional(),
  credentials: z.lazy(() => KnowledgeExportCredentials$inboundSchema)
    .optional(),
});

/** @internal */
export type DataDestination$Outbound = {
  destinationType: string;
  path: string;
  region?: string | undefined;
  credentials?: KnowledgeExportCredentials$Outbound | undefined;
};

/** @internal */
export const DataDestination$outboundSchema: z.ZodType<
  DataDestination$Outbound,
  z.ZodTypeDef,
  DataDestination
> = z.object({
  destinationType: DestinationType$outboundSchema,
  path: z.string(),
  region: z.string().optional(),
  credentials: z.lazy(() => KnowledgeExportCredentials$outboundSchema)
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DataDestination$ {
  /** @deprecated use `DataDestination$inboundSchema` instead. */
  export const inboundSchema = DataDestination$inboundSchema;
  /** @deprecated use `DataDestination$outboundSchema` instead. */
  export const outboundSchema = DataDestination$outboundSchema;
  /** @deprecated use `DataDestination$Outbound` instead. */
  export type Outbound = DataDestination$Outbound;
}

export function dataDestinationToJSON(
  dataDestination: DataDestination,
): string {
  return JSON.stringify(DataDestination$outboundSchema.parse(dataDestination));
}

export function dataDestinationFromJSON(
  jsonString: string,
): SafeParseResult<DataDestination, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DataDestination$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DataDestination' from JSON`,
  );
}

/** @internal */
export const KnowledgeExport$inboundSchema: z.ZodType<
  KnowledgeExport,
  z.ZodTypeDef,
  unknown
> = z.object({
  articleCategories: ArticleCategories$inboundSchema.default("searchable"),
  portalID: z.string(),
  language: z.lazy(() => KnowledgeExportLanguage$inboundSchema),
  resourceTypes: z.array(KnowledgeExportResourceType$inboundSchema),
  dataDestination: z.lazy(() => DataDestination$inboundSchema),
});

/** @internal */
export type KnowledgeExport$Outbound = {
  articleCategories: string;
  portalID: string;
  language: KnowledgeExportLanguage$Outbound;
  resourceTypes: Array<string>;
  dataDestination: DataDestination$Outbound;
};

/** @internal */
export const KnowledgeExport$outboundSchema: z.ZodType<
  KnowledgeExport$Outbound,
  z.ZodTypeDef,
  KnowledgeExport
> = z.object({
  articleCategories: ArticleCategories$outboundSchema.default("searchable"),
  portalID: z.string(),
  language: z.lazy(() => KnowledgeExportLanguage$outboundSchema),
  resourceTypes: z.array(KnowledgeExportResourceType$outboundSchema),
  dataDestination: z.lazy(() => DataDestination$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace KnowledgeExport$ {
  /** @deprecated use `KnowledgeExport$inboundSchema` instead. */
  export const inboundSchema = KnowledgeExport$inboundSchema;
  /** @deprecated use `KnowledgeExport$outboundSchema` instead. */
  export const outboundSchema = KnowledgeExport$outboundSchema;
  /** @deprecated use `KnowledgeExport$Outbound` instead. */
  export type Outbound = KnowledgeExport$Outbound;
}

export function knowledgeExportToJSON(
  knowledgeExport: KnowledgeExport,
): string {
  return JSON.stringify(KnowledgeExport$outboundSchema.parse(knowledgeExport));
}

export function knowledgeExportFromJSON(
  jsonString: string,
): SafeParseResult<KnowledgeExport, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => KnowledgeExport$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'KnowledgeExport' from JSON`,
  );
}
