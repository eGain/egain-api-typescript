/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  StringAttributeValue,
  StringAttributeValue$inboundSchema,
  StringAttributeValue$Outbound,
  StringAttributeValue$outboundSchema,
} from "./stringattributevalue.js";

/**
 * The data type of the value of the attribute.
 */
export const ValueType = {
  String: "String",
  Integer: "Integer",
  Decimal: "Decimal",
  Date: "Date",
  Boolean: "Boolean",
} as const;
/**
 * The data type of the value of the attribute.
 */
export type ValueType = ClosedEnum<typeof ValueType>;

/**
 * This includes the custom attributes that have been added to the portal for filtering.
 */
export type SearchFilterAttribute = {
  /**
   * The internal name of a custom attribute.
   */
  internalName?: string | undefined;
  /**
   * The external or public name of a custom attribute.
   */
  externalName?: string | undefined;
  /**
   * The data type of the value of the attribute.
   */
  valueType?: ValueType | undefined;
  /**
   * Whether the valueType is enumerated.
   */
  isEnumerated?: boolean | undefined;
  /**
   * Whether the user can select multiple values.
   */
  isMultiselect?: boolean | undefined;
  /**
   * An attribute can have an external value such as a readable label, and an internal value such as a unique ID. This schema provides both the internal and external values for one attribute.
   */
  value?: StringAttributeValue | undefined;
};

/** @internal */
export const ValueType$inboundSchema: z.ZodNativeEnum<typeof ValueType> = z
  .nativeEnum(ValueType);

/** @internal */
export const ValueType$outboundSchema: z.ZodNativeEnum<typeof ValueType> =
  ValueType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ValueType$ {
  /** @deprecated use `ValueType$inboundSchema` instead. */
  export const inboundSchema = ValueType$inboundSchema;
  /** @deprecated use `ValueType$outboundSchema` instead. */
  export const outboundSchema = ValueType$outboundSchema;
}

/** @internal */
export const SearchFilterAttribute$inboundSchema: z.ZodType<
  SearchFilterAttribute,
  z.ZodTypeDef,
  unknown
> = z.object({
  internalName: z.string().optional(),
  externalName: z.string().optional(),
  valueType: ValueType$inboundSchema.optional(),
  isEnumerated: z.boolean().optional(),
  isMultiselect: z.boolean().optional(),
  value: StringAttributeValue$inboundSchema.optional(),
});

/** @internal */
export type SearchFilterAttribute$Outbound = {
  internalName?: string | undefined;
  externalName?: string | undefined;
  valueType?: string | undefined;
  isEnumerated?: boolean | undefined;
  isMultiselect?: boolean | undefined;
  value?: StringAttributeValue$Outbound | undefined;
};

/** @internal */
export const SearchFilterAttribute$outboundSchema: z.ZodType<
  SearchFilterAttribute$Outbound,
  z.ZodTypeDef,
  SearchFilterAttribute
> = z.object({
  internalName: z.string().optional(),
  externalName: z.string().optional(),
  valueType: ValueType$outboundSchema.optional(),
  isEnumerated: z.boolean().optional(),
  isMultiselect: z.boolean().optional(),
  value: StringAttributeValue$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchFilterAttribute$ {
  /** @deprecated use `SearchFilterAttribute$inboundSchema` instead. */
  export const inboundSchema = SearchFilterAttribute$inboundSchema;
  /** @deprecated use `SearchFilterAttribute$outboundSchema` instead. */
  export const outboundSchema = SearchFilterAttribute$outboundSchema;
  /** @deprecated use `SearchFilterAttribute$Outbound` instead. */
  export type Outbound = SearchFilterAttribute$Outbound;
}

export function searchFilterAttributeToJSON(
  searchFilterAttribute: SearchFilterAttribute,
): string {
  return JSON.stringify(
    SearchFilterAttribute$outboundSchema.parse(searchFilterAttribute),
  );
}

export function searchFilterAttributeFromJSON(
  jsonString: string,
): SafeParseResult<SearchFilterAttribute, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SearchFilterAttribute$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SearchFilterAttribute' from JSON`,
  );
}
