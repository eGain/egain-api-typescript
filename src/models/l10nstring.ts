/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type L10NString = {
  /**
   * A string that indicates the value.
   */
  value?: string | undefined;
  /**
   * Localized string of the value element.
   */
  displayValue?: string | undefined;
};

/** @internal */
export const L10NString$inboundSchema: z.ZodType<
  L10NString,
  z.ZodTypeDef,
  unknown
> = z.object({
  value: z.string().optional(),
  displayValue: z.string().optional(),
});

/** @internal */
export type L10NString$Outbound = {
  value?: string | undefined;
  displayValue?: string | undefined;
};

/** @internal */
export const L10NString$outboundSchema: z.ZodType<
  L10NString$Outbound,
  z.ZodTypeDef,
  L10NString
> = z.object({
  value: z.string().optional(),
  displayValue: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace L10NString$ {
  /** @deprecated use `L10NString$inboundSchema` instead. */
  export const inboundSchema = L10NString$inboundSchema;
  /** @deprecated use `L10NString$outboundSchema` instead. */
  export const outboundSchema = L10NString$outboundSchema;
  /** @deprecated use `L10NString$Outbound` instead. */
  export type Outbound = L10NString$Outbound;
}

export function l10NStringToJSON(l10NString: L10NString): string {
  return JSON.stringify(L10NString$outboundSchema.parse(l10NString));
}

export function l10NStringFromJSON(
  jsonString: string,
): SafeParseResult<L10NString, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => L10NString$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'L10NString' from JSON`,
  );
}
