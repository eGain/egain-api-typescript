/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import {
  Casebase,
  Casebase$inboundSchema,
  Casebase$Outbound,
  Casebase$outboundSchema,
} from "./casebase.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  PaginationInfo,
  PaginationInfo$inboundSchema,
  PaginationInfo$Outbound,
  PaginationInfo$outboundSchema,
} from "./paginationinfo.js";

/**
 * Success
 */
export type CasebaseResult = {
  /**
   * Casebase releases
   */
  casebase?: Array<Casebase> | undefined;
  paginationInfo?: PaginationInfo | undefined;
};

/** @internal */
export const CasebaseResult$inboundSchema: z.ZodType<
  CasebaseResult,
  z.ZodTypeDef,
  unknown
> = z.object({
  casebase: z.array(Casebase$inboundSchema).optional(),
  paginationInfo: PaginationInfo$inboundSchema.optional(),
});

/** @internal */
export type CasebaseResult$Outbound = {
  casebase?: Array<Casebase$Outbound> | undefined;
  paginationInfo?: PaginationInfo$Outbound | undefined;
};

/** @internal */
export const CasebaseResult$outboundSchema: z.ZodType<
  CasebaseResult$Outbound,
  z.ZodTypeDef,
  CasebaseResult
> = z.object({
  casebase: z.array(Casebase$outboundSchema).optional(),
  paginationInfo: PaginationInfo$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CasebaseResult$ {
  /** @deprecated use `CasebaseResult$inboundSchema` instead. */
  export const inboundSchema = CasebaseResult$inboundSchema;
  /** @deprecated use `CasebaseResult$outboundSchema` instead. */
  export const outboundSchema = CasebaseResult$outboundSchema;
  /** @deprecated use `CasebaseResult$Outbound` instead. */
  export type Outbound = CasebaseResult$Outbound;
}

export function casebaseResultToJSON(casebaseResult: CasebaseResult): string {
  return JSON.stringify(CasebaseResult$outboundSchema.parse(casebaseResult));
}

export function casebaseResultFromJSON(
  jsonString: string,
): SafeParseResult<CasebaseResult, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CasebaseResult$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CasebaseResult' from JSON`,
  );
}
