/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import {
  ArticleResult,
  ArticleResult$inboundSchema,
  ArticleResult$Outbound,
  ArticleResult$outboundSchema,
} from "./articleresult.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  Link,
  Link$inboundSchema,
  Link$Outbound,
  Link$outboundSchema,
} from "./link.js";

/**
 * Success
 */
export type ArticleList = {
  /**
   * The name of the article list.
   */
  name: string;
  /**
   * The ID of the article list.<br><br>An article list ID is either a 4-digit number or composed of a 2-4 letter prefix, followed by a dash and 4-15 digits.
   */
  id: string;
  /**
   * The description of the article list. The maximum allowed article list description size is 1 KB.
   */
  description?: string | undefined;
  /**
   * The type of the article list.
   */
  typeId?: string | undefined;
  /**
   * An array of articles that belong to the article list.
   */
  articles?: Array<ArticleResult> | undefined;
  /**
   * Defines the relationship between this resource and another object.
   */
  link?: Link | undefined;
};

/** @internal */
export const ArticleList$inboundSchema: z.ZodType<
  ArticleList,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  id: z.string(),
  description: z.string().optional(),
  typeId: z.string().optional(),
  articles: z.array(ArticleResult$inboundSchema).optional(),
  link: Link$inboundSchema.optional(),
});

/** @internal */
export type ArticleList$Outbound = {
  name: string;
  id: string;
  description?: string | undefined;
  typeId?: string | undefined;
  articles?: Array<ArticleResult$Outbound> | undefined;
  link?: Link$Outbound | undefined;
};

/** @internal */
export const ArticleList$outboundSchema: z.ZodType<
  ArticleList$Outbound,
  z.ZodTypeDef,
  ArticleList
> = z.object({
  name: z.string(),
  id: z.string(),
  description: z.string().optional(),
  typeId: z.string().optional(),
  articles: z.array(ArticleResult$outboundSchema).optional(),
  link: Link$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ArticleList$ {
  /** @deprecated use `ArticleList$inboundSchema` instead. */
  export const inboundSchema = ArticleList$inboundSchema;
  /** @deprecated use `ArticleList$outboundSchema` instead. */
  export const outboundSchema = ArticleList$outboundSchema;
  /** @deprecated use `ArticleList$Outbound` instead. */
  export type Outbound = ArticleList$Outbound;
}

export function articleListToJSON(articleList: ArticleList): string {
  return JSON.stringify(ArticleList$outboundSchema.parse(articleList));
}

export function articleListFromJSON(
  jsonString: string,
): SafeParseResult<ArticleList, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ArticleList$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ArticleList' from JSON`,
  );
}
