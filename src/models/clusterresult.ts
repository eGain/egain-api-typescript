/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type ClusterResult = {
  /**
   * id of the cluster
   */
  id?: string | undefined;
  /**
   * short name of the cluster
   */
  shortName?: string | undefined;
  /**
   * name of the cluster
   */
  name?: string | undefined;
  /**
   * indicates if the cluster is startup cluster of the release
   */
  startup?: boolean | undefined;
  /**
   * depth of the cluster
   */
  depth?: number | undefined;
};

/** @internal */
export const ClusterResult$inboundSchema: z.ZodType<
  ClusterResult,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  shortName: z.string().optional(),
  name: z.string().optional(),
  startup: z.boolean().optional(),
  depth: z.number().int().optional(),
});

/** @internal */
export type ClusterResult$Outbound = {
  id?: string | undefined;
  shortName?: string | undefined;
  name?: string | undefined;
  startup?: boolean | undefined;
  depth?: number | undefined;
};

/** @internal */
export const ClusterResult$outboundSchema: z.ZodType<
  ClusterResult$Outbound,
  z.ZodTypeDef,
  ClusterResult
> = z.object({
  id: z.string().optional(),
  shortName: z.string().optional(),
  name: z.string().optional(),
  startup: z.boolean().optional(),
  depth: z.number().int().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClusterResult$ {
  /** @deprecated use `ClusterResult$inboundSchema` instead. */
  export const inboundSchema = ClusterResult$inboundSchema;
  /** @deprecated use `ClusterResult$outboundSchema` instead. */
  export const outboundSchema = ClusterResult$outboundSchema;
  /** @deprecated use `ClusterResult$Outbound` instead. */
  export type Outbound = ClusterResult$Outbound;
}

export function clusterResultToJSON(clusterResult: ClusterResult): string {
  return JSON.stringify(ClusterResult$outboundSchema.parse(clusterResult));
}

export function clusterResultFromJSON(
  jsonString: string,
): SafeParseResult<ClusterResult, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ClusterResult$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ClusterResult' from JSON`,
  );
}
