/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

/**
 * Type of data source
 */
export const ImportContentType = {
  AWSS3Bucket: "AWS S3 bucket",
  SharedFilePath: "Shared file path",
} as const;
/**
 * Type of data source
 */
export type ImportContentType = ClosedEnum<typeof ImportContentType>;

export type ImportContentCredentials = {
  accessKey?: string | undefined;
  secretKey?: string | undefined;
};

export type ImportContentDataSource = {
  /**
   * Type of data source
   */
  type: ImportContentType;
  /**
   * Path of the data source
   */
  path: string;
  /**
   * Region of the data source
   */
  region?: string | undefined;
  credentials?: ImportContentCredentials | undefined;
};

export const Operation = {
  Import: "import",
  Reimport: "reimport",
} as const;
export type Operation = ClosedEnum<typeof Operation>;

export type ScheduleTime = {
  date: Date;
};

export type ImportContent = {
  dataSource: ImportContentDataSource;
  operation: Operation;
  scheduleTime?: ScheduleTime | undefined;
};

/** @internal */
export const ImportContentType$inboundSchema: z.ZodNativeEnum<
  typeof ImportContentType
> = z.nativeEnum(ImportContentType);

/** @internal */
export const ImportContentType$outboundSchema: z.ZodNativeEnum<
  typeof ImportContentType
> = ImportContentType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ImportContentType$ {
  /** @deprecated use `ImportContentType$inboundSchema` instead. */
  export const inboundSchema = ImportContentType$inboundSchema;
  /** @deprecated use `ImportContentType$outboundSchema` instead. */
  export const outboundSchema = ImportContentType$outboundSchema;
}

/** @internal */
export const ImportContentCredentials$inboundSchema: z.ZodType<
  ImportContentCredentials,
  z.ZodTypeDef,
  unknown
> = z.object({
  accessKey: z.string().optional(),
  secretKey: z.string().optional(),
});

/** @internal */
export type ImportContentCredentials$Outbound = {
  accessKey?: string | undefined;
  secretKey?: string | undefined;
};

/** @internal */
export const ImportContentCredentials$outboundSchema: z.ZodType<
  ImportContentCredentials$Outbound,
  z.ZodTypeDef,
  ImportContentCredentials
> = z.object({
  accessKey: z.string().optional(),
  secretKey: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ImportContentCredentials$ {
  /** @deprecated use `ImportContentCredentials$inboundSchema` instead. */
  export const inboundSchema = ImportContentCredentials$inboundSchema;
  /** @deprecated use `ImportContentCredentials$outboundSchema` instead. */
  export const outboundSchema = ImportContentCredentials$outboundSchema;
  /** @deprecated use `ImportContentCredentials$Outbound` instead. */
  export type Outbound = ImportContentCredentials$Outbound;
}

export function importContentCredentialsToJSON(
  importContentCredentials: ImportContentCredentials,
): string {
  return JSON.stringify(
    ImportContentCredentials$outboundSchema.parse(importContentCredentials),
  );
}

export function importContentCredentialsFromJSON(
  jsonString: string,
): SafeParseResult<ImportContentCredentials, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ImportContentCredentials$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ImportContentCredentials' from JSON`,
  );
}

/** @internal */
export const ImportContentDataSource$inboundSchema: z.ZodType<
  ImportContentDataSource,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: ImportContentType$inboundSchema,
  path: z.string(),
  region: z.string().optional(),
  credentials: z.lazy(() => ImportContentCredentials$inboundSchema).optional(),
});

/** @internal */
export type ImportContentDataSource$Outbound = {
  type: string;
  path: string;
  region?: string | undefined;
  credentials?: ImportContentCredentials$Outbound | undefined;
};

/** @internal */
export const ImportContentDataSource$outboundSchema: z.ZodType<
  ImportContentDataSource$Outbound,
  z.ZodTypeDef,
  ImportContentDataSource
> = z.object({
  type: ImportContentType$outboundSchema,
  path: z.string(),
  region: z.string().optional(),
  credentials: z.lazy(() => ImportContentCredentials$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ImportContentDataSource$ {
  /** @deprecated use `ImportContentDataSource$inboundSchema` instead. */
  export const inboundSchema = ImportContentDataSource$inboundSchema;
  /** @deprecated use `ImportContentDataSource$outboundSchema` instead. */
  export const outboundSchema = ImportContentDataSource$outboundSchema;
  /** @deprecated use `ImportContentDataSource$Outbound` instead. */
  export type Outbound = ImportContentDataSource$Outbound;
}

export function importContentDataSourceToJSON(
  importContentDataSource: ImportContentDataSource,
): string {
  return JSON.stringify(
    ImportContentDataSource$outboundSchema.parse(importContentDataSource),
  );
}

export function importContentDataSourceFromJSON(
  jsonString: string,
): SafeParseResult<ImportContentDataSource, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ImportContentDataSource$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ImportContentDataSource' from JSON`,
  );
}

/** @internal */
export const Operation$inboundSchema: z.ZodNativeEnum<typeof Operation> = z
  .nativeEnum(Operation);

/** @internal */
export const Operation$outboundSchema: z.ZodNativeEnum<typeof Operation> =
  Operation$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Operation$ {
  /** @deprecated use `Operation$inboundSchema` instead. */
  export const inboundSchema = Operation$inboundSchema;
  /** @deprecated use `Operation$outboundSchema` instead. */
  export const outboundSchema = Operation$outboundSchema;
}

/** @internal */
export const ScheduleTime$inboundSchema: z.ZodType<
  ScheduleTime,
  z.ZodTypeDef,
  unknown
> = z.object({
  date: z.string().datetime({ offset: true }).transform(v => new Date(v)),
});

/** @internal */
export type ScheduleTime$Outbound = {
  date: string;
};

/** @internal */
export const ScheduleTime$outboundSchema: z.ZodType<
  ScheduleTime$Outbound,
  z.ZodTypeDef,
  ScheduleTime
> = z.object({
  date: z.date().transform(v => v.toISOString()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ScheduleTime$ {
  /** @deprecated use `ScheduleTime$inboundSchema` instead. */
  export const inboundSchema = ScheduleTime$inboundSchema;
  /** @deprecated use `ScheduleTime$outboundSchema` instead. */
  export const outboundSchema = ScheduleTime$outboundSchema;
  /** @deprecated use `ScheduleTime$Outbound` instead. */
  export type Outbound = ScheduleTime$Outbound;
}

export function scheduleTimeToJSON(scheduleTime: ScheduleTime): string {
  return JSON.stringify(ScheduleTime$outboundSchema.parse(scheduleTime));
}

export function scheduleTimeFromJSON(
  jsonString: string,
): SafeParseResult<ScheduleTime, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ScheduleTime$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ScheduleTime' from JSON`,
  );
}

/** @internal */
export const ImportContent$inboundSchema: z.ZodType<
  ImportContent,
  z.ZodTypeDef,
  unknown
> = z.object({
  dataSource: z.lazy(() => ImportContentDataSource$inboundSchema),
  operation: Operation$inboundSchema,
  scheduleTime: z.lazy(() => ScheduleTime$inboundSchema).optional(),
});

/** @internal */
export type ImportContent$Outbound = {
  dataSource: ImportContentDataSource$Outbound;
  operation: string;
  scheduleTime?: ScheduleTime$Outbound | undefined;
};

/** @internal */
export const ImportContent$outboundSchema: z.ZodType<
  ImportContent$Outbound,
  z.ZodTypeDef,
  ImportContent
> = z.object({
  dataSource: z.lazy(() => ImportContentDataSource$outboundSchema),
  operation: Operation$outboundSchema,
  scheduleTime: z.lazy(() => ScheduleTime$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ImportContent$ {
  /** @deprecated use `ImportContent$inboundSchema` instead. */
  export const inboundSchema = ImportContent$inboundSchema;
  /** @deprecated use `ImportContent$outboundSchema` instead. */
  export const outboundSchema = ImportContent$outboundSchema;
  /** @deprecated use `ImportContent$Outbound` instead. */
  export type Outbound = ImportContent$Outbound;
}

export function importContentToJSON(importContent: ImportContent): string {
  return JSON.stringify(ImportContent$outboundSchema.parse(importContent));
}

export function importContentFromJSON(
  jsonString: string,
): SafeParseResult<ImportContent, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ImportContent$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ImportContent' from JSON`,
  );
}
