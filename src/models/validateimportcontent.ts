/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

/**
 * Type of data source
 */
export const ValidateImportContentType = {
  AWSS3Bucket: "AWS S3 bucket",
  SharedFilePath: "Shared file path",
} as const;
/**
 * Type of data source
 */
export type ValidateImportContentType = ClosedEnum<
  typeof ValidateImportContentType
>;

export type ValidateImportContentCredentials = {
  accessKey?: string | undefined;
  secretKey?: string | undefined;
};

export type ValidateImportContentDataSource = {
  /**
   * Type of data source
   */
  type: ValidateImportContentType;
  /**
   * Path of the data source
   */
  path: string;
  /**
   * Region of the data source
   */
  region?: string | undefined;
  credentials?: ValidateImportContentCredentials | undefined;
};

export type ValidateImportContent = {
  dataSource: ValidateImportContentDataSource;
};

/** @internal */
export const ValidateImportContentType$inboundSchema: z.ZodNativeEnum<
  typeof ValidateImportContentType
> = z.nativeEnum(ValidateImportContentType);

/** @internal */
export const ValidateImportContentType$outboundSchema: z.ZodNativeEnum<
  typeof ValidateImportContentType
> = ValidateImportContentType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ValidateImportContentType$ {
  /** @deprecated use `ValidateImportContentType$inboundSchema` instead. */
  export const inboundSchema = ValidateImportContentType$inboundSchema;
  /** @deprecated use `ValidateImportContentType$outboundSchema` instead. */
  export const outboundSchema = ValidateImportContentType$outboundSchema;
}

/** @internal */
export const ValidateImportContentCredentials$inboundSchema: z.ZodType<
  ValidateImportContentCredentials,
  z.ZodTypeDef,
  unknown
> = z.object({
  accessKey: z.string().optional(),
  secretKey: z.string().optional(),
});

/** @internal */
export type ValidateImportContentCredentials$Outbound = {
  accessKey?: string | undefined;
  secretKey?: string | undefined;
};

/** @internal */
export const ValidateImportContentCredentials$outboundSchema: z.ZodType<
  ValidateImportContentCredentials$Outbound,
  z.ZodTypeDef,
  ValidateImportContentCredentials
> = z.object({
  accessKey: z.string().optional(),
  secretKey: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ValidateImportContentCredentials$ {
  /** @deprecated use `ValidateImportContentCredentials$inboundSchema` instead. */
  export const inboundSchema = ValidateImportContentCredentials$inboundSchema;
  /** @deprecated use `ValidateImportContentCredentials$outboundSchema` instead. */
  export const outboundSchema = ValidateImportContentCredentials$outboundSchema;
  /** @deprecated use `ValidateImportContentCredentials$Outbound` instead. */
  export type Outbound = ValidateImportContentCredentials$Outbound;
}

export function validateImportContentCredentialsToJSON(
  validateImportContentCredentials: ValidateImportContentCredentials,
): string {
  return JSON.stringify(
    ValidateImportContentCredentials$outboundSchema.parse(
      validateImportContentCredentials,
    ),
  );
}

export function validateImportContentCredentialsFromJSON(
  jsonString: string,
): SafeParseResult<ValidateImportContentCredentials, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ValidateImportContentCredentials$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ValidateImportContentCredentials' from JSON`,
  );
}

/** @internal */
export const ValidateImportContentDataSource$inboundSchema: z.ZodType<
  ValidateImportContentDataSource,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: ValidateImportContentType$inboundSchema,
  path: z.string(),
  region: z.string().optional(),
  credentials: z.lazy(() => ValidateImportContentCredentials$inboundSchema)
    .optional(),
});

/** @internal */
export type ValidateImportContentDataSource$Outbound = {
  type: string;
  path: string;
  region?: string | undefined;
  credentials?: ValidateImportContentCredentials$Outbound | undefined;
};

/** @internal */
export const ValidateImportContentDataSource$outboundSchema: z.ZodType<
  ValidateImportContentDataSource$Outbound,
  z.ZodTypeDef,
  ValidateImportContentDataSource
> = z.object({
  type: ValidateImportContentType$outboundSchema,
  path: z.string(),
  region: z.string().optional(),
  credentials: z.lazy(() => ValidateImportContentCredentials$outboundSchema)
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ValidateImportContentDataSource$ {
  /** @deprecated use `ValidateImportContentDataSource$inboundSchema` instead. */
  export const inboundSchema = ValidateImportContentDataSource$inboundSchema;
  /** @deprecated use `ValidateImportContentDataSource$outboundSchema` instead. */
  export const outboundSchema = ValidateImportContentDataSource$outboundSchema;
  /** @deprecated use `ValidateImportContentDataSource$Outbound` instead. */
  export type Outbound = ValidateImportContentDataSource$Outbound;
}

export function validateImportContentDataSourceToJSON(
  validateImportContentDataSource: ValidateImportContentDataSource,
): string {
  return JSON.stringify(
    ValidateImportContentDataSource$outboundSchema.parse(
      validateImportContentDataSource,
    ),
  );
}

export function validateImportContentDataSourceFromJSON(
  jsonString: string,
): SafeParseResult<ValidateImportContentDataSource, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ValidateImportContentDataSource$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ValidateImportContentDataSource' from JSON`,
  );
}

/** @internal */
export const ValidateImportContent$inboundSchema: z.ZodType<
  ValidateImportContent,
  z.ZodTypeDef,
  unknown
> = z.object({
  dataSource: z.lazy(() => ValidateImportContentDataSource$inboundSchema),
});

/** @internal */
export type ValidateImportContent$Outbound = {
  dataSource: ValidateImportContentDataSource$Outbound;
};

/** @internal */
export const ValidateImportContent$outboundSchema: z.ZodType<
  ValidateImportContent$Outbound,
  z.ZodTypeDef,
  ValidateImportContent
> = z.object({
  dataSource: z.lazy(() => ValidateImportContentDataSource$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ValidateImportContent$ {
  /** @deprecated use `ValidateImportContent$inboundSchema` instead. */
  export const inboundSchema = ValidateImportContent$inboundSchema;
  /** @deprecated use `ValidateImportContent$outboundSchema` instead. */
  export const outboundSchema = ValidateImportContent$outboundSchema;
  /** @deprecated use `ValidateImportContent$Outbound` instead. */
  export type Outbound = ValidateImportContent$Outbound;
}

export function validateImportContentToJSON(
  validateImportContent: ValidateImportContent,
): string {
  return JSON.stringify(
    ValidateImportContent$outboundSchema.parse(validateImportContent),
  );
}

export function validateImportContentFromJSON(
  jsonString: string,
): SafeParseResult<ValidateImportContent, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ValidateImportContent$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ValidateImportContent' from JSON`,
  );
}
