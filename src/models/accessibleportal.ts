/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import {
  Department,
  Department$inboundSchema,
  Department$Outbound,
  Department$outboundSchema,
} from "./department.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  ShortURL,
  ShortURL$inboundSchema,
  ShortURL$Outbound,
  ShortURL$outboundSchema,
} from "./shorturl.js";

export type AccessiblePortal = {
  /**
   * ID of portal. <br>A Portal ID is composed of a 2-4 letter prefix, followed by a dash and 4-15 digits.
   */
  id?: string | undefined;
  /**
   * Name of portal
   */
  name?: string | undefined;
  /**
   * Description of portal
   */
  description?: string | undefined;
  department?: Department | undefined;
  shortURL?: Array<ShortURL> | undefined;
};

/** @internal */
export const AccessiblePortal$inboundSchema: z.ZodType<
  AccessiblePortal,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  name: z.string().optional(),
  description: z.string().optional(),
  department: Department$inboundSchema.optional(),
  shortURL: z.array(ShortURL$inboundSchema).optional(),
});

/** @internal */
export type AccessiblePortal$Outbound = {
  id?: string | undefined;
  name?: string | undefined;
  description?: string | undefined;
  department?: Department$Outbound | undefined;
  shortURL?: Array<ShortURL$Outbound> | undefined;
};

/** @internal */
export const AccessiblePortal$outboundSchema: z.ZodType<
  AccessiblePortal$Outbound,
  z.ZodTypeDef,
  AccessiblePortal
> = z.object({
  id: z.string().optional(),
  name: z.string().optional(),
  description: z.string().optional(),
  department: Department$outboundSchema.optional(),
  shortURL: z.array(ShortURL$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccessiblePortal$ {
  /** @deprecated use `AccessiblePortal$inboundSchema` instead. */
  export const inboundSchema = AccessiblePortal$inboundSchema;
  /** @deprecated use `AccessiblePortal$outboundSchema` instead. */
  export const outboundSchema = AccessiblePortal$outboundSchema;
  /** @deprecated use `AccessiblePortal$Outbound` instead. */
  export type Outbound = AccessiblePortal$Outbound;
}

export function accessiblePortalToJSON(
  accessiblePortal: AccessiblePortal,
): string {
  return JSON.stringify(
    AccessiblePortal$outboundSchema.parse(accessiblePortal),
  );
}

export function accessiblePortalFromJSON(
  jsonString: string,
): SafeParseResult<AccessiblePortal, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AccessiblePortal$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AccessiblePortal' from JSON`,
  );
}
