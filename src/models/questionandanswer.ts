/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import {
  Answer,
  Answer$inboundSchema,
  Answer$Outbound,
  Answer$outboundSchema,
} from "./answer.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

/**
 * Questions and answers of the Casebase
 */
export type QuestionAndAnswer = {
  /**
   * ID of question
   */
  id: string;
  /**
   * Answers of question
   */
  answers?: Array<Answer> | undefined;
};

/** @internal */
export const QuestionAndAnswer$inboundSchema: z.ZodType<
  QuestionAndAnswer,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  answers: z.array(Answer$inboundSchema).optional(),
});

/** @internal */
export type QuestionAndAnswer$Outbound = {
  id: string;
  answers?: Array<Answer$Outbound> | undefined;
};

/** @internal */
export const QuestionAndAnswer$outboundSchema: z.ZodType<
  QuestionAndAnswer$Outbound,
  z.ZodTypeDef,
  QuestionAndAnswer
> = z.object({
  id: z.string(),
  answers: z.array(Answer$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace QuestionAndAnswer$ {
  /** @deprecated use `QuestionAndAnswer$inboundSchema` instead. */
  export const inboundSchema = QuestionAndAnswer$inboundSchema;
  /** @deprecated use `QuestionAndAnswer$outboundSchema` instead. */
  export const outboundSchema = QuestionAndAnswer$outboundSchema;
  /** @deprecated use `QuestionAndAnswer$Outbound` instead. */
  export type Outbound = QuestionAndAnswer$Outbound;
}

export function questionAndAnswerToJSON(
  questionAndAnswer: QuestionAndAnswer,
): string {
  return JSON.stringify(
    QuestionAndAnswer$outboundSchema.parse(questionAndAnswer),
  );
}

export function questionAndAnswerFromJSON(
  jsonString: string,
): SafeParseResult<QuestionAndAnswer, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => QuestionAndAnswer$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'QuestionAndAnswer' from JSON`,
  );
}
