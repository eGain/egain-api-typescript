/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  Link,
  Link$inboundSchema,
  Link$Outbound,
  Link$outboundSchema,
} from "./link.js";

/**
 * The publish view associated with this edition.
 */
export type EditionPublishProfile = {
  /**
   * The ID of the guided help profile.<br>
   *
   * @remarks
   * 1 will always be the **system profile**.
   */
  id: string;
  /**
   * The name of the profile.
   */
  name: string;
};

/**
 * This schema contains information about an article edition.
 */
export type Edition = {
  /**
   * The ID of the article edition.<br>An edition ID is composed of a 4-letter prefix, followed by a dash and 4-15 digits.
   */
  id?: string | undefined;
  /**
   * The alphanumeric name of the edition.
   */
  name?: string | undefined;
  /**
   * <li>The presence of this element indicates that this edition is the one corresponding to the returned content.</li>
   *
   * @remarks
   * <li>This can only be true for at most one <edition> element in the list of editions.</li>
   * <li>This parameter must only be returned if article content is returned as well.</li>
   * <li>The only allowed value is *true*. The absence of this parameter in the response indicates *false*.</li>
   */
  isContentEdition?: boolean | undefined;
  /**
   * The publish view associated with this edition.
   */
  publishProfile?: EditionPublishProfile | undefined;
  /**
   * Defines the relationship between this resource and another object.
   */
  link?: Link | undefined;
};

/** @internal */
export const EditionPublishProfile$inboundSchema: z.ZodType<
  EditionPublishProfile,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  name: z.string(),
});

/** @internal */
export type EditionPublishProfile$Outbound = {
  id: string;
  name: string;
};

/** @internal */
export const EditionPublishProfile$outboundSchema: z.ZodType<
  EditionPublishProfile$Outbound,
  z.ZodTypeDef,
  EditionPublishProfile
> = z.object({
  id: z.string(),
  name: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EditionPublishProfile$ {
  /** @deprecated use `EditionPublishProfile$inboundSchema` instead. */
  export const inboundSchema = EditionPublishProfile$inboundSchema;
  /** @deprecated use `EditionPublishProfile$outboundSchema` instead. */
  export const outboundSchema = EditionPublishProfile$outboundSchema;
  /** @deprecated use `EditionPublishProfile$Outbound` instead. */
  export type Outbound = EditionPublishProfile$Outbound;
}

export function editionPublishProfileToJSON(
  editionPublishProfile: EditionPublishProfile,
): string {
  return JSON.stringify(
    EditionPublishProfile$outboundSchema.parse(editionPublishProfile),
  );
}

export function editionPublishProfileFromJSON(
  jsonString: string,
): SafeParseResult<EditionPublishProfile, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EditionPublishProfile$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EditionPublishProfile' from JSON`,
  );
}

/** @internal */
export const Edition$inboundSchema: z.ZodType<Edition, z.ZodTypeDef, unknown> =
  z.object({
    id: z.string().optional(),
    name: z.string().optional(),
    isContentEdition: z.boolean().optional(),
    publishProfile: z.lazy(() => EditionPublishProfile$inboundSchema)
      .optional(),
    link: Link$inboundSchema.optional(),
  });

/** @internal */
export type Edition$Outbound = {
  id?: string | undefined;
  name?: string | undefined;
  isContentEdition?: boolean | undefined;
  publishProfile?: EditionPublishProfile$Outbound | undefined;
  link?: Link$Outbound | undefined;
};

/** @internal */
export const Edition$outboundSchema: z.ZodType<
  Edition$Outbound,
  z.ZodTypeDef,
  Edition
> = z.object({
  id: z.string().optional(),
  name: z.string().optional(),
  isContentEdition: z.boolean().optional(),
  publishProfile: z.lazy(() => EditionPublishProfile$outboundSchema).optional(),
  link: Link$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Edition$ {
  /** @deprecated use `Edition$inboundSchema` instead. */
  export const inboundSchema = Edition$inboundSchema;
  /** @deprecated use `Edition$outboundSchema` instead. */
  export const outboundSchema = Edition$outboundSchema;
  /** @deprecated use `Edition$Outbound` instead. */
  export type Outbound = Edition$Outbound;
}

export function editionToJSON(edition: Edition): string {
  return JSON.stringify(Edition$outboundSchema.parse(edition));
}

export function editionFromJSON(
  jsonString: string,
): SafeParseResult<Edition, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Edition$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Edition' from JSON`,
  );
}
