/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import {
  ArticleType,
  ArticleType$inboundSchema,
  ArticleType$Outbound,
  ArticleType$outboundSchema,
} from "./articletype.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  Metadata,
  Metadata$inboundSchema,
  Metadata$Outbound,
  Metadata$outboundSchema,
} from "./metadata.js";

/**
 * type of the action
 */
export const ActionSearchType = {
  Control: "control",
  Article: "article",
} as const;
/**
 * type of the action
 */
export type ActionSearchType = ClosedEnum<typeof ActionSearchType>;

export type ActionSearch = {
  /**
   * number of times action was accepted
   */
  acceptCount?: number | undefined;
  /**
   * indicates if action has additional information
   */
  hasAdditionalInfo?: boolean | undefined;
  /**
   * Metadata in action search.
   */
  metadata?: Array<Metadata> | undefined;
  /**
   * The ID of the Article .<br>The ID is composed of a 2-4 letter prefix, followed by a dash and 4-15 digits.
   */
  articleId?: string | undefined;
  /**
   * The numerical ID of the case.
   */
  caseId?: string | undefined;
  /**
   * indicates if the case has passed the threshold value
   */
  passedThresholdValue?: boolean | undefined;
  /**
   * The number of times action was rejected
   */
  rejectCount?: number | undefined;
  /**
   * short name
   */
  shortName?: string | undefined;
  /**
   * score of the case
   */
  score?: number | undefined;
  /**
   * name of the case
   */
  name?: string | undefined;
  /**
   * The ID of the Action.
   */
  actionId?: string | undefined;
  /**
   * type of the action
   */
  type?: ActionSearchType | undefined;
  /**
   * The type of the Article and its attributes.
   */
  articleType?: ArticleType | undefined;
};

/** @internal */
export const ActionSearchType$inboundSchema: z.ZodNativeEnum<
  typeof ActionSearchType
> = z.nativeEnum(ActionSearchType);

/** @internal */
export const ActionSearchType$outboundSchema: z.ZodNativeEnum<
  typeof ActionSearchType
> = ActionSearchType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActionSearchType$ {
  /** @deprecated use `ActionSearchType$inboundSchema` instead. */
  export const inboundSchema = ActionSearchType$inboundSchema;
  /** @deprecated use `ActionSearchType$outboundSchema` instead. */
  export const outboundSchema = ActionSearchType$outboundSchema;
}

/** @internal */
export const ActionSearch$inboundSchema: z.ZodType<
  ActionSearch,
  z.ZodTypeDef,
  unknown
> = z.object({
  acceptCount: z.number().int().optional(),
  hasAdditionalInfo: z.boolean().optional(),
  metadata: z.array(Metadata$inboundSchema).optional(),
  articleId: z.string().optional(),
  caseId: z.string().optional(),
  passedThresholdValue: z.boolean().optional(),
  rejectCount: z.number().int().optional(),
  shortName: z.string().optional(),
  score: z.number().int().optional(),
  name: z.string().optional(),
  actionId: z.string().optional(),
  type: ActionSearchType$inboundSchema.optional(),
  articleType: ArticleType$inboundSchema.optional(),
});

/** @internal */
export type ActionSearch$Outbound = {
  acceptCount?: number | undefined;
  hasAdditionalInfo?: boolean | undefined;
  metadata?: Array<Metadata$Outbound> | undefined;
  articleId?: string | undefined;
  caseId?: string | undefined;
  passedThresholdValue?: boolean | undefined;
  rejectCount?: number | undefined;
  shortName?: string | undefined;
  score?: number | undefined;
  name?: string | undefined;
  actionId?: string | undefined;
  type?: string | undefined;
  articleType?: ArticleType$Outbound | undefined;
};

/** @internal */
export const ActionSearch$outboundSchema: z.ZodType<
  ActionSearch$Outbound,
  z.ZodTypeDef,
  ActionSearch
> = z.object({
  acceptCount: z.number().int().optional(),
  hasAdditionalInfo: z.boolean().optional(),
  metadata: z.array(Metadata$outboundSchema).optional(),
  articleId: z.string().optional(),
  caseId: z.string().optional(),
  passedThresholdValue: z.boolean().optional(),
  rejectCount: z.number().int().optional(),
  shortName: z.string().optional(),
  score: z.number().int().optional(),
  name: z.string().optional(),
  actionId: z.string().optional(),
  type: ActionSearchType$outboundSchema.optional(),
  articleType: ArticleType$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActionSearch$ {
  /** @deprecated use `ActionSearch$inboundSchema` instead. */
  export const inboundSchema = ActionSearch$inboundSchema;
  /** @deprecated use `ActionSearch$outboundSchema` instead. */
  export const outboundSchema = ActionSearch$outboundSchema;
  /** @deprecated use `ActionSearch$Outbound` instead. */
  export type Outbound = ActionSearch$Outbound;
}

export function actionSearchToJSON(actionSearch: ActionSearch): string {
  return JSON.stringify(ActionSearch$outboundSchema.parse(actionSearch));
}

export function actionSearchFromJSON(
  jsonString: string,
): SafeParseResult<ActionSearch, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ActionSearch$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ActionSearch' from JSON`,
  );
}
