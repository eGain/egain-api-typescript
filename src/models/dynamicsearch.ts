/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import {
  DynamicCluster,
  DynamicCluster$inboundSchema,
  DynamicCluster$Outbound,
  DynamicCluster$outboundSchema,
} from "./dynamiccluster.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  VirtualCase,
  VirtualCase$inboundSchema,
  VirtualCase$Outbound,
  VirtualCase$outboundSchema,
} from "./virtualcase.js";

export type DynamicSearch = {
  /**
   * clusters in search
   */
  dynamicCluster?: Array<DynamicCluster> | undefined;
  /**
   * Parent cluster
   */
  parentClusterId?: string | undefined;
  /**
   * type of search
   */
  type?: string | undefined;
  /**
   * cases in search
   */
  virtualCase?: Array<VirtualCase> | undefined;
};

/** @internal */
export const DynamicSearch$inboundSchema: z.ZodType<
  DynamicSearch,
  z.ZodTypeDef,
  unknown
> = z.object({
  dynamicCluster: z.array(DynamicCluster$inboundSchema).optional(),
  parentClusterId: z.string().optional(),
  type: z.string().optional(),
  virtualCase: z.array(VirtualCase$inboundSchema).optional(),
});

/** @internal */
export type DynamicSearch$Outbound = {
  dynamicCluster?: Array<DynamicCluster$Outbound> | undefined;
  parentClusterId?: string | undefined;
  type?: string | undefined;
  virtualCase?: Array<VirtualCase$Outbound> | undefined;
};

/** @internal */
export const DynamicSearch$outboundSchema: z.ZodType<
  DynamicSearch$Outbound,
  z.ZodTypeDef,
  DynamicSearch
> = z.object({
  dynamicCluster: z.array(DynamicCluster$outboundSchema).optional(),
  parentClusterId: z.string().optional(),
  type: z.string().optional(),
  virtualCase: z.array(VirtualCase$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DynamicSearch$ {
  /** @deprecated use `DynamicSearch$inboundSchema` instead. */
  export const inboundSchema = DynamicSearch$inboundSchema;
  /** @deprecated use `DynamicSearch$outboundSchema` instead. */
  export const outboundSchema = DynamicSearch$outboundSchema;
  /** @deprecated use `DynamicSearch$Outbound` instead. */
  export type Outbound = DynamicSearch$Outbound;
}

export function dynamicSearchToJSON(dynamicSearch: DynamicSearch): string {
  return JSON.stringify(DynamicSearch$outboundSchema.parse(dynamicSearch));
}

export function dynamicSearchFromJSON(
  jsonString: string,
): SafeParseResult<DynamicSearch, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DynamicSearch$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DynamicSearch' from JSON`,
  );
}
