/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  PublishView,
  PublishView$inboundSchema,
  PublishView$Outbound,
  PublishView$outboundSchema,
} from "./publishview.js";
import {
  TagCategory,
  TagCategory$inboundSchema,
  TagCategory$Outbound,
  TagCategory$outboundSchema,
} from "./tagcategory.js";

export type PersonalizationAccessTags = {
  /**
   * An array of tag categories. Note that the total number of tag categories cannot exceed 20.
   */
  tagCategory?: Array<TagCategory> | undefined;
};

export type Filters = {
  /**
   * An array of tag categories. Note that the total number of tag categories cannot exceed 20.
   */
  tagCategory?: Array<TagCategory> | undefined;
};

export type PublishViews = {
  /**
   * Publish views allow authors to tailor the contents of an article to different audiences by controlling visibility of certain article content using tags.<br><br>The total number of publish views is limited to 20.
   */
  publishView?: Array<PublishView> | undefined;
};

/**
 * Personalization allows the filtering of search results and controls the access to articles and article editions.
 */
export type Personalization = {
  accessTags?: PersonalizationAccessTags | undefined;
  filters?: Filters | undefined;
  publishViews?: PublishViews | undefined;
};

/** @internal */
export const PersonalizationAccessTags$inboundSchema: z.ZodType<
  PersonalizationAccessTags,
  z.ZodTypeDef,
  unknown
> = z.object({
  tagCategory: z.array(TagCategory$inboundSchema).optional(),
});

/** @internal */
export type PersonalizationAccessTags$Outbound = {
  tagCategory?: Array<TagCategory$Outbound> | undefined;
};

/** @internal */
export const PersonalizationAccessTags$outboundSchema: z.ZodType<
  PersonalizationAccessTags$Outbound,
  z.ZodTypeDef,
  PersonalizationAccessTags
> = z.object({
  tagCategory: z.array(TagCategory$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PersonalizationAccessTags$ {
  /** @deprecated use `PersonalizationAccessTags$inboundSchema` instead. */
  export const inboundSchema = PersonalizationAccessTags$inboundSchema;
  /** @deprecated use `PersonalizationAccessTags$outboundSchema` instead. */
  export const outboundSchema = PersonalizationAccessTags$outboundSchema;
  /** @deprecated use `PersonalizationAccessTags$Outbound` instead. */
  export type Outbound = PersonalizationAccessTags$Outbound;
}

export function personalizationAccessTagsToJSON(
  personalizationAccessTags: PersonalizationAccessTags,
): string {
  return JSON.stringify(
    PersonalizationAccessTags$outboundSchema.parse(personalizationAccessTags),
  );
}

export function personalizationAccessTagsFromJSON(
  jsonString: string,
): SafeParseResult<PersonalizationAccessTags, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PersonalizationAccessTags$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PersonalizationAccessTags' from JSON`,
  );
}

/** @internal */
export const Filters$inboundSchema: z.ZodType<Filters, z.ZodTypeDef, unknown> =
  z.object({
    tagCategory: z.array(TagCategory$inboundSchema).optional(),
  });

/** @internal */
export type Filters$Outbound = {
  tagCategory?: Array<TagCategory$Outbound> | undefined;
};

/** @internal */
export const Filters$outboundSchema: z.ZodType<
  Filters$Outbound,
  z.ZodTypeDef,
  Filters
> = z.object({
  tagCategory: z.array(TagCategory$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Filters$ {
  /** @deprecated use `Filters$inboundSchema` instead. */
  export const inboundSchema = Filters$inboundSchema;
  /** @deprecated use `Filters$outboundSchema` instead. */
  export const outboundSchema = Filters$outboundSchema;
  /** @deprecated use `Filters$Outbound` instead. */
  export type Outbound = Filters$Outbound;
}

export function filtersToJSON(filters: Filters): string {
  return JSON.stringify(Filters$outboundSchema.parse(filters));
}

export function filtersFromJSON(
  jsonString: string,
): SafeParseResult<Filters, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Filters$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Filters' from JSON`,
  );
}

/** @internal */
export const PublishViews$inboundSchema: z.ZodType<
  PublishViews,
  z.ZodTypeDef,
  unknown
> = z.object({
  publishView: z.array(PublishView$inboundSchema).optional(),
});

/** @internal */
export type PublishViews$Outbound = {
  publishView?: Array<PublishView$Outbound> | undefined;
};

/** @internal */
export const PublishViews$outboundSchema: z.ZodType<
  PublishViews$Outbound,
  z.ZodTypeDef,
  PublishViews
> = z.object({
  publishView: z.array(PublishView$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PublishViews$ {
  /** @deprecated use `PublishViews$inboundSchema` instead. */
  export const inboundSchema = PublishViews$inboundSchema;
  /** @deprecated use `PublishViews$outboundSchema` instead. */
  export const outboundSchema = PublishViews$outboundSchema;
  /** @deprecated use `PublishViews$Outbound` instead. */
  export type Outbound = PublishViews$Outbound;
}

export function publishViewsToJSON(publishViews: PublishViews): string {
  return JSON.stringify(PublishViews$outboundSchema.parse(publishViews));
}

export function publishViewsFromJSON(
  jsonString: string,
): SafeParseResult<PublishViews, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PublishViews$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PublishViews' from JSON`,
  );
}

/** @internal */
export const Personalization$inboundSchema: z.ZodType<
  Personalization,
  z.ZodTypeDef,
  unknown
> = z.object({
  accessTags: z.lazy(() => PersonalizationAccessTags$inboundSchema).optional(),
  filters: z.lazy(() => Filters$inboundSchema).optional(),
  publishViews: z.lazy(() => PublishViews$inboundSchema).optional(),
});

/** @internal */
export type Personalization$Outbound = {
  accessTags?: PersonalizationAccessTags$Outbound | undefined;
  filters?: Filters$Outbound | undefined;
  publishViews?: PublishViews$Outbound | undefined;
};

/** @internal */
export const Personalization$outboundSchema: z.ZodType<
  Personalization$Outbound,
  z.ZodTypeDef,
  Personalization
> = z.object({
  accessTags: z.lazy(() => PersonalizationAccessTags$outboundSchema).optional(),
  filters: z.lazy(() => Filters$outboundSchema).optional(),
  publishViews: z.lazy(() => PublishViews$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Personalization$ {
  /** @deprecated use `Personalization$inboundSchema` instead. */
  export const inboundSchema = Personalization$inboundSchema;
  /** @deprecated use `Personalization$outboundSchema` instead. */
  export const outboundSchema = Personalization$outboundSchema;
  /** @deprecated use `Personalization$Outbound` instead. */
  export type Outbound = Personalization$Outbound;
}

export function personalizationToJSON(
  personalization: Personalization,
): string {
  return JSON.stringify(Personalization$outboundSchema.parse(personalization));
}

export function personalizationFromJSON(
  jsonString: string,
): SafeParseResult<Personalization, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Personalization$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Personalization' from JSON`,
  );
}
