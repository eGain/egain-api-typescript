/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

/**
 * Role template
 */
export type RoleTemplate = {
  /**
   * Value of the role template
   */
  value: string;
  /**
   * Display value of the role template
   */
  displayValue: string;
};

/** @internal */
export const RoleTemplate$inboundSchema: z.ZodType<
  RoleTemplate,
  z.ZodTypeDef,
  unknown
> = z.object({
  value: z.string(),
  displayValue: z.string(),
});

/** @internal */
export type RoleTemplate$Outbound = {
  value: string;
  displayValue: string;
};

/** @internal */
export const RoleTemplate$outboundSchema: z.ZodType<
  RoleTemplate$Outbound,
  z.ZodTypeDef,
  RoleTemplate
> = z.object({
  value: z.string(),
  displayValue: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RoleTemplate$ {
  /** @deprecated use `RoleTemplate$inboundSchema` instead. */
  export const inboundSchema = RoleTemplate$inboundSchema;
  /** @deprecated use `RoleTemplate$outboundSchema` instead. */
  export const outboundSchema = RoleTemplate$outboundSchema;
  /** @deprecated use `RoleTemplate$Outbound` instead. */
  export type Outbound = RoleTemplate$Outbound;
}

export function roleTemplateToJSON(roleTemplate: RoleTemplate): string {
  return JSON.stringify(RoleTemplate$outboundSchema.parse(roleTemplate));
}

export function roleTemplateFromJSON(
  jsonString: string,
): SafeParseResult<RoleTemplate, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RoleTemplate$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RoleTemplate' from JSON`,
  );
}
