/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type TagGroup = {
  name?: string | undefined;
  id?: string | undefined;
};

/** @internal */
export const TagGroup$inboundSchema: z.ZodType<
  TagGroup,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string().optional(),
  id: z.string().optional(),
});

/** @internal */
export type TagGroup$Outbound = {
  name?: string | undefined;
  id?: string | undefined;
};

/** @internal */
export const TagGroup$outboundSchema: z.ZodType<
  TagGroup$Outbound,
  z.ZodTypeDef,
  TagGroup
> = z.object({
  name: z.string().optional(),
  id: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TagGroup$ {
  /** @deprecated use `TagGroup$inboundSchema` instead. */
  export const inboundSchema = TagGroup$inboundSchema;
  /** @deprecated use `TagGroup$outboundSchema` instead. */
  export const outboundSchema = TagGroup$outboundSchema;
  /** @deprecated use `TagGroup$Outbound` instead. */
  export type Outbound = TagGroup$Outbound;
}

export function tagGroupToJSON(tagGroup: TagGroup): string {
  return JSON.stringify(TagGroup$outboundSchema.parse(tagGroup));
}

export function tagGroupFromJSON(
  jsonString: string,
): SafeParseResult<TagGroup, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TagGroup$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TagGroup' from JSON`,
  );
}
