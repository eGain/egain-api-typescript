/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  Role,
  Role$inboundSchema,
  Role$Outbound,
  Role$outboundSchema,
} from "./role.js";

/**
 * Success
 */
export type UserDetails = {
  /**
   * The numerical ID of the User
   */
  id?: string | undefined;
  /**
   * Roles of the User
   */
  roles?: Array<Role> | undefined;
  /**
   * First Name of the User
   */
  firstName?: string | undefined;
  /**
   * Last Name of the User
   */
  lastName?: string | undefined;
  /**
   * Indicates if user has email
   */
  hasEmailConfigured?: boolean | undefined;
};

/** @internal */
export const UserDetails$inboundSchema: z.ZodType<
  UserDetails,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  roles: z.array(Role$inboundSchema).optional(),
  firstName: z.string().optional(),
  lastName: z.string().optional(),
  hasEmailConfigured: z.boolean().optional(),
});

/** @internal */
export type UserDetails$Outbound = {
  id?: string | undefined;
  roles?: Array<Role$Outbound> | undefined;
  firstName?: string | undefined;
  lastName?: string | undefined;
  hasEmailConfigured?: boolean | undefined;
};

/** @internal */
export const UserDetails$outboundSchema: z.ZodType<
  UserDetails$Outbound,
  z.ZodTypeDef,
  UserDetails
> = z.object({
  id: z.string().optional(),
  roles: z.array(Role$outboundSchema).optional(),
  firstName: z.string().optional(),
  lastName: z.string().optional(),
  hasEmailConfigured: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UserDetails$ {
  /** @deprecated use `UserDetails$inboundSchema` instead. */
  export const inboundSchema = UserDetails$inboundSchema;
  /** @deprecated use `UserDetails$outboundSchema` instead. */
  export const outboundSchema = UserDetails$outboundSchema;
  /** @deprecated use `UserDetails$Outbound` instead. */
  export type Outbound = UserDetails$Outbound;
}

export function userDetailsToJSON(userDetails: UserDetails): string {
  return JSON.stringify(UserDetails$outboundSchema.parse(userDetails));
}

export function userDetailsFromJSON(
  jsonString: string,
): SafeParseResult<UserDetails, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UserDetails$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UserDetails' from JSON`,
  );
}
