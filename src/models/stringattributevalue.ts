/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

/**
 * An attribute can have an external value such as a readable label, and an internal value such as a unique ID. This schema provides both the internal and external values for one attribute.
 */
export type StringAttributeValue = {
  /**
   * The internal value of the attribute.
   */
  internalValue?: string | undefined;
  /**
   * The external or public value of the attribute.
   */
  externalValue?: string | undefined;
};

/** @internal */
export const StringAttributeValue$inboundSchema: z.ZodType<
  StringAttributeValue,
  z.ZodTypeDef,
  unknown
> = z.object({
  internalValue: z.string().optional(),
  externalValue: z.string().optional(),
});

/** @internal */
export type StringAttributeValue$Outbound = {
  internalValue?: string | undefined;
  externalValue?: string | undefined;
};

/** @internal */
export const StringAttributeValue$outboundSchema: z.ZodType<
  StringAttributeValue$Outbound,
  z.ZodTypeDef,
  StringAttributeValue
> = z.object({
  internalValue: z.string().optional(),
  externalValue: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StringAttributeValue$ {
  /** @deprecated use `StringAttributeValue$inboundSchema` instead. */
  export const inboundSchema = StringAttributeValue$inboundSchema;
  /** @deprecated use `StringAttributeValue$outboundSchema` instead. */
  export const outboundSchema = StringAttributeValue$outboundSchema;
  /** @deprecated use `StringAttributeValue$Outbound` instead. */
  export type Outbound = StringAttributeValue$Outbound;
}

export function stringAttributeValueToJSON(
  stringAttributeValue: StringAttributeValue,
): string {
  return JSON.stringify(
    StringAttributeValue$outboundSchema.parse(stringAttributeValue),
  );
}

export function stringAttributeValueFromJSON(
  jsonString: string,
): SafeParseResult<StringAttributeValue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => StringAttributeValue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'StringAttributeValue' from JSON`,
  );
}
