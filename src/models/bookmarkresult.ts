/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import {
  Bookmark,
  Bookmark$inboundSchema,
  Bookmark$Outbound,
  Bookmark$outboundSchema,
} from "./bookmark.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  PaginationInfo,
  PaginationInfo$inboundSchema,
  PaginationInfo$Outbound,
  PaginationInfo$outboundSchema,
} from "./paginationinfo.js";

/**
 * One or more instances of Bookmark.
 */
export type BookmarkResult = {
  bookmarks?: Array<Bookmark> | undefined;
  paginationInfo?: PaginationInfo | undefined;
};

/** @internal */
export const BookmarkResult$inboundSchema: z.ZodType<
  BookmarkResult,
  z.ZodTypeDef,
  unknown
> = z.object({
  bookmarks: z.array(Bookmark$inboundSchema).optional(),
  paginationInfo: PaginationInfo$inboundSchema.optional(),
});

/** @internal */
export type BookmarkResult$Outbound = {
  bookmarks?: Array<Bookmark$Outbound> | undefined;
  paginationInfo?: PaginationInfo$Outbound | undefined;
};

/** @internal */
export const BookmarkResult$outboundSchema: z.ZodType<
  BookmarkResult$Outbound,
  z.ZodTypeDef,
  BookmarkResult
> = z.object({
  bookmarks: z.array(Bookmark$outboundSchema).optional(),
  paginationInfo: PaginationInfo$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BookmarkResult$ {
  /** @deprecated use `BookmarkResult$inboundSchema` instead. */
  export const inboundSchema = BookmarkResult$inboundSchema;
  /** @deprecated use `BookmarkResult$outboundSchema` instead. */
  export const outboundSchema = BookmarkResult$outboundSchema;
  /** @deprecated use `BookmarkResult$Outbound` instead. */
  export type Outbound = BookmarkResult$Outbound;
}

export function bookmarkResultToJSON(bookmarkResult: BookmarkResult): string {
  return JSON.stringify(BookmarkResult$outboundSchema.parse(bookmarkResult));
}

export function bookmarkResultFromJSON(
  jsonString: string,
): SafeParseResult<BookmarkResult, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => BookmarkResult$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BookmarkResult' from JSON`,
  );
}
