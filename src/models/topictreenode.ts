/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  Topic,
  Topic$inboundSchema,
  Topic$Outbound,
  Topic$outboundSchema,
} from "./topic.js";

/**
 * This schema contains general information about the TopicTree.
 */
export type TopicTreeNode = {
  /**
   * This schema contains general information about the topic.
   */
  topic?: Topic | undefined;
  topicTree?: Array<TopicTreeNode> | undefined;
};

/** @internal */
export const TopicTreeNode$inboundSchema: z.ZodType<
  TopicTreeNode,
  z.ZodTypeDef,
  unknown
> = z.object({
  topic: Topic$inboundSchema.optional(),
  topicTree: z.array(z.lazy(() => TopicTreeNode$inboundSchema)).optional(),
});

/** @internal */
export type TopicTreeNode$Outbound = {
  topic?: Topic$Outbound | undefined;
  topicTree?: Array<TopicTreeNode$Outbound> | undefined;
};

/** @internal */
export const TopicTreeNode$outboundSchema: z.ZodType<
  TopicTreeNode$Outbound,
  z.ZodTypeDef,
  TopicTreeNode
> = z.object({
  topic: Topic$outboundSchema.optional(),
  topicTree: z.array(z.lazy(() => TopicTreeNode$outboundSchema)).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TopicTreeNode$ {
  /** @deprecated use `TopicTreeNode$inboundSchema` instead. */
  export const inboundSchema = TopicTreeNode$inboundSchema;
  /** @deprecated use `TopicTreeNode$outboundSchema` instead. */
  export const outboundSchema = TopicTreeNode$outboundSchema;
  /** @deprecated use `TopicTreeNode$Outbound` instead. */
  export type Outbound = TopicTreeNode$Outbound;
}

export function topicTreeNodeToJSON(topicTreeNode: TopicTreeNode): string {
  return JSON.stringify(TopicTreeNode$outboundSchema.parse(topicTreeNode));
}

export function topicTreeNodeFromJSON(
  jsonString: string,
): SafeParseResult<TopicTreeNode, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TopicTreeNode$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TopicTreeNode' from JSON`,
  );
}
