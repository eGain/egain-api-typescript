/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import {
  ArticleType,
  ArticleType$inboundSchema,
  ArticleType$Outbound,
  ArticleType$outboundSchema,
} from "./articletype.js";
import {
  ComplianceForArticle,
  ComplianceForArticle$inboundSchema,
  ComplianceForArticle$Outbound,
  ComplianceForArticle$outboundSchema,
} from "./complianceforarticle.js";
import {
  CreatedBy,
  CreatedBy$inboundSchema,
  CreatedBy$Outbound,
  CreatedBy$outboundSchema,
} from "./createdby.js";
import {
  CustomAttribute,
  CustomAttribute$inboundSchema,
  CustomAttribute$Outbound,
  CustomAttribute$outboundSchema,
} from "./customattribute.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  LanguageCode,
  LanguageCode$inboundSchema,
  LanguageCode$outboundSchema,
} from "./languagecode.js";
import {
  Link,
  Link$inboundSchema,
  Link$Outbound,
  Link$outboundSchema,
} from "./link.js";
import {
  ModifiedBy,
  ModifiedBy$inboundSchema,
  ModifiedBy$Outbound,
  ModifiedBy$outboundSchema,
} from "./modifiedby.js";
import {
  OwnedBy,
  OwnedBy$inboundSchema,
  OwnedBy$Outbound,
  OwnedBy$outboundSchema,
} from "./ownedby.js";
import {
  Personalization,
  Personalization$inboundSchema,
  Personalization$Outbound,
  Personalization$outboundSchema,
} from "./personalization.js";
import {
  TopicBreadcrumb,
  TopicBreadcrumb$inboundSchema,
  TopicBreadcrumb$Outbound,
  TopicBreadcrumb$outboundSchema,
} from "./topicbreadcrumb.js";
import {
  Workflow,
  Workflow$inboundSchema,
  Workflow$Outbound,
  Workflow$outboundSchema,
} from "./workflow.js";

/**
 * Article search result, a subset of Article that does not contain content and contentText.
 */
export type ArticleResult = {
  /**
   * The ID of the Article.<br>An Article ID is composed of a 2-4 letter prefix, followed by a dash and 4-15 digits.
   */
  id?: string | undefined;
  /**
   * The type of the Article and its attributes.
   */
  articleType?: ArticleType | undefined;
  /**
   * A comma-separated list of keywords associated with this Article. 1 KB max size limit.
   */
  articleKeywords?: string | undefined;
  /**
   * A brief summary of the Article, provided as metadata. 1 KB max size limit.
   */
  articleSummary?: string | undefined;
  /**
   * The average rating of the Article.
   */
  averageRating?: number | undefined;
  createdBy?: CreatedBy | undefined;
  modifiedBy?: ModifiedBy | undefined;
  ownedBy?: OwnedBy | undefined;
  createdDate?: string | undefined;
  /**
   * A list of custom attributes.
   */
  customAttributes?: Array<CustomAttribute> | undefined;
  /**
   * A description of the Article. The maximum allowed Article description size is 1 KB.
   */
  description?: string | undefined;
  /**
   * Indicates whether the Article has any attachments.
   */
  hasAttachments?: boolean | undefined;
  /**
   * Indicates whether the Article is subscribed for notifications.
   */
  isSubscribed?: boolean | undefined;
  /**
   * The date on which the Article was last modified.
   */
  modifiedDate?: string | undefined;
  /**
   * Language code of the resource's language.
   */
  languageCode?: LanguageCode | undefined;
  /**
   * Defines the relationship between this resource and another object.
   */
  link?: Link | undefined;
  /**
   * The URL of the image that is present in the Article version. It is used as the thumbnail image for the Article.
   */
  imageURL?: string | undefined;
  /**
   * The name of the Article.
   */
  name?: string | undefined;
  /**
   * The number of times that this Article has been rated.
   */
  timesRated?: number | undefined;
  /**
   * A list of topics from the root topic to this Article. There may be multiple paths.
   */
  topicBreadcrumb?: Array<TopicBreadcrumb> | undefined;
  /**
   * The ID of this version of the Article.
   */
  versionId?: string | undefined;
  /**
   * The Article's workflow.
   */
  workflow?: Workflow | undefined;
  /**
   * This schema contains the compliance details for an Article.
   */
  compliance?: ComplianceForArticle | undefined;
  /**
   * Personalization allows the filtering of search results and controls the access to articles and article editions.
   */
  personalization?: Personalization | undefined;
};

/** @internal */
export const ArticleResult$inboundSchema: z.ZodType<
  ArticleResult,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  articleType: ArticleType$inboundSchema.optional(),
  articleKeywords: z.string().optional(),
  articleSummary: z.string().optional(),
  averageRating: z.number().optional(),
  createdBy: CreatedBy$inboundSchema.optional(),
  modifiedBy: ModifiedBy$inboundSchema.optional(),
  ownedBy: OwnedBy$inboundSchema.optional(),
  createdDate: z.string().optional(),
  customAttributes: z.array(CustomAttribute$inboundSchema).optional(),
  description: z.string().optional(),
  hasAttachments: z.boolean().optional(),
  isSubscribed: z.boolean().optional(),
  modifiedDate: z.string().optional(),
  languageCode: LanguageCode$inboundSchema.optional(),
  link: Link$inboundSchema.optional(),
  imageURL: z.string().optional(),
  name: z.string().optional(),
  timesRated: z.number().int().optional(),
  topicBreadcrumb: z.array(TopicBreadcrumb$inboundSchema).optional(),
  versionId: z.string().optional(),
  workflow: Workflow$inboundSchema.optional(),
  compliance: ComplianceForArticle$inboundSchema.optional(),
  personalization: Personalization$inboundSchema.optional(),
});

/** @internal */
export type ArticleResult$Outbound = {
  id?: string | undefined;
  articleType?: ArticleType$Outbound | undefined;
  articleKeywords?: string | undefined;
  articleSummary?: string | undefined;
  averageRating?: number | undefined;
  createdBy?: CreatedBy$Outbound | undefined;
  modifiedBy?: ModifiedBy$Outbound | undefined;
  ownedBy?: OwnedBy$Outbound | undefined;
  createdDate?: string | undefined;
  customAttributes?: Array<CustomAttribute$Outbound> | undefined;
  description?: string | undefined;
  hasAttachments?: boolean | undefined;
  isSubscribed?: boolean | undefined;
  modifiedDate?: string | undefined;
  languageCode?: string | undefined;
  link?: Link$Outbound | undefined;
  imageURL?: string | undefined;
  name?: string | undefined;
  timesRated?: number | undefined;
  topicBreadcrumb?: Array<TopicBreadcrumb$Outbound> | undefined;
  versionId?: string | undefined;
  workflow?: Workflow$Outbound | undefined;
  compliance?: ComplianceForArticle$Outbound | undefined;
  personalization?: Personalization$Outbound | undefined;
};

/** @internal */
export const ArticleResult$outboundSchema: z.ZodType<
  ArticleResult$Outbound,
  z.ZodTypeDef,
  ArticleResult
> = z.object({
  id: z.string().optional(),
  articleType: ArticleType$outboundSchema.optional(),
  articleKeywords: z.string().optional(),
  articleSummary: z.string().optional(),
  averageRating: z.number().optional(),
  createdBy: CreatedBy$outboundSchema.optional(),
  modifiedBy: ModifiedBy$outboundSchema.optional(),
  ownedBy: OwnedBy$outboundSchema.optional(),
  createdDate: z.string().optional(),
  customAttributes: z.array(CustomAttribute$outboundSchema).optional(),
  description: z.string().optional(),
  hasAttachments: z.boolean().optional(),
  isSubscribed: z.boolean().optional(),
  modifiedDate: z.string().optional(),
  languageCode: LanguageCode$outboundSchema.optional(),
  link: Link$outboundSchema.optional(),
  imageURL: z.string().optional(),
  name: z.string().optional(),
  timesRated: z.number().int().optional(),
  topicBreadcrumb: z.array(TopicBreadcrumb$outboundSchema).optional(),
  versionId: z.string().optional(),
  workflow: Workflow$outboundSchema.optional(),
  compliance: ComplianceForArticle$outboundSchema.optional(),
  personalization: Personalization$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ArticleResult$ {
  /** @deprecated use `ArticleResult$inboundSchema` instead. */
  export const inboundSchema = ArticleResult$inboundSchema;
  /** @deprecated use `ArticleResult$outboundSchema` instead. */
  export const outboundSchema = ArticleResult$outboundSchema;
  /** @deprecated use `ArticleResult$Outbound` instead. */
  export type Outbound = ArticleResult$Outbound;
}

export function articleResultToJSON(articleResult: ArticleResult): string {
  return JSON.stringify(ArticleResult$outboundSchema.parse(articleResult));
}

export function articleResultFromJSON(
  jsonString: string,
): SafeParseResult<ArticleResult, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ArticleResult$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ArticleResult' from JSON`,
  );
}
