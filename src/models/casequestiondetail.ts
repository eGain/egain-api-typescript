/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import {
  CaseAnswer,
  CaseAnswer$inboundSchema,
  CaseAnswer$Outbound,
  CaseAnswer$outboundSchema,
} from "./caseanswer.js";
import {
  CaseQuestion,
  CaseQuestion$inboundSchema,
  CaseQuestion$Outbound,
  CaseQuestion$outboundSchema,
} from "./casequestion.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type CaseQuestionDetail = {
  question: CaseQuestion;
  /**
   * Answer of the question
   */
  answer: Array<CaseAnswer>;
  /**
   * Weightage of the question
   */
  scoringValue?: number | undefined;
};

/** @internal */
export const CaseQuestionDetail$inboundSchema: z.ZodType<
  CaseQuestionDetail,
  z.ZodTypeDef,
  unknown
> = z.object({
  question: CaseQuestion$inboundSchema,
  answer: z.array(CaseAnswer$inboundSchema),
  scoringValue: z.number().optional(),
});

/** @internal */
export type CaseQuestionDetail$Outbound = {
  question: CaseQuestion$Outbound;
  answer: Array<CaseAnswer$Outbound>;
  scoringValue?: number | undefined;
};

/** @internal */
export const CaseQuestionDetail$outboundSchema: z.ZodType<
  CaseQuestionDetail$Outbound,
  z.ZodTypeDef,
  CaseQuestionDetail
> = z.object({
  question: CaseQuestion$outboundSchema,
  answer: z.array(CaseAnswer$outboundSchema),
  scoringValue: z.number().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CaseQuestionDetail$ {
  /** @deprecated use `CaseQuestionDetail$inboundSchema` instead. */
  export const inboundSchema = CaseQuestionDetail$inboundSchema;
  /** @deprecated use `CaseQuestionDetail$outboundSchema` instead. */
  export const outboundSchema = CaseQuestionDetail$outboundSchema;
  /** @deprecated use `CaseQuestionDetail$Outbound` instead. */
  export type Outbound = CaseQuestionDetail$Outbound;
}

export function caseQuestionDetailToJSON(
  caseQuestionDetail: CaseQuestionDetail,
): string {
  return JSON.stringify(
    CaseQuestionDetail$outboundSchema.parse(caseQuestionDetail),
  );
}

export function caseQuestionDetailFromJSON(
  jsonString: string,
): SafeParseResult<CaseQuestionDetail, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CaseQuestionDetail$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CaseQuestionDetail' from JSON`,
  );
}
