/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import {
  ActionSearch,
  ActionSearch$inboundSchema,
  ActionSearch$Outbound,
  ActionSearch$outboundSchema,
} from "./actionsearch.js";
import {
  AnsweredQuestion,
  AnsweredQuestion$inboundSchema,
  AnsweredQuestion$Outbound,
  AnsweredQuestion$outboundSchema,
} from "./answeredquestion.js";
import {
  Casebase,
  Casebase$inboundSchema,
  Casebase$Outbound,
  Casebase$outboundSchema,
} from "./casebase.js";
import {
  CaseSearch,
  CaseSearch$inboundSchema,
  CaseSearch$Outbound,
  CaseSearch$outboundSchema,
} from "./casesearch.js";
import {
  ClusterId,
  ClusterId$inboundSchema,
  ClusterId$Outbound,
  ClusterId$outboundSchema,
} from "./clusterid.js";
import {
  DynamicSearch,
  DynamicSearch$inboundSchema,
  DynamicSearch$Outbound,
  DynamicSearch$outboundSchema,
} from "./dynamicsearch.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  Question,
  Question$inboundSchema,
  Question$Outbound,
  Question$outboundSchema,
} from "./question.js";

/**
 * Success
 */
export type GHSearchResult = {
  casebase?: Casebase | undefined;
  /**
   * actions in the search
   */
  actionSearch?: Array<ActionSearch> | undefined;
  /**
   * questions answered in the search
   */
  answeredQuestion?: Array<AnsweredQuestion> | undefined;
  /**
   * cases in the search
   */
  caseSearch?: Array<CaseSearch> | undefined;
  /**
   * dynamic cases in the search
   */
  dynamicSearch?: Array<DynamicSearch> | undefined;
  /**
   * unanswered questions in the search
   */
  unansweredQuestion?: Array<Question> | undefined;
  /**
   * startup questions in the search
   */
  startupQuestion?: Array<Question> | undefined;
  /**
   * active clusters in the search
   */
  targetClusters?: Array<ClusterId> | undefined;
};

/** @internal */
export const GHSearchResult$inboundSchema: z.ZodType<
  GHSearchResult,
  z.ZodTypeDef,
  unknown
> = z.object({
  casebase: Casebase$inboundSchema.optional(),
  actionSearch: z.array(ActionSearch$inboundSchema).optional(),
  answeredQuestion: z.array(AnsweredQuestion$inboundSchema).optional(),
  caseSearch: z.array(CaseSearch$inboundSchema).optional(),
  dynamicSearch: z.array(DynamicSearch$inboundSchema).optional(),
  unansweredQuestion: z.array(Question$inboundSchema).optional(),
  startupQuestion: z.array(Question$inboundSchema).optional(),
  targetClusters: z.array(ClusterId$inboundSchema).optional(),
});

/** @internal */
export type GHSearchResult$Outbound = {
  casebase?: Casebase$Outbound | undefined;
  actionSearch?: Array<ActionSearch$Outbound> | undefined;
  answeredQuestion?: Array<AnsweredQuestion$Outbound> | undefined;
  caseSearch?: Array<CaseSearch$Outbound> | undefined;
  dynamicSearch?: Array<DynamicSearch$Outbound> | undefined;
  unansweredQuestion?: Array<Question$Outbound> | undefined;
  startupQuestion?: Array<Question$Outbound> | undefined;
  targetClusters?: Array<ClusterId$Outbound> | undefined;
};

/** @internal */
export const GHSearchResult$outboundSchema: z.ZodType<
  GHSearchResult$Outbound,
  z.ZodTypeDef,
  GHSearchResult
> = z.object({
  casebase: Casebase$outboundSchema.optional(),
  actionSearch: z.array(ActionSearch$outboundSchema).optional(),
  answeredQuestion: z.array(AnsweredQuestion$outboundSchema).optional(),
  caseSearch: z.array(CaseSearch$outboundSchema).optional(),
  dynamicSearch: z.array(DynamicSearch$outboundSchema).optional(),
  unansweredQuestion: z.array(Question$outboundSchema).optional(),
  startupQuestion: z.array(Question$outboundSchema).optional(),
  targetClusters: z.array(ClusterId$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GHSearchResult$ {
  /** @deprecated use `GHSearchResult$inboundSchema` instead. */
  export const inboundSchema = GHSearchResult$inboundSchema;
  /** @deprecated use `GHSearchResult$outboundSchema` instead. */
  export const outboundSchema = GHSearchResult$outboundSchema;
  /** @deprecated use `GHSearchResult$Outbound` instead. */
  export type Outbound = GHSearchResult$Outbound;
}

export function ghSearchResultToJSON(ghSearchResult: GHSearchResult): string {
  return JSON.stringify(GHSearchResult$outboundSchema.parse(ghSearchResult));
}

export function ghSearchResultFromJSON(
  jsonString: string,
): SafeParseResult<GHSearchResult, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GHSearchResult$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GHSearchResult' from JSON`,
  );
}
