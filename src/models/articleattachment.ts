/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  Link,
  Link$inboundSchema,
  Link$Outbound,
  Link$outboundSchema,
} from "./link.js";

/**
 * The type of attachment.
 */
export const ArticleAttachmentType = {
  Internal: "INTERNAL",
  External: "EXTERNAL",
} as const;
/**
 * The type of attachment.
 */
export type ArticleAttachmentType = ClosedEnum<typeof ArticleAttachmentType>;

export type ArticleAttachment = {
  /**
   * The ID of the attachment.
   */
  id?: string | undefined;
  /**
   * The name of the attachment.
   */
  name?: string | undefined;
  /**
   * The size of the attachment in bytes. The maximum size is limited to 25MB.
   */
  size?: number | undefined;
  /**
   * The type of attachment.
   */
  type?: ArticleAttachmentType | undefined;
  /**
   * Defines the relationship between this resource and another object.
   */
  link?: Link | undefined;
};

/** @internal */
export const ArticleAttachmentType$inboundSchema: z.ZodNativeEnum<
  typeof ArticleAttachmentType
> = z.nativeEnum(ArticleAttachmentType);

/** @internal */
export const ArticleAttachmentType$outboundSchema: z.ZodNativeEnum<
  typeof ArticleAttachmentType
> = ArticleAttachmentType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ArticleAttachmentType$ {
  /** @deprecated use `ArticleAttachmentType$inboundSchema` instead. */
  export const inboundSchema = ArticleAttachmentType$inboundSchema;
  /** @deprecated use `ArticleAttachmentType$outboundSchema` instead. */
  export const outboundSchema = ArticleAttachmentType$outboundSchema;
}

/** @internal */
export const ArticleAttachment$inboundSchema: z.ZodType<
  ArticleAttachment,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  name: z.string().optional(),
  size: z.number().int().optional(),
  type: ArticleAttachmentType$inboundSchema.optional(),
  link: Link$inboundSchema.optional(),
});

/** @internal */
export type ArticleAttachment$Outbound = {
  id?: string | undefined;
  name?: string | undefined;
  size?: number | undefined;
  type?: string | undefined;
  link?: Link$Outbound | undefined;
};

/** @internal */
export const ArticleAttachment$outboundSchema: z.ZodType<
  ArticleAttachment$Outbound,
  z.ZodTypeDef,
  ArticleAttachment
> = z.object({
  id: z.string().optional(),
  name: z.string().optional(),
  size: z.number().int().optional(),
  type: ArticleAttachmentType$outboundSchema.optional(),
  link: Link$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ArticleAttachment$ {
  /** @deprecated use `ArticleAttachment$inboundSchema` instead. */
  export const inboundSchema = ArticleAttachment$inboundSchema;
  /** @deprecated use `ArticleAttachment$outboundSchema` instead. */
  export const outboundSchema = ArticleAttachment$outboundSchema;
  /** @deprecated use `ArticleAttachment$Outbound` instead. */
  export type Outbound = ArticleAttachment$Outbound;
}

export function articleAttachmentToJSON(
  articleAttachment: ArticleAttachment,
): string {
  return JSON.stringify(
    ArticleAttachment$outboundSchema.parse(articleAttachment),
  );
}

export function articleAttachmentFromJSON(
  jsonString: string,
): SafeParseResult<ArticleAttachment, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ArticleAttachment$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ArticleAttachment' from JSON`,
  );
}
