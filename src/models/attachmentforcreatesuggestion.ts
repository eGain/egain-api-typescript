/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

/**
 * This schema contains the definition of an Attachment.
 */
export type AttachmentForCreateSuggestion = {
  /**
   * The alternate Id of the Attachment that was obtained after calling **[Generate signed URL to upload an attachment](https://apidev.egain.com/api-catalog/core-filemgr/api-bundled/operation/generatePreUploadURL/)**.
   *
   * @remarks
   */
  altId?: string | undefined;
};

/** @internal */
export const AttachmentForCreateSuggestion$inboundSchema: z.ZodType<
  AttachmentForCreateSuggestion,
  z.ZodTypeDef,
  unknown
> = z.object({
  altId: z.string().optional(),
});

/** @internal */
export type AttachmentForCreateSuggestion$Outbound = {
  altId?: string | undefined;
};

/** @internal */
export const AttachmentForCreateSuggestion$outboundSchema: z.ZodType<
  AttachmentForCreateSuggestion$Outbound,
  z.ZodTypeDef,
  AttachmentForCreateSuggestion
> = z.object({
  altId: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AttachmentForCreateSuggestion$ {
  /** @deprecated use `AttachmentForCreateSuggestion$inboundSchema` instead. */
  export const inboundSchema = AttachmentForCreateSuggestion$inboundSchema;
  /** @deprecated use `AttachmentForCreateSuggestion$outboundSchema` instead. */
  export const outboundSchema = AttachmentForCreateSuggestion$outboundSchema;
  /** @deprecated use `AttachmentForCreateSuggestion$Outbound` instead. */
  export type Outbound = AttachmentForCreateSuggestion$Outbound;
}

export function attachmentForCreateSuggestionToJSON(
  attachmentForCreateSuggestion: AttachmentForCreateSuggestion,
): string {
  return JSON.stringify(
    AttachmentForCreateSuggestion$outboundSchema.parse(
      attachmentForCreateSuggestion,
    ),
  );
}

export function attachmentForCreateSuggestionFromJSON(
  jsonString: string,
): SafeParseResult<AttachmentForCreateSuggestion, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AttachmentForCreateSuggestion$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AttachmentForCreateSuggestion' from JSON`,
  );
}
