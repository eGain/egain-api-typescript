/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import {
  DetailField,
  DetailField$inboundSchema,
  DetailField$Outbound,
  DetailField$outboundSchema,
} from "./detailfield.js";
import {
  DisplayField,
  DisplayField$inboundSchema,
  DisplayField$Outbound,
  DisplayField$outboundSchema,
} from "./displayfield.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type VirtualCase = {
  /**
   * ID of the case
   */
  id?: string | undefined;
  /**
   * detail fields
   */
  detailField?: Array<DetailField> | undefined;
  /**
   * display fields
   */
  displayField?: Array<DisplayField> | undefined;
  /**
   * Cluster id
   */
  dynamicClusterId?: string | undefined;
  /**
   * name of the case
   */
  title?: string | undefined;
  /**
   * virtual case id
   */
  virtualCaseId?: string | undefined;
};

/** @internal */
export const VirtualCase$inboundSchema: z.ZodType<
  VirtualCase,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  detailField: z.array(DetailField$inboundSchema).optional(),
  displayField: z.array(DisplayField$inboundSchema).optional(),
  dynamicClusterId: z.string().optional(),
  title: z.string().optional(),
  virtualCaseId: z.string().optional(),
});

/** @internal */
export type VirtualCase$Outbound = {
  id?: string | undefined;
  detailField?: Array<DetailField$Outbound> | undefined;
  displayField?: Array<DisplayField$Outbound> | undefined;
  dynamicClusterId?: string | undefined;
  title?: string | undefined;
  virtualCaseId?: string | undefined;
};

/** @internal */
export const VirtualCase$outboundSchema: z.ZodType<
  VirtualCase$Outbound,
  z.ZodTypeDef,
  VirtualCase
> = z.object({
  id: z.string().optional(),
  detailField: z.array(DetailField$outboundSchema).optional(),
  displayField: z.array(DisplayField$outboundSchema).optional(),
  dynamicClusterId: z.string().optional(),
  title: z.string().optional(),
  virtualCaseId: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VirtualCase$ {
  /** @deprecated use `VirtualCase$inboundSchema` instead. */
  export const inboundSchema = VirtualCase$inboundSchema;
  /** @deprecated use `VirtualCase$outboundSchema` instead. */
  export const outboundSchema = VirtualCase$outboundSchema;
  /** @deprecated use `VirtualCase$Outbound` instead. */
  export type Outbound = VirtualCase$Outbound;
}

export function virtualCaseToJSON(virtualCase: VirtualCase): string {
  return JSON.stringify(VirtualCase$outboundSchema.parse(virtualCase));
}

export function virtualCaseFromJSON(
  jsonString: string,
): SafeParseResult<VirtualCase, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => VirtualCase$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'VirtualCase' from JSON`,
  );
}
