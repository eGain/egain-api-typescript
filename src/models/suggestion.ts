/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import {
  CustomAttribute,
  CustomAttribute$inboundSchema,
  CustomAttribute$Outbound,
  CustomAttribute$outboundSchema,
} from "./customattribute.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  Link,
  Link$inboundSchema,
  Link$Outbound,
  Link$outboundSchema,
} from "./link.js";
import {
  ModifiedBy,
  ModifiedBy$inboundSchema,
  ModifiedBy$Outbound,
  ModifiedBy$outboundSchema,
} from "./modifiedby.js";

/**
 * The status of the Suggestion.
 *
 * @remarks
 * <li>1 : suggested.</li>
 * <li>2 : pending</li>
 * <li>3 : declined</li>
 * <li>4 : approved</li>
 */
export type SuggestionL10NString = {
  /**
   * A string that indicates the value.
   */
  value?: string | undefined;
  /**
   * Localized string of the value element.
   */
  displayValue?: string | undefined;
};

/**
 * The language that describes the details of the resource. Resources available in different languages may differ from each other.
 */
export const SuggestionCode = {
  EnUS: "en-US",
  EnGB: "en-GB",
  FRFR: "fr-FR",
  ESES: "es-ES",
  ITIT: "it-IT",
  DEDE: "de-DE",
  NLNL: "nl-NL",
  PtBR: "pt-BR",
  PTPT: "pt-PT",
  DaDK: "da-DK",
  SvSE: "sv-SE",
  RURU: "ru-RU",
  FrCA: "fr-CA",
  ZhCN: "zh-CN",
  JaJP: "ja-JP",
  KoKR: "ko-KR",
} as const;
/**
 * The language that describes the details of the resource. Resources available in different languages may differ from each other.
 */
export type SuggestionCode = ClosedEnum<typeof SuggestionCode>;

/**
 * The name of the language.
 */
export const Label = {
  English: "English",
  French: "French",
  Spanish: "Spanish",
  Italian: "Italian",
  German: "German",
  Dutch: "Dutch",
  Portuguese: "Portuguese",
  Danish: "Danish",
  Swedish: "Swedish",
  Russian: "Russian",
  Chinese: "Chinese",
  Japanese: "Japanese",
  Korean: "Korean",
} as const;
/**
 * The name of the language.
 */
export type Label = ClosedEnum<typeof Label>;

/**
 * The knowledge base language in which the Suggestion was created.
 */
export type SuggestionLanguage = {
  /**
   * The language that describes the details of the resource. Resources available in different languages may differ from each other.
   */
  code: SuggestionCode;
  /**
   * The name of the language.
   */
  label?: Label | undefined;
};

/**
 * This schema contains information about a Suggestion.
 */
export type Suggestion = {
  /**
   * The ID of the Suggestion. A Suggestion ID is composed of a 2-4 letter prefix, followed by a dash and 4-15 digits.
   */
  id: string;
  /**
   * Defines the relationship between this resource and another object.
   */
  link?: Link | undefined;
  /**
   * The name of the Suggestion.
   */
  name: string;
  /**
   * The description of the Suggestion.
   */
  description?: string | undefined;
  /**
   * The content of the Suggestion.
   */
  content?: string | undefined;
  /**
   * If true, the Suggestion has one or more Related Articles.
   */
  hasRelatedArticles?: boolean | undefined;
  /**
   * The status of the Suggestion.
   *
   * @remarks
   * <li>1 : suggested.</li>
   * <li>2 : pending</li>
   * <li>3 : declined</li>
   * <li>4 : approved</li>
   */
  status?: SuggestionL10NString | undefined;
  modifiedBy?: ModifiedBy | undefined;
  /**
   * The last modified date and last modifying user of the Suggestion.
   */
  modifiedDate?: Date | undefined;
  /**
   * Indicates whether the Suggestion has any Attachments.
   */
  hasAttachments?: boolean | undefined;
  /**
   * Indicates whether the Suggestion has any comments.
   */
  hasComments?: boolean | undefined;
  /**
   * The knowledge base language in which the Suggestion was created.
   */
  language?: SuggestionLanguage | undefined;
  /**
   * Custom Attributes of the Suggestion.
   */
  customAttributes?: Array<CustomAttribute> | undefined;
};

/** @internal */
export const SuggestionL10NString$inboundSchema: z.ZodType<
  SuggestionL10NString,
  z.ZodTypeDef,
  unknown
> = z.object({
  value: z.string().optional(),
  displayValue: z.string().optional(),
});

/** @internal */
export type SuggestionL10NString$Outbound = {
  value?: string | undefined;
  displayValue?: string | undefined;
};

/** @internal */
export const SuggestionL10NString$outboundSchema: z.ZodType<
  SuggestionL10NString$Outbound,
  z.ZodTypeDef,
  SuggestionL10NString
> = z.object({
  value: z.string().optional(),
  displayValue: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SuggestionL10NString$ {
  /** @deprecated use `SuggestionL10NString$inboundSchema` instead. */
  export const inboundSchema = SuggestionL10NString$inboundSchema;
  /** @deprecated use `SuggestionL10NString$outboundSchema` instead. */
  export const outboundSchema = SuggestionL10NString$outboundSchema;
  /** @deprecated use `SuggestionL10NString$Outbound` instead. */
  export type Outbound = SuggestionL10NString$Outbound;
}

export function suggestionL10NStringToJSON(
  suggestionL10NString: SuggestionL10NString,
): string {
  return JSON.stringify(
    SuggestionL10NString$outboundSchema.parse(suggestionL10NString),
  );
}

export function suggestionL10NStringFromJSON(
  jsonString: string,
): SafeParseResult<SuggestionL10NString, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SuggestionL10NString$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SuggestionL10NString' from JSON`,
  );
}

/** @internal */
export const SuggestionCode$inboundSchema: z.ZodNativeEnum<
  typeof SuggestionCode
> = z.nativeEnum(SuggestionCode);

/** @internal */
export const SuggestionCode$outboundSchema: z.ZodNativeEnum<
  typeof SuggestionCode
> = SuggestionCode$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SuggestionCode$ {
  /** @deprecated use `SuggestionCode$inboundSchema` instead. */
  export const inboundSchema = SuggestionCode$inboundSchema;
  /** @deprecated use `SuggestionCode$outboundSchema` instead. */
  export const outboundSchema = SuggestionCode$outboundSchema;
}

/** @internal */
export const Label$inboundSchema: z.ZodNativeEnum<typeof Label> = z.nativeEnum(
  Label,
);

/** @internal */
export const Label$outboundSchema: z.ZodNativeEnum<typeof Label> =
  Label$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Label$ {
  /** @deprecated use `Label$inboundSchema` instead. */
  export const inboundSchema = Label$inboundSchema;
  /** @deprecated use `Label$outboundSchema` instead. */
  export const outboundSchema = Label$outboundSchema;
}

/** @internal */
export const SuggestionLanguage$inboundSchema: z.ZodType<
  SuggestionLanguage,
  z.ZodTypeDef,
  unknown
> = z.object({
  code: SuggestionCode$inboundSchema,
  label: Label$inboundSchema.optional(),
});

/** @internal */
export type SuggestionLanguage$Outbound = {
  code: string;
  label?: string | undefined;
};

/** @internal */
export const SuggestionLanguage$outboundSchema: z.ZodType<
  SuggestionLanguage$Outbound,
  z.ZodTypeDef,
  SuggestionLanguage
> = z.object({
  code: SuggestionCode$outboundSchema,
  label: Label$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SuggestionLanguage$ {
  /** @deprecated use `SuggestionLanguage$inboundSchema` instead. */
  export const inboundSchema = SuggestionLanguage$inboundSchema;
  /** @deprecated use `SuggestionLanguage$outboundSchema` instead. */
  export const outboundSchema = SuggestionLanguage$outboundSchema;
  /** @deprecated use `SuggestionLanguage$Outbound` instead. */
  export type Outbound = SuggestionLanguage$Outbound;
}

export function suggestionLanguageToJSON(
  suggestionLanguage: SuggestionLanguage,
): string {
  return JSON.stringify(
    SuggestionLanguage$outboundSchema.parse(suggestionLanguage),
  );
}

export function suggestionLanguageFromJSON(
  jsonString: string,
): SafeParseResult<SuggestionLanguage, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SuggestionLanguage$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SuggestionLanguage' from JSON`,
  );
}

/** @internal */
export const Suggestion$inboundSchema: z.ZodType<
  Suggestion,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  link: Link$inboundSchema.optional(),
  name: z.string(),
  description: z.string().optional(),
  content: z.string().optional(),
  hasRelatedArticles: z.boolean().optional(),
  status: z.lazy(() => SuggestionL10NString$inboundSchema).optional(),
  modifiedBy: ModifiedBy$inboundSchema.optional(),
  modifiedDate: z.string().datetime({ offset: true }).transform(v =>
    new Date(v)
  ).optional(),
  hasAttachments: z.boolean().optional(),
  hasComments: z.boolean().optional(),
  language: z.lazy(() => SuggestionLanguage$inboundSchema).optional(),
  customAttributes: z.array(CustomAttribute$inboundSchema).optional(),
});

/** @internal */
export type Suggestion$Outbound = {
  id: string;
  link?: Link$Outbound | undefined;
  name: string;
  description?: string | undefined;
  content?: string | undefined;
  hasRelatedArticles?: boolean | undefined;
  status?: SuggestionL10NString$Outbound | undefined;
  modifiedBy?: ModifiedBy$Outbound | undefined;
  modifiedDate?: string | undefined;
  hasAttachments?: boolean | undefined;
  hasComments?: boolean | undefined;
  language?: SuggestionLanguage$Outbound | undefined;
  customAttributes?: Array<CustomAttribute$Outbound> | undefined;
};

/** @internal */
export const Suggestion$outboundSchema: z.ZodType<
  Suggestion$Outbound,
  z.ZodTypeDef,
  Suggestion
> = z.object({
  id: z.string(),
  link: Link$outboundSchema.optional(),
  name: z.string(),
  description: z.string().optional(),
  content: z.string().optional(),
  hasRelatedArticles: z.boolean().optional(),
  status: z.lazy(() => SuggestionL10NString$outboundSchema).optional(),
  modifiedBy: ModifiedBy$outboundSchema.optional(),
  modifiedDate: z.date().transform(v => v.toISOString()).optional(),
  hasAttachments: z.boolean().optional(),
  hasComments: z.boolean().optional(),
  language: z.lazy(() => SuggestionLanguage$outboundSchema).optional(),
  customAttributes: z.array(CustomAttribute$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Suggestion$ {
  /** @deprecated use `Suggestion$inboundSchema` instead. */
  export const inboundSchema = Suggestion$inboundSchema;
  /** @deprecated use `Suggestion$outboundSchema` instead. */
  export const outboundSchema = Suggestion$outboundSchema;
  /** @deprecated use `Suggestion$Outbound` instead. */
  export type Outbound = Suggestion$Outbound;
}

export function suggestionToJSON(suggestion: Suggestion): string {
  return JSON.stringify(Suggestion$outboundSchema.parse(suggestion));
}

export function suggestionFromJSON(
  jsonString: string,
): SafeParseResult<Suggestion, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Suggestion$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Suggestion' from JSON`,
  );
}
