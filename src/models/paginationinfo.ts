/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  Link,
  Link$inboundSchema,
  Link$Outbound,
  Link$outboundSchema,
} from "./link.js";

export type PaginationInfo = {
  /**
   * The total number of pages.
   */
  count: number;
  /**
   * The page number requested. Page numbers start from 1.
   */
  pagenum: number;
  /**
   * The number of objects requested per page. The maximum number of objects per page is 75.
   */
  pagesize: number;
  /**
   * Can include the *prev* and *next* link.
   */
  link?: Array<Link> | undefined;
};

/** @internal */
export const PaginationInfo$inboundSchema: z.ZodType<
  PaginationInfo,
  z.ZodTypeDef,
  unknown
> = z.object({
  count: z.number().int(),
  pagenum: z.number().int(),
  pagesize: z.number().int(),
  link: z.array(Link$inboundSchema).optional(),
});

/** @internal */
export type PaginationInfo$Outbound = {
  count: number;
  pagenum: number;
  pagesize: number;
  link?: Array<Link$Outbound> | undefined;
};

/** @internal */
export const PaginationInfo$outboundSchema: z.ZodType<
  PaginationInfo$Outbound,
  z.ZodTypeDef,
  PaginationInfo
> = z.object({
  count: z.number().int(),
  pagenum: z.number().int(),
  pagesize: z.number().int(),
  link: z.array(Link$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaginationInfo$ {
  /** @deprecated use `PaginationInfo$inboundSchema` instead. */
  export const inboundSchema = PaginationInfo$inboundSchema;
  /** @deprecated use `PaginationInfo$outboundSchema` instead. */
  export const outboundSchema = PaginationInfo$outboundSchema;
  /** @deprecated use `PaginationInfo$Outbound` instead. */
  export type Outbound = PaginationInfo$Outbound;
}

export function paginationInfoToJSON(paginationInfo: PaginationInfo): string {
  return JSON.stringify(PaginationInfo$outboundSchema.parse(paginationInfo));
}

export function paginationInfoFromJSON(
  jsonString: string,
): SafeParseResult<PaginationInfo, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PaginationInfo$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PaginationInfo' from JSON`,
  );
}
