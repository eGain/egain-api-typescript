/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

/**
 * The custom attribute's type.
 */
export const CustomAttributeType = {
  String: "STRING",
  Integer: "INTEGER",
  Boolean: "BOOLEAN",
  Datetime: "DATETIME",
} as const;
/**
 * The custom attribute's type.
 */
export type CustomAttributeType = ClosedEnum<typeof CustomAttributeType>;

export type CustomAttribute = {
  /**
   * The custom attribute's name.
   */
  name?: string | undefined;
  /**
   * The custom attribute's values.
   */
  value?: Array<string> | undefined;
  /**
   * The custom attribute's type.
   */
  type?: CustomAttributeType | undefined;
};

/** @internal */
export const CustomAttributeType$inboundSchema: z.ZodNativeEnum<
  typeof CustomAttributeType
> = z.nativeEnum(CustomAttributeType);

/** @internal */
export const CustomAttributeType$outboundSchema: z.ZodNativeEnum<
  typeof CustomAttributeType
> = CustomAttributeType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CustomAttributeType$ {
  /** @deprecated use `CustomAttributeType$inboundSchema` instead. */
  export const inboundSchema = CustomAttributeType$inboundSchema;
  /** @deprecated use `CustomAttributeType$outboundSchema` instead. */
  export const outboundSchema = CustomAttributeType$outboundSchema;
}

/** @internal */
export const CustomAttribute$inboundSchema: z.ZodType<
  CustomAttribute,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string().optional(),
  value: z.array(z.string()).optional(),
  type: CustomAttributeType$inboundSchema.optional(),
});

/** @internal */
export type CustomAttribute$Outbound = {
  name?: string | undefined;
  value?: Array<string> | undefined;
  type?: string | undefined;
};

/** @internal */
export const CustomAttribute$outboundSchema: z.ZodType<
  CustomAttribute$Outbound,
  z.ZodTypeDef,
  CustomAttribute
> = z.object({
  name: z.string().optional(),
  value: z.array(z.string()).optional(),
  type: CustomAttributeType$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CustomAttribute$ {
  /** @deprecated use `CustomAttribute$inboundSchema` instead. */
  export const inboundSchema = CustomAttribute$inboundSchema;
  /** @deprecated use `CustomAttribute$outboundSchema` instead. */
  export const outboundSchema = CustomAttribute$outboundSchema;
  /** @deprecated use `CustomAttribute$Outbound` instead. */
  export type Outbound = CustomAttribute$Outbound;
}

export function customAttributeToJSON(
  customAttribute: CustomAttribute,
): string {
  return JSON.stringify(CustomAttribute$outboundSchema.parse(customAttribute));
}

export function customAttributeFromJSON(
  jsonString: string,
): SafeParseResult<CustomAttribute, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CustomAttribute$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CustomAttribute' from JSON`,
  );
}
