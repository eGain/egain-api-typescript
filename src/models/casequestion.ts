/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type CaseQuestion = {
  /**
   * The numerical ID of the question
   */
  id?: string | undefined;
};

/** @internal */
export const CaseQuestion$inboundSchema: z.ZodType<
  CaseQuestion,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
});

/** @internal */
export type CaseQuestion$Outbound = {
  id?: string | undefined;
};

/** @internal */
export const CaseQuestion$outboundSchema: z.ZodType<
  CaseQuestion$Outbound,
  z.ZodTypeDef,
  CaseQuestion
> = z.object({
  id: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CaseQuestion$ {
  /** @deprecated use `CaseQuestion$inboundSchema` instead. */
  export const inboundSchema = CaseQuestion$inboundSchema;
  /** @deprecated use `CaseQuestion$outboundSchema` instead. */
  export const outboundSchema = CaseQuestion$outboundSchema;
  /** @deprecated use `CaseQuestion$Outbound` instead. */
  export type Outbound = CaseQuestion$Outbound;
}

export function caseQuestionToJSON(caseQuestion: CaseQuestion): string {
  return JSON.stringify(CaseQuestion$outboundSchema.parse(caseQuestion));
}

export function caseQuestionFromJSON(
  jsonString: string,
): SafeParseResult<CaseQuestion, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CaseQuestion$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CaseQuestion' from JSON`,
  );
}
