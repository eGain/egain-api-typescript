/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type Bookmark = {
  /**
   * The ID of the portal associated with the bookmark.<br><br>A portal ID is composed of a 2-4 letter prefix, followed by a dash and 2-4 15 digits.
   */
  portalId?: string | undefined;
  /**
   * The ID of the article or topic associated with this bookmark. A case ID or an article ID is composed of a 2-4 letter prefix, followed by a dash and 15 digits.
   */
  resourceId: string;
  /**
   * The ID of the bookmark.
   */
  id?: string | undefined;
  /**
   * The name of the bookmark.
   */
  bookmarkName?: string | undefined;
  /**
   * Determines the type of resource:
   *
   * @remarks
   * <li>1 - Article</li>
   * <li>2 - Topic</li>
   * <li>3 - External Content</li>
   */
  resourceType?: number | undefined;
  /**
   * The name of the resource associated with the bookmark.<br><br>This attribute is only available for article and topic bookmarks.
   */
  resourceName?: string | undefined;
  /**
   * The ID of the external content.<br><br>This attribute must be provided if <code>resourceType</code> is set to "3 - External Content".
   */
  externalContentId?: string | undefined;
};

/** @internal */
export const Bookmark$inboundSchema: z.ZodType<
  Bookmark,
  z.ZodTypeDef,
  unknown
> = z.object({
  portalId: z.string().optional(),
  resourceId: z.string(),
  id: z.string().optional(),
  bookmarkName: z.string().optional(),
  resourceType: z.number().int().optional(),
  resourceName: z.string().optional(),
  externalContentId: z.string().optional(),
});

/** @internal */
export type Bookmark$Outbound = {
  portalId?: string | undefined;
  resourceId: string;
  id?: string | undefined;
  bookmarkName?: string | undefined;
  resourceType?: number | undefined;
  resourceName?: string | undefined;
  externalContentId?: string | undefined;
};

/** @internal */
export const Bookmark$outboundSchema: z.ZodType<
  Bookmark$Outbound,
  z.ZodTypeDef,
  Bookmark
> = z.object({
  portalId: z.string().optional(),
  resourceId: z.string(),
  id: z.string().optional(),
  bookmarkName: z.string().optional(),
  resourceType: z.number().int().optional(),
  resourceName: z.string().optional(),
  externalContentId: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Bookmark$ {
  /** @deprecated use `Bookmark$inboundSchema` instead. */
  export const inboundSchema = Bookmark$inboundSchema;
  /** @deprecated use `Bookmark$outboundSchema` instead. */
  export const outboundSchema = Bookmark$outboundSchema;
  /** @deprecated use `Bookmark$Outbound` instead. */
  export type Outbound = Bookmark$Outbound;
}

export function bookmarkToJSON(bookmark: Bookmark): string {
  return JSON.stringify(Bookmark$outboundSchema.parse(bookmark));
}

export function bookmarkFromJSON(
  jsonString: string,
): SafeParseResult<Bookmark, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Bookmark$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Bookmark' from JSON`,
  );
}
