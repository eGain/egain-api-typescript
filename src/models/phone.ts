/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

/**
 * Phone
 */
export type Phone = {
  /**
   * Phone number of customer
   */
  phoneNo?: string | undefined;
};

/** @internal */
export const Phone$inboundSchema: z.ZodType<Phone, z.ZodTypeDef, unknown> = z
  .object({
    phoneNo: z.string().optional(),
  });

/** @internal */
export type Phone$Outbound = {
  phoneNo?: string | undefined;
};

/** @internal */
export const Phone$outboundSchema: z.ZodType<
  Phone$Outbound,
  z.ZodTypeDef,
  Phone
> = z.object({
  phoneNo: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Phone$ {
  /** @deprecated use `Phone$inboundSchema` instead. */
  export const inboundSchema = Phone$inboundSchema;
  /** @deprecated use `Phone$outboundSchema` instead. */
  export const outboundSchema = Phone$outboundSchema;
  /** @deprecated use `Phone$Outbound` instead. */
  export type Outbound = Phone$Outbound;
}

export function phoneToJSON(phone: Phone): string {
  return JSON.stringify(Phone$outboundSchema.parse(phone));
}

export function phoneFromJSON(
  jsonString: string,
): SafeParseResult<Phone, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Phone$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Phone' from JSON`,
  );
}
