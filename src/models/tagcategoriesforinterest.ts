/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import {
  ComponentsSchemasTagCategory,
  ComponentsSchemasTagCategory$inboundSchema,
  ComponentsSchemasTagCategory$Outbound,
  ComponentsSchemasTagCategory$outboundSchema,
} from "./componentsschemastagcategory.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type TagCategoriesForInterest = {
  tagCategory?: Array<ComponentsSchemasTagCategory> | undefined;
};

/** @internal */
export const TagCategoriesForInterest$inboundSchema: z.ZodType<
  TagCategoriesForInterest,
  z.ZodTypeDef,
  unknown
> = z.object({
  tagCategory: z.array(ComponentsSchemasTagCategory$inboundSchema).optional(),
});

/** @internal */
export type TagCategoriesForInterest$Outbound = {
  tagCategory?: Array<ComponentsSchemasTagCategory$Outbound> | undefined;
};

/** @internal */
export const TagCategoriesForInterest$outboundSchema: z.ZodType<
  TagCategoriesForInterest$Outbound,
  z.ZodTypeDef,
  TagCategoriesForInterest
> = z.object({
  tagCategory: z.array(ComponentsSchemasTagCategory$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TagCategoriesForInterest$ {
  /** @deprecated use `TagCategoriesForInterest$inboundSchema` instead. */
  export const inboundSchema = TagCategoriesForInterest$inboundSchema;
  /** @deprecated use `TagCategoriesForInterest$outboundSchema` instead. */
  export const outboundSchema = TagCategoriesForInterest$outboundSchema;
  /** @deprecated use `TagCategoriesForInterest$Outbound` instead. */
  export type Outbound = TagCategoriesForInterest$Outbound;
}

export function tagCategoriesForInterestToJSON(
  tagCategoriesForInterest: TagCategoriesForInterest,
): string {
  return JSON.stringify(
    TagCategoriesForInterest$outboundSchema.parse(tagCategoriesForInterest),
  );
}

export function tagCategoriesForInterestFromJSON(
  jsonString: string,
): SafeParseResult<TagCategoriesForInterest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TagCategoriesForInterest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TagCategoriesForInterest' from JSON`,
  );
}
