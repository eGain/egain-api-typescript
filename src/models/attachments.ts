/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import {
  AttachmentSummary,
  AttachmentSummary$inboundSchema,
  AttachmentSummary$Outbound,
  AttachmentSummary$outboundSchema,
} from "./attachmentsummary.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  Link,
  Link$inboundSchema,
  Link$Outbound,
  Link$outboundSchema,
} from "./link.js";

/**
 * This schema contains the definition of Attachments.
 */
export type Attachments = {
  /**
   * The number of Attachments in the list.
   */
  count?: number | undefined;
  /**
   * Defines the relationship between this resource and another object.
   */
  link?: Link | undefined;
  /**
   * The list of Attachments.
   */
  attachments?: Array<AttachmentSummary> | undefined;
};

/** @internal */
export const Attachments$inboundSchema: z.ZodType<
  Attachments,
  z.ZodTypeDef,
  unknown
> = z.object({
  count: z.number().int().optional(),
  link: Link$inboundSchema.optional(),
  Attachments: z.array(AttachmentSummary$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "Attachments": "attachments",
  });
});

/** @internal */
export type Attachments$Outbound = {
  count?: number | undefined;
  link?: Link$Outbound | undefined;
  Attachments?: Array<AttachmentSummary$Outbound> | undefined;
};

/** @internal */
export const Attachments$outboundSchema: z.ZodType<
  Attachments$Outbound,
  z.ZodTypeDef,
  Attachments
> = z.object({
  count: z.number().int().optional(),
  link: Link$outboundSchema.optional(),
  attachments: z.array(AttachmentSummary$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    attachments: "Attachments",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Attachments$ {
  /** @deprecated use `Attachments$inboundSchema` instead. */
  export const inboundSchema = Attachments$inboundSchema;
  /** @deprecated use `Attachments$outboundSchema` instead. */
  export const outboundSchema = Attachments$outboundSchema;
  /** @deprecated use `Attachments$Outbound` instead. */
  export type Outbound = Attachments$Outbound;
}

export function attachmentsToJSON(attachments: Attachments): string {
  return JSON.stringify(Attachments$outboundSchema.parse(attachments));
}

export function attachmentsFromJSON(
  jsonString: string,
): SafeParseResult<Attachments, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Attachments$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Attachments' from JSON`,
  );
}
