/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  SchemasLink,
  SchemasLink$inboundSchema,
  SchemasLink$Outbound,
  SchemasLink$outboundSchema,
} from "./schemaslink.js";

/**
 * This schema contains the topic ID and name of the Folder. This is used by FolderBreadcrumb.
 */
export type FolderSummary = {
  /**
   * ID of the folder.
   */
  id?: number | undefined;
  /**
   * Name of the folder.
   */
  name?: string | undefined;
  link?: SchemasLink | undefined;
};

/** @internal */
export const FolderSummary$inboundSchema: z.ZodType<
  FolderSummary,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.number().int().optional(),
  name: z.string().optional(),
  link: SchemasLink$inboundSchema.optional(),
});

/** @internal */
export type FolderSummary$Outbound = {
  id?: number | undefined;
  name?: string | undefined;
  link?: SchemasLink$Outbound | undefined;
};

/** @internal */
export const FolderSummary$outboundSchema: z.ZodType<
  FolderSummary$Outbound,
  z.ZodTypeDef,
  FolderSummary
> = z.object({
  id: z.number().int().optional(),
  name: z.string().optional(),
  link: SchemasLink$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FolderSummary$ {
  /** @deprecated use `FolderSummary$inboundSchema` instead. */
  export const inboundSchema = FolderSummary$inboundSchema;
  /** @deprecated use `FolderSummary$outboundSchema` instead. */
  export const outboundSchema = FolderSummary$outboundSchema;
  /** @deprecated use `FolderSummary$Outbound` instead. */
  export type Outbound = FolderSummary$Outbound;
}

export function folderSummaryToJSON(folderSummary: FolderSummary): string {
  return JSON.stringify(FolderSummary$outboundSchema.parse(folderSummary));
}

export function folderSummaryFromJSON(
  jsonString: string,
): SafeParseResult<FolderSummary, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FolderSummary$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FolderSummary' from JSON`,
  );
}
