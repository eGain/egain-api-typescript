/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import {
  ArticleListResult,
  ArticleListResult$inboundSchema,
  ArticleListResult$Outbound,
  ArticleListResult$outboundSchema,
} from "./articlelistresult.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

/**
 * Instances of Artice List
 */
export type ArticleListsResult = {
  articleLists?: Array<ArticleListResult> | undefined;
};

/** @internal */
export const ArticleListsResult$inboundSchema: z.ZodType<
  ArticleListsResult,
  z.ZodTypeDef,
  unknown
> = z.object({
  articleLists: z.array(ArticleListResult$inboundSchema).optional(),
});

/** @internal */
export type ArticleListsResult$Outbound = {
  articleLists?: Array<ArticleListResult$Outbound> | undefined;
};

/** @internal */
export const ArticleListsResult$outboundSchema: z.ZodType<
  ArticleListsResult$Outbound,
  z.ZodTypeDef,
  ArticleListsResult
> = z.object({
  articleLists: z.array(ArticleListResult$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ArticleListsResult$ {
  /** @deprecated use `ArticleListsResult$inboundSchema` instead. */
  export const inboundSchema = ArticleListsResult$inboundSchema;
  /** @deprecated use `ArticleListsResult$outboundSchema` instead. */
  export const outboundSchema = ArticleListsResult$outboundSchema;
  /** @deprecated use `ArticleListsResult$Outbound` instead. */
  export type Outbound = ArticleListsResult$Outbound;
}

export function articleListsResultToJSON(
  articleListsResult: ArticleListsResult,
): string {
  return JSON.stringify(
    ArticleListsResult$outboundSchema.parse(articleListsResult),
  );
}

export function articleListsResultFromJSON(
  jsonString: string,
): SafeParseResult<ArticleListsResult, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ArticleListsResult$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ArticleListsResult' from JSON`,
  );
}
