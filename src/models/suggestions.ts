/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  PaginationInfo,
  PaginationInfo$inboundSchema,
  PaginationInfo$Outbound,
  PaginationInfo$outboundSchema,
} from "./paginationinfo.js";
import {
  Suggestion,
  Suggestion$inboundSchema,
  Suggestion$Outbound,
  Suggestion$outboundSchema,
} from "./suggestion.js";

/**
 * One or more instances of Suggestion.
 */
export type Suggestions = {
  suggestion?: Array<Suggestion> | undefined;
  paginationInfo?: PaginationInfo | undefined;
};

/** @internal */
export const Suggestions$inboundSchema: z.ZodType<
  Suggestions,
  z.ZodTypeDef,
  unknown
> = z.object({
  Suggestion: z.array(Suggestion$inboundSchema).optional(),
  paginationInfo: PaginationInfo$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "Suggestion": "suggestion",
  });
});

/** @internal */
export type Suggestions$Outbound = {
  Suggestion?: Array<Suggestion$Outbound> | undefined;
  paginationInfo?: PaginationInfo$Outbound | undefined;
};

/** @internal */
export const Suggestions$outboundSchema: z.ZodType<
  Suggestions$Outbound,
  z.ZodTypeDef,
  Suggestions
> = z.object({
  suggestion: z.array(Suggestion$outboundSchema).optional(),
  paginationInfo: PaginationInfo$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    suggestion: "Suggestion",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Suggestions$ {
  /** @deprecated use `Suggestions$inboundSchema` instead. */
  export const inboundSchema = Suggestions$inboundSchema;
  /** @deprecated use `Suggestions$outboundSchema` instead. */
  export const outboundSchema = Suggestions$outboundSchema;
  /** @deprecated use `Suggestions$Outbound` instead. */
  export type Outbound = Suggestions$Outbound;
}

export function suggestionsToJSON(suggestions: Suggestions): string {
  return JSON.stringify(Suggestions$outboundSchema.parse(suggestions));
}

export function suggestionsFromJSON(
  jsonString: string,
): SafeParseResult<Suggestions, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Suggestions$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Suggestions' from JSON`,
  );
}
