/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import * as models from "../index.js";
import { EgainError } from "./egainerror.js";

/**
 * Preconditions failed
 */
export type SchemasWSErrorCommonData = {
  /**
   * String that follow the pattern {integer}-{integer}.
   *
   * @remarks
   *   * The first part is http status code.  The code is unique as a whole. Nothing common between 400-101 and 404-101
   */
  code: string;
  /**
   * Response explaining what happened
   */
  developerMessage: string;
  details?: Array<models.SchemasWSErrorCommonDetail> | undefined;
  /**
   * UI friendly message only supported by some API.
   *
   * @remarks
   *   * Client must request explicitly by passing X-egain-error-message=yes header
   */
  userMessage?: string | undefined;
};

/**
 * Preconditions failed
 */
export class SchemasWSErrorCommon extends EgainError {
  /**
   * String that follow the pattern {integer}-{integer}.
   *
   * @remarks
   *   * The first part is http status code.  The code is unique as a whole. Nothing common between 400-101 and 404-101
   */
  code: string;
  /**
   * Response explaining what happened
   */
  developerMessage: string;
  details?: Array<models.SchemasWSErrorCommonDetail> | undefined;
  /**
   * UI friendly message only supported by some API.
   *
   * @remarks
   *   * Client must request explicitly by passing X-egain-error-message=yes header
   */
  userMessage?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: SchemasWSErrorCommonData;

  constructor(
    err: SchemasWSErrorCommonData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.code = err.code;
    this.developerMessage = err.developerMessage;
    if (err.details != null) this.details = err.details;
    if (err.userMessage != null) this.userMessage = err.userMessage;

    this.name = "SchemasWSErrorCommon";
  }
}

/** @internal */
export const SchemasWSErrorCommon$inboundSchema: z.ZodType<
  SchemasWSErrorCommon,
  z.ZodTypeDef,
  unknown
> = z.object({
  code: z.string(),
  developerMessage: z.string(),
  details: z.array(
    z.lazy(() => models.SchemasWSErrorCommonDetail$inboundSchema),
  ).optional(),
  userMessage: z.string().optional(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new SchemasWSErrorCommon(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type SchemasWSErrorCommon$Outbound = {
  code: string;
  developerMessage: string;
  details?: Array<models.SchemasWSErrorCommonDetail$Outbound> | undefined;
  userMessage?: string | undefined;
};

/** @internal */
export const SchemasWSErrorCommon$outboundSchema: z.ZodType<
  SchemasWSErrorCommon$Outbound,
  z.ZodTypeDef,
  SchemasWSErrorCommon
> = z.instanceof(SchemasWSErrorCommon)
  .transform(v => v.data$)
  .pipe(z.object({
    code: z.string(),
    developerMessage: z.string(),
    details: z.array(
      z.lazy(() => models.SchemasWSErrorCommonDetail$outboundSchema),
    ).optional(),
    userMessage: z.string().optional(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SchemasWSErrorCommon$ {
  /** @deprecated use `SchemasWSErrorCommon$inboundSchema` instead. */
  export const inboundSchema = SchemasWSErrorCommon$inboundSchema;
  /** @deprecated use `SchemasWSErrorCommon$outboundSchema` instead. */
  export const outboundSchema = SchemasWSErrorCommon$outboundSchema;
  /** @deprecated use `SchemasWSErrorCommon$Outbound` instead. */
  export type Outbound = SchemasWSErrorCommon$Outbound;
}
