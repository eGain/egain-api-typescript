/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import * as models from "../index.js";
import { EgainError } from "./egainerror.js";

/**
 * Bad Request
 */
export type WSErrorCommonData = {
  /**
   * A string that follows the pattern *{integer}-{integer}*.
   *
   * @remarks
   *
   * The first *{integer}* is the http status code.  This code as a whole is unique.
   * * For example, error codes "400-101" and "404-101" are distinctly different.
   */
  code: string;
  /**
   * A summary of the error.
   */
  developerMessage: string;
  details?: Array<models.WSErrorCommonDetail> | undefined;
  /**
   * UI friendly messages are only supported by some APIs.
   *
   * @remarks
   *   * The client must explicitly request UI friendly messages by passing the *X-egain-error-message=yes* header.
   */
  userMessage?: string | undefined;
};

/**
 * Bad Request
 */
export class WSErrorCommon extends EgainError {
  /**
   * A string that follows the pattern *{integer}-{integer}*.
   *
   * @remarks
   *
   * The first *{integer}* is the http status code.  This code as a whole is unique.
   * * For example, error codes "400-101" and "404-101" are distinctly different.
   */
  code: string;
  /**
   * A summary of the error.
   */
  developerMessage: string;
  details?: Array<models.WSErrorCommonDetail> | undefined;
  /**
   * UI friendly messages are only supported by some APIs.
   *
   * @remarks
   *   * The client must explicitly request UI friendly messages by passing the *X-egain-error-message=yes* header.
   */
  userMessage?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: WSErrorCommonData;

  constructor(
    err: WSErrorCommonData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.code = err.code;
    this.developerMessage = err.developerMessage;
    if (err.details != null) this.details = err.details;
    if (err.userMessage != null) this.userMessage = err.userMessage;

    this.name = "WSErrorCommon";
  }
}

/** @internal */
export const WSErrorCommon$inboundSchema: z.ZodType<
  WSErrorCommon,
  z.ZodTypeDef,
  unknown
> = z.object({
  code: z.string(),
  developerMessage: z.string(),
  details: z.array(z.lazy(() => models.WSErrorCommonDetail$inboundSchema))
    .optional(),
  userMessage: z.string().optional(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new WSErrorCommon(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type WSErrorCommon$Outbound = {
  code: string;
  developerMessage: string;
  details?: Array<models.WSErrorCommonDetail$Outbound> | undefined;
  userMessage?: string | undefined;
};

/** @internal */
export const WSErrorCommon$outboundSchema: z.ZodType<
  WSErrorCommon$Outbound,
  z.ZodTypeDef,
  WSErrorCommon
> = z.instanceof(WSErrorCommon)
  .transform(v => v.data$)
  .pipe(z.object({
    code: z.string(),
    developerMessage: z.string(),
    details: z.array(z.lazy(() => models.WSErrorCommonDetail$outboundSchema))
      .optional(),
    userMessage: z.string().optional(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace WSErrorCommon$ {
  /** @deprecated use `WSErrorCommon$inboundSchema` instead. */
  export const inboundSchema = WSErrorCommon$inboundSchema;
  /** @deprecated use `WSErrorCommon$outboundSchema` instead. */
  export const outboundSchema = WSErrorCommon$outboundSchema;
  /** @deprecated use `WSErrorCommon$Outbound` instead. */
  export type Outbound = WSErrorCommon$Outbound;
}
