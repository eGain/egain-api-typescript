/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { EgainError } from "./egainerror.js";

/**
 * ## Service is Unhealthy
 *
 * @remarks
 *
 * The Import Content service is experiencing critical issues and may not be able to process requests properly.
 *
 * **Health Status Details:**
 * - **Overall Status**: Service is unhealthy and may not function correctly
 *
 * **Response Information:**
 * - **Status**: Current health state (unhealthy)
 * - **Timestamp**: When health check was performed
 * - **Version**: Current API version
 * - **Issues**: List of detected health problems
 */
export type ServiceUnavailableErrorData = {
  /**
   * **Health Status**
   *
   * @remarks
   *
   * The overall health status of the service. When unhealthy:
   * - Service may not process requests correctly
   * - Performance may be significantly degraded
   * - Some features may be unavailable
   * - Immediate attention is required
   */
  status?: string | undefined;
  /**
   * **Health Check Timestamp**
   *
   * @remarks
   *
   * The exact date and time when this health check was performed. This helps with:
   * - Incident timeline analysis
   * - Problem duration tracking
   * - Recovery time measurement
   * - Historical incident analysis
   */
  timestamp?: Date | undefined;
  /**
   * **API Version**
   *
   * @remarks
   *
   * The current version of the Import Content API. This information is useful for:
   * - Support team identification
   * - Known issue correlation
   * - Version-specific troubleshooting
   * - Upgrade planning
   */
  version?: string | undefined;
};

/**
 * ## Service is Unhealthy
 *
 * @remarks
 *
 * The Import Content service is experiencing critical issues and may not be able to process requests properly.
 *
 * **Health Status Details:**
 * - **Overall Status**: Service is unhealthy and may not function correctly
 *
 * **Response Information:**
 * - **Status**: Current health state (unhealthy)
 * - **Timestamp**: When health check was performed
 * - **Version**: Current API version
 * - **Issues**: List of detected health problems
 */
export class ServiceUnavailableError extends EgainError {
  /**
   * **Health Status**
   *
   * @remarks
   *
   * The overall health status of the service. When unhealthy:
   * - Service may not process requests correctly
   * - Performance may be significantly degraded
   * - Some features may be unavailable
   * - Immediate attention is required
   */
  status?: string | undefined;
  /**
   * **Health Check Timestamp**
   *
   * @remarks
   *
   * The exact date and time when this health check was performed. This helps with:
   * - Incident timeline analysis
   * - Problem duration tracking
   * - Recovery time measurement
   * - Historical incident analysis
   */
  timestamp?: Date | undefined;
  /**
   * **API Version**
   *
   * @remarks
   *
   * The current version of the Import Content API. This information is useful for:
   * - Support team identification
   * - Known issue correlation
   * - Version-specific troubleshooting
   * - Upgrade planning
   */
  version?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: ServiceUnavailableErrorData;

  constructor(
    err: ServiceUnavailableErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    if (err.status != null) this.status = err.status;
    if (err.timestamp != null) this.timestamp = err.timestamp;
    if (err.version != null) this.version = err.version;

    this.name = "ServiceUnavailableError";
  }
}

/** @internal */
export const ServiceUnavailableError$inboundSchema: z.ZodType<
  ServiceUnavailableError,
  z.ZodTypeDef,
  unknown
> = z.object({
  status: z.string().optional(),
  timestamp: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  version: z.string().optional(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new ServiceUnavailableError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type ServiceUnavailableError$Outbound = {
  status?: string | undefined;
  timestamp?: string | undefined;
  version?: string | undefined;
};

/** @internal */
export const ServiceUnavailableError$outboundSchema: z.ZodType<
  ServiceUnavailableError$Outbound,
  z.ZodTypeDef,
  ServiceUnavailableError
> = z.instanceof(ServiceUnavailableError)
  .transform(v => v.data$)
  .pipe(z.object({
    status: z.string().optional(),
    timestamp: z.date().transform(v => v.toISOString()).optional(),
    version: z.string().optional(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ServiceUnavailableError$ {
  /** @deprecated use `ServiceUnavailableError$inboundSchema` instead. */
  export const inboundSchema = ServiceUnavailableError$inboundSchema;
  /** @deprecated use `ServiceUnavailableError$outboundSchema` instead. */
  export const outboundSchema = ServiceUnavailableError$outboundSchema;
  /** @deprecated use `ServiceUnavailableError$Outbound` instead. */
  export type Outbound = ServiceUnavailableError$Outbound;
}
