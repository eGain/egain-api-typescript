/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import * as operations from "../operations/index.js";
import { EgainError } from "./egainerror.js";

/**
 * ## Service is Unhealthy
 *
 * @remarks
 *
 * The Import Content service is experiencing critical issues and may not be able to process requests properly.
 *
 * **Health Status Details:**
 * - **Overall Status**: Service is unhealthy and may not function correctly
 *
 * **Response Information:**
 * - **Status**: Current health state (unhealthy)
 * - **Timestamp**: When health check was performed
 * - **Version**: Current API version
 * - **Issues**: List of detected health problems
 */
export type ServiceUnavailableErrorData = {
  /**
   * **Health Status**
   *
   * @remarks
   *
   * The overall health status of the service. Possible values:
   * - **healthy**: Service is operating normally
   * - **degraded**: Service is functional but with performance issues
   * - **unhealthy**: Service is experiencing critical issues
   * - **maintenance**: Service is under planned maintenance
   */
  status?: operations.ServiceUnavailableStatus | undefined;
  /**
   * **Health Check Timestamp**
   *
   * @remarks
   *
   * The exact date and time when this health check was performed. This is useful for:
   * - Tracking health check frequency
   * - Correlating with other system events
   * - Monitoring health check response times
   * - Historical health trend analysis
   */
  timestamp?: any | undefined;
  /**
   * **API Version**
   *
   * @remarks
   *
   * The current version of the Import Content API. This helps with:
   * - Version compatibility checking
   * - Feature availability verification
   * - Upgrade planning and coordination
   * - Support and troubleshooting
   */
  version?: string | undefined;
  /**
   * **Issues**:
   *
   * @remarks
   *
   * List of detected health problems
   */
  issues?: Array<string> | undefined;
  /**
   * **Comonents**:
   *
   * @remarks
   *
   * Health status of import service componenets
   */
  components?: operations.Components | undefined;
};

/**
 * ## Service is Unhealthy
 *
 * @remarks
 *
 * The Import Content service is experiencing critical issues and may not be able to process requests properly.
 *
 * **Health Status Details:**
 * - **Overall Status**: Service is unhealthy and may not function correctly
 *
 * **Response Information:**
 * - **Status**: Current health state (unhealthy)
 * - **Timestamp**: When health check was performed
 * - **Version**: Current API version
 * - **Issues**: List of detected health problems
 */
export class ServiceUnavailableError extends EgainError {
  /**
   * **Health Status**
   *
   * @remarks
   *
   * The overall health status of the service. Possible values:
   * - **healthy**: Service is operating normally
   * - **degraded**: Service is functional but with performance issues
   * - **unhealthy**: Service is experiencing critical issues
   * - **maintenance**: Service is under planned maintenance
   */
  status?: operations.ServiceUnavailableStatus | undefined;
  /**
   * **Health Check Timestamp**
   *
   * @remarks
   *
   * The exact date and time when this health check was performed. This is useful for:
   * - Tracking health check frequency
   * - Correlating with other system events
   * - Monitoring health check response times
   * - Historical health trend analysis
   */
  timestamp?: any | undefined;
  /**
   * **API Version**
   *
   * @remarks
   *
   * The current version of the Import Content API. This helps with:
   * - Version compatibility checking
   * - Feature availability verification
   * - Upgrade planning and coordination
   * - Support and troubleshooting
   */
  version?: string | undefined;
  /**
   * **Issues**:
   *
   * @remarks
   *
   * List of detected health problems
   */
  issues?: Array<string> | undefined;
  /**
   * **Comonents**:
   *
   * @remarks
   *
   * Health status of import service componenets
   */
  components?: operations.Components | undefined;

  /** The original data that was passed to this error instance. */
  data$: ServiceUnavailableErrorData;

  constructor(
    err: ServiceUnavailableErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    if (err.status != null) this.status = err.status;
    if (err.timestamp != null) this.timestamp = err.timestamp;
    if (err.version != null) this.version = err.version;
    if (err.issues != null) this.issues = err.issues;
    if (err.components != null) this.components = err.components;

    this.name = "ServiceUnavailableError";
  }
}

/** @internal */
export const ServiceUnavailableError$inboundSchema: z.ZodType<
  ServiceUnavailableError,
  z.ZodTypeDef,
  unknown
> = z.object({
  status: operations.ServiceUnavailableStatus$inboundSchema.optional(),
  timestamp: z.any().optional(),
  version: z.string().optional(),
  issues: z.array(z.string()).optional(),
  components: z.lazy(() => operations.Components$inboundSchema).optional(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new ServiceUnavailableError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type ServiceUnavailableError$Outbound = {
  status?: string | undefined;
  timestamp?: any | undefined;
  version?: string | undefined;
  issues?: Array<string> | undefined;
  components?: operations.Components$Outbound | undefined;
};

/** @internal */
export const ServiceUnavailableError$outboundSchema: z.ZodType<
  ServiceUnavailableError$Outbound,
  z.ZodTypeDef,
  ServiceUnavailableError
> = z.instanceof(ServiceUnavailableError)
  .transform(v => v.data$)
  .pipe(z.object({
    status: operations.ServiceUnavailableStatus$outboundSchema.optional(),
    timestamp: z.any().optional(),
    version: z.string().optional(),
    issues: z.array(z.string()).optional(),
    components: z.lazy(() => operations.Components$outboundSchema).optional(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ServiceUnavailableError$ {
  /** @deprecated use `ServiceUnavailableError$inboundSchema` instead. */
  export const inboundSchema = ServiceUnavailableError$inboundSchema;
  /** @deprecated use `ServiceUnavailableError$outboundSchema` instead. */
  export const outboundSchema = ServiceUnavailableError$outboundSchema;
  /** @deprecated use `ServiceUnavailableError$Outbound` instead. */
  export type Outbound = ServiceUnavailableError$Outbound;
}
