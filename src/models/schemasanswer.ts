/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  Image,
  Image$inboundSchema,
  Image$Outbound,
  Image$outboundSchema,
} from "./image.js";

export type SchemasAnswer = {
  /**
   * ID of the answer
   */
  id?: string | undefined;
  /**
   * depth of the answer
   */
  depth?: number | undefined;
  /**
   * Flag indicating if answer is visible
   */
  isInvisible?: boolean | undefined;
  /**
   * Text of the answer
   */
  text?: string | undefined;
  image?: Image | undefined;
  /**
   * name of the answer
   */
  conceptName?: string | undefined;
  /**
   * Id of the answer
   */
  conceptId?: string | undefined;
  /**
   * lower value of the answer
   */
  lowerValue?: number | undefined;
  /**
   * upper value of the answer
   */
  upperValue?: number | undefined;
  /**
   * lower value of enum answer
   */
  enumLowerValue?: string | undefined;
  /**
   * upper value of enum answer
   */
  enumUpperValue?: string | undefined;
  /**
   * Value indicating if lower value is inclusive
   */
  lowerInclusive?: boolean | undefined;
  /**
   * Value indicating if upper value is inclusive
   */
  upperInclusive?: boolean | undefined;
  /**
   * Partial minimum
   */
  partialMin?: number | undefined;
  /**
   * Partial maximim
   */
  partialMax?: number | undefined;
};

/** @internal */
export const SchemasAnswer$inboundSchema: z.ZodType<
  SchemasAnswer,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  depth: z.number().int().optional(),
  isInvisible: z.boolean().optional(),
  text: z.string().optional(),
  image: Image$inboundSchema.optional(),
  conceptName: z.string().optional(),
  conceptId: z.string().optional(),
  lowerValue: z.number().int().optional(),
  upperValue: z.number().int().optional(),
  enumLowerValue: z.string().optional(),
  enumUpperValue: z.string().optional(),
  lowerInclusive: z.boolean().optional(),
  upperInclusive: z.boolean().optional(),
  partialMin: z.number().int().optional(),
  partialMax: z.number().int().optional(),
});

/** @internal */
export type SchemasAnswer$Outbound = {
  id?: string | undefined;
  depth?: number | undefined;
  isInvisible?: boolean | undefined;
  text?: string | undefined;
  image?: Image$Outbound | undefined;
  conceptName?: string | undefined;
  conceptId?: string | undefined;
  lowerValue?: number | undefined;
  upperValue?: number | undefined;
  enumLowerValue?: string | undefined;
  enumUpperValue?: string | undefined;
  lowerInclusive?: boolean | undefined;
  upperInclusive?: boolean | undefined;
  partialMin?: number | undefined;
  partialMax?: number | undefined;
};

/** @internal */
export const SchemasAnswer$outboundSchema: z.ZodType<
  SchemasAnswer$Outbound,
  z.ZodTypeDef,
  SchemasAnswer
> = z.object({
  id: z.string().optional(),
  depth: z.number().int().optional(),
  isInvisible: z.boolean().optional(),
  text: z.string().optional(),
  image: Image$outboundSchema.optional(),
  conceptName: z.string().optional(),
  conceptId: z.string().optional(),
  lowerValue: z.number().int().optional(),
  upperValue: z.number().int().optional(),
  enumLowerValue: z.string().optional(),
  enumUpperValue: z.string().optional(),
  lowerInclusive: z.boolean().optional(),
  upperInclusive: z.boolean().optional(),
  partialMin: z.number().int().optional(),
  partialMax: z.number().int().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SchemasAnswer$ {
  /** @deprecated use `SchemasAnswer$inboundSchema` instead. */
  export const inboundSchema = SchemasAnswer$inboundSchema;
  /** @deprecated use `SchemasAnswer$outboundSchema` instead. */
  export const outboundSchema = SchemasAnswer$outboundSchema;
  /** @deprecated use `SchemasAnswer$Outbound` instead. */
  export type Outbound = SchemasAnswer$Outbound;
}

export function schemasAnswerToJSON(schemasAnswer: SchemasAnswer): string {
  return JSON.stringify(SchemasAnswer$outboundSchema.parse(schemasAnswer));
}

export function schemasAnswerFromJSON(
  jsonString: string,
): SafeParseResult<SchemasAnswer, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SchemasAnswer$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SchemasAnswer' from JSON`,
  );
}
