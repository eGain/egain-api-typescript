/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  KbLanguageCode,
  KbLanguageCode$inboundSchema,
  KbLanguageCode$outboundSchema,
} from "./kblanguagecode.js";

/**
 * Only "external" or "internal" allowed
 */
export const ResultType = {
  External: "external",
  Internal: "internal",
} as const;
/**
 * Only "external" or "internal" allowed
 */
export type ResultType = ClosedEnum<typeof ResultType>;

export type CreateFederatedSearchEvent = {
  /**
   * The search string that was entered by the user
   */
  q: string;
  /**
   * Only "external" or "internal" allowed
   */
  resultType: ResultType;
  url: string;
  title: string;
  /**
   * A short language code. A list of codes can be found below:
   *
   * @remarks
   *
   * |Code|Description
   * |----|-----------
   * |en-US|English (United States)
   * |en-GB|English (United Kingdom)
   * |fr-FR|French (France)
   * |es-ES|Spanish (Spain)
   * |it-IT|Italian (Italy)
   * |de-DE|German (Germany)
   * |nl-NL|Dutch (Netherlands)
   * |pt-BR|Portuguese (Brazil)
   * |pt-PT|Portuguese (Portugal)
   * |da-DK|Danish (Denmark)
   * |sv-SE|Swedish (Sweden)
   * |ru-RU|Russian (Russia)
   * |fr-CA|French (Canada)
   * |zh-CN|Chinese (Simplified, China)
   * |ja-JP|Japanese (Japan)
   * |ko-KR|Korean (South Korea)
   * |nn-NO|Norwegian Nynorsk (Norway)
   */
  languageCode: KbLanguageCode;
};

/** @internal */
export const ResultType$inboundSchema: z.ZodNativeEnum<typeof ResultType> = z
  .nativeEnum(ResultType);

/** @internal */
export const ResultType$outboundSchema: z.ZodNativeEnum<typeof ResultType> =
  ResultType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResultType$ {
  /** @deprecated use `ResultType$inboundSchema` instead. */
  export const inboundSchema = ResultType$inboundSchema;
  /** @deprecated use `ResultType$outboundSchema` instead. */
  export const outboundSchema = ResultType$outboundSchema;
}

/** @internal */
export const CreateFederatedSearchEvent$inboundSchema: z.ZodType<
  CreateFederatedSearchEvent,
  z.ZodTypeDef,
  unknown
> = z.object({
  q: z.string(),
  resultType: ResultType$inboundSchema,
  url: z.string(),
  title: z.string(),
  languageCode: KbLanguageCode$inboundSchema,
});

/** @internal */
export type CreateFederatedSearchEvent$Outbound = {
  q: string;
  resultType: string;
  url: string;
  title: string;
  languageCode: string;
};

/** @internal */
export const CreateFederatedSearchEvent$outboundSchema: z.ZodType<
  CreateFederatedSearchEvent$Outbound,
  z.ZodTypeDef,
  CreateFederatedSearchEvent
> = z.object({
  q: z.string(),
  resultType: ResultType$outboundSchema,
  url: z.string(),
  title: z.string(),
  languageCode: KbLanguageCode$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateFederatedSearchEvent$ {
  /** @deprecated use `CreateFederatedSearchEvent$inboundSchema` instead. */
  export const inboundSchema = CreateFederatedSearchEvent$inboundSchema;
  /** @deprecated use `CreateFederatedSearchEvent$outboundSchema` instead. */
  export const outboundSchema = CreateFederatedSearchEvent$outboundSchema;
  /** @deprecated use `CreateFederatedSearchEvent$Outbound` instead. */
  export type Outbound = CreateFederatedSearchEvent$Outbound;
}

export function createFederatedSearchEventToJSON(
  createFederatedSearchEvent: CreateFederatedSearchEvent,
): string {
  return JSON.stringify(
    CreateFederatedSearchEvent$outboundSchema.parse(createFederatedSearchEvent),
  );
}

export function createFederatedSearchEventFromJSON(
  jsonString: string,
): SafeParseResult<CreateFederatedSearchEvent, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateFederatedSearchEvent$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateFederatedSearchEvent' from JSON`,
  );
}
