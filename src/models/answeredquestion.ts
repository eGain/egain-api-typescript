/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import {
  AnswerRange,
  AnswerRange$inboundSchema,
  AnswerRange$Outbound,
  AnswerRange$outboundSchema,
} from "./answerrange.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  Metadata,
  Metadata$inboundSchema,
  Metadata$Outbound,
  Metadata$outboundSchema,
} from "./metadata.js";
import {
  SchemasAnswer,
  SchemasAnswer$inboundSchema,
  SchemasAnswer$Outbound,
  SchemasAnswer$outboundSchema,
} from "./schemasanswer.js";
import {
  SchemasCustomAttribute,
  SchemasCustomAttribute$inboundSchema,
  SchemasCustomAttribute$Outbound,
  SchemasCustomAttribute$outboundSchema,
} from "./schemascustomattribute.js";

/**
 * type of the question
 */
export const AnsweredQuestionType = {
  Numeric: "numeric",
  Enumerated: "enumerated",
  List: "list",
  Text: "text",
} as const;
/**
 * type of the question
 */
export type AnsweredQuestionType = ClosedEnum<typeof AnsweredQuestionType>;

/**
 * format of the question
 */
export const AnsweredQuestionFormat = {
  RadioButton: "radioButton",
  Dropdown: "dropdown",
  Checkbox: "checkbox",
  MutliSelect: "mutliSelect",
  Number: "number",
  SingleLineTextField: "singleLineTextField",
  MultiLineTextField: "multiLineTextField",
} as const;
/**
 * format of the question
 */
export type AnsweredQuestionFormat = ClosedEnum<typeof AnsweredQuestionFormat>;

/**
 * source of the provided answer
 */
export const AnswerSource = {
  Rule: "rule",
  DataLinkArticle: "data_link_article",
  User: "user",
} as const;
/**
 * source of the provided answer
 */
export type AnswerSource = ClosedEnum<typeof AnswerSource>;

export type AnsweredQuestion = {
  /**
   * The numerical ID of the question
   */
  id?: string | undefined;
  /**
   * Title of the question
   */
  title?: string | undefined;
  /**
   * type of the question
   */
  type?: AnsweredQuestionType | undefined;
  /**
   * format of the question
   */
  format?: AnsweredQuestionFormat | undefined;
  /**
   * short name
   */
  shortName?: string | undefined;
  /**
   * indicates if question has additional information
   */
  hasAdditionalInfo?: boolean | undefined;
  /**
   * indicates if question has action
   */
  hasAction?: boolean | undefined;
  /**
   * valid answers for question
   */
  validAnswer?: Array<SchemasAnswer> | undefined;
  /**
   * answers provided for question
   */
  previousAnswer?: Array<SchemasAnswer> | undefined;
  validAnswerRange?: AnswerRange | undefined;
  /**
   * Metadata on question
   */
  metadata?: Array<Metadata> | undefined;
  /**
   * Custom attributes of question
   */
  customAttributes?: Array<SchemasCustomAttribute> | undefined;
  /**
   * source of the provided answer
   */
  answerSource?: AnswerSource | undefined;
};

/** @internal */
export const AnsweredQuestionType$inboundSchema: z.ZodNativeEnum<
  typeof AnsweredQuestionType
> = z.nativeEnum(AnsweredQuestionType);

/** @internal */
export const AnsweredQuestionType$outboundSchema: z.ZodNativeEnum<
  typeof AnsweredQuestionType
> = AnsweredQuestionType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AnsweredQuestionType$ {
  /** @deprecated use `AnsweredQuestionType$inboundSchema` instead. */
  export const inboundSchema = AnsweredQuestionType$inboundSchema;
  /** @deprecated use `AnsweredQuestionType$outboundSchema` instead. */
  export const outboundSchema = AnsweredQuestionType$outboundSchema;
}

/** @internal */
export const AnsweredQuestionFormat$inboundSchema: z.ZodNativeEnum<
  typeof AnsweredQuestionFormat
> = z.nativeEnum(AnsweredQuestionFormat);

/** @internal */
export const AnsweredQuestionFormat$outboundSchema: z.ZodNativeEnum<
  typeof AnsweredQuestionFormat
> = AnsweredQuestionFormat$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AnsweredQuestionFormat$ {
  /** @deprecated use `AnsweredQuestionFormat$inboundSchema` instead. */
  export const inboundSchema = AnsweredQuestionFormat$inboundSchema;
  /** @deprecated use `AnsweredQuestionFormat$outboundSchema` instead. */
  export const outboundSchema = AnsweredQuestionFormat$outboundSchema;
}

/** @internal */
export const AnswerSource$inboundSchema: z.ZodNativeEnum<typeof AnswerSource> =
  z.nativeEnum(AnswerSource);

/** @internal */
export const AnswerSource$outboundSchema: z.ZodNativeEnum<typeof AnswerSource> =
  AnswerSource$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AnswerSource$ {
  /** @deprecated use `AnswerSource$inboundSchema` instead. */
  export const inboundSchema = AnswerSource$inboundSchema;
  /** @deprecated use `AnswerSource$outboundSchema` instead. */
  export const outboundSchema = AnswerSource$outboundSchema;
}

/** @internal */
export const AnsweredQuestion$inboundSchema: z.ZodType<
  AnsweredQuestion,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  title: z.string().optional(),
  type: AnsweredQuestionType$inboundSchema.optional(),
  format: AnsweredQuestionFormat$inboundSchema.optional(),
  shortName: z.string().optional(),
  hasAdditionalInfo: z.boolean().optional(),
  hasAction: z.boolean().optional(),
  validAnswer: z.array(SchemasAnswer$inboundSchema).optional(),
  previousAnswer: z.array(SchemasAnswer$inboundSchema).optional(),
  validAnswerRange: AnswerRange$inboundSchema.optional(),
  metadata: z.array(Metadata$inboundSchema).optional(),
  customAttributes: z.array(SchemasCustomAttribute$inboundSchema).optional(),
  answerSource: AnswerSource$inboundSchema.optional(),
});

/** @internal */
export type AnsweredQuestion$Outbound = {
  id?: string | undefined;
  title?: string | undefined;
  type?: string | undefined;
  format?: string | undefined;
  shortName?: string | undefined;
  hasAdditionalInfo?: boolean | undefined;
  hasAction?: boolean | undefined;
  validAnswer?: Array<SchemasAnswer$Outbound> | undefined;
  previousAnswer?: Array<SchemasAnswer$Outbound> | undefined;
  validAnswerRange?: AnswerRange$Outbound | undefined;
  metadata?: Array<Metadata$Outbound> | undefined;
  customAttributes?: Array<SchemasCustomAttribute$Outbound> | undefined;
  answerSource?: string | undefined;
};

/** @internal */
export const AnsweredQuestion$outboundSchema: z.ZodType<
  AnsweredQuestion$Outbound,
  z.ZodTypeDef,
  AnsweredQuestion
> = z.object({
  id: z.string().optional(),
  title: z.string().optional(),
  type: AnsweredQuestionType$outboundSchema.optional(),
  format: AnsweredQuestionFormat$outboundSchema.optional(),
  shortName: z.string().optional(),
  hasAdditionalInfo: z.boolean().optional(),
  hasAction: z.boolean().optional(),
  validAnswer: z.array(SchemasAnswer$outboundSchema).optional(),
  previousAnswer: z.array(SchemasAnswer$outboundSchema).optional(),
  validAnswerRange: AnswerRange$outboundSchema.optional(),
  metadata: z.array(Metadata$outboundSchema).optional(),
  customAttributes: z.array(SchemasCustomAttribute$outboundSchema).optional(),
  answerSource: AnswerSource$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AnsweredQuestion$ {
  /** @deprecated use `AnsweredQuestion$inboundSchema` instead. */
  export const inboundSchema = AnsweredQuestion$inboundSchema;
  /** @deprecated use `AnsweredQuestion$outboundSchema` instead. */
  export const outboundSchema = AnsweredQuestion$outboundSchema;
  /** @deprecated use `AnsweredQuestion$Outbound` instead. */
  export type Outbound = AnsweredQuestion$Outbound;
}

export function answeredQuestionToJSON(
  answeredQuestion: AnsweredQuestion,
): string {
  return JSON.stringify(
    AnsweredQuestion$outboundSchema.parse(answeredQuestion),
  );
}

export function answeredQuestionFromJSON(
  jsonString: string,
): SafeParseResult<AnsweredQuestion, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AnsweredQuestion$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AnsweredQuestion' from JSON`,
  );
}
