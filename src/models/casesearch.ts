/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import {
  Action,
  Action$inboundSchema,
  Action$Outbound,
  Action$outboundSchema,
} from "./action.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  Metadata,
  Metadata$inboundSchema,
  Metadata$Outbound,
  Metadata$outboundSchema,
} from "./metadata.js";

/**
 * The type of the action
 */
export const CaseSearchType = {
  Control: "Control",
  Article: "Article",
} as const;
/**
 * The type of the action
 */
export type CaseSearchType = ClosedEnum<typeof CaseSearchType>;

export type CaseSearch = {
  /**
   * The number of times action was accepted
   */
  acceptCount?: number | undefined;
  /**
   * actions in search
   */
  action?: Array<Action> | undefined;
  /**
   * This field indicates if action has additional information
   */
  additionalInfo?: boolean | undefined;
  /**
   * Metadata in search
   */
  metadata?: Array<Metadata> | undefined;
  /**
   * case Id
   */
  caseId?: string | undefined;
  /**
   * This field indicates if the case has passed the threshold value
   */
  passedThresholdValue?: boolean | undefined;
  /**
   * The number of times action was rejected
   */
  rejectCount?: number | undefined;
  /**
   * The short name
   */
  shortName?: string | undefined;
  /**
   * The score of the case
   */
  score?: number | undefined;
  /**
   * The title of the case
   */
  title?: string | undefined;
  /**
   * The type of the action
   */
  type?: CaseSearchType | undefined;
};

/** @internal */
export const CaseSearchType$inboundSchema: z.ZodNativeEnum<
  typeof CaseSearchType
> = z.nativeEnum(CaseSearchType);

/** @internal */
export const CaseSearchType$outboundSchema: z.ZodNativeEnum<
  typeof CaseSearchType
> = CaseSearchType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CaseSearchType$ {
  /** @deprecated use `CaseSearchType$inboundSchema` instead. */
  export const inboundSchema = CaseSearchType$inboundSchema;
  /** @deprecated use `CaseSearchType$outboundSchema` instead. */
  export const outboundSchema = CaseSearchType$outboundSchema;
}

/** @internal */
export const CaseSearch$inboundSchema: z.ZodType<
  CaseSearch,
  z.ZodTypeDef,
  unknown
> = z.object({
  acceptCount: z.number().int().optional(),
  action: z.array(Action$inboundSchema).optional(),
  additionalInfo: z.boolean().optional(),
  metadata: z.array(Metadata$inboundSchema).optional(),
  caseId: z.string().optional(),
  passedThresholdValue: z.boolean().optional(),
  rejectCount: z.number().int().optional(),
  shortName: z.string().optional(),
  score: z.number().optional(),
  title: z.string().optional(),
  type: CaseSearchType$inboundSchema.optional(),
});

/** @internal */
export type CaseSearch$Outbound = {
  acceptCount?: number | undefined;
  action?: Array<Action$Outbound> | undefined;
  additionalInfo?: boolean | undefined;
  metadata?: Array<Metadata$Outbound> | undefined;
  caseId?: string | undefined;
  passedThresholdValue?: boolean | undefined;
  rejectCount?: number | undefined;
  shortName?: string | undefined;
  score?: number | undefined;
  title?: string | undefined;
  type?: string | undefined;
};

/** @internal */
export const CaseSearch$outboundSchema: z.ZodType<
  CaseSearch$Outbound,
  z.ZodTypeDef,
  CaseSearch
> = z.object({
  acceptCount: z.number().int().optional(),
  action: z.array(Action$outboundSchema).optional(),
  additionalInfo: z.boolean().optional(),
  metadata: z.array(Metadata$outboundSchema).optional(),
  caseId: z.string().optional(),
  passedThresholdValue: z.boolean().optional(),
  rejectCount: z.number().int().optional(),
  shortName: z.string().optional(),
  score: z.number().optional(),
  title: z.string().optional(),
  type: CaseSearchType$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CaseSearch$ {
  /** @deprecated use `CaseSearch$inboundSchema` instead. */
  export const inboundSchema = CaseSearch$inboundSchema;
  /** @deprecated use `CaseSearch$outboundSchema` instead. */
  export const outboundSchema = CaseSearch$outboundSchema;
  /** @deprecated use `CaseSearch$Outbound` instead. */
  export type Outbound = CaseSearch$Outbound;
}

export function caseSearchToJSON(caseSearch: CaseSearch): string {
  return JSON.stringify(CaseSearch$outboundSchema.parse(caseSearch));
}

export function caseSearchFromJSON(
  jsonString: string,
): SafeParseResult<CaseSearch, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CaseSearch$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CaseSearch' from JSON`,
  );
}
