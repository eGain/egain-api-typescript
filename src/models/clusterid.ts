/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type ClusterId = {
  /**
   * The numerical Cluster ID
   */
  id?: string | undefined;
};

/** @internal */
export const ClusterId$inboundSchema: z.ZodType<
  ClusterId,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
});

/** @internal */
export type ClusterId$Outbound = {
  id?: string | undefined;
};

/** @internal */
export const ClusterId$outboundSchema: z.ZodType<
  ClusterId$Outbound,
  z.ZodTypeDef,
  ClusterId
> = z.object({
  id: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClusterId$ {
  /** @deprecated use `ClusterId$inboundSchema` instead. */
  export const inboundSchema = ClusterId$inboundSchema;
  /** @deprecated use `ClusterId$outboundSchema` instead. */
  export const outboundSchema = ClusterId$outboundSchema;
  /** @deprecated use `ClusterId$Outbound` instead. */
  export type Outbound = ClusterId$Outbound;
}

export function clusterIdToJSON(clusterId: ClusterId): string {
  return JSON.stringify(ClusterId$outboundSchema.parse(clusterId));
}

export function clusterIdFromJSON(
  jsonString: string,
): SafeParseResult<ClusterId, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ClusterId$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ClusterId' from JSON`,
  );
}
