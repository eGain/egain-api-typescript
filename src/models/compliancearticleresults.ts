/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import {
  ComplianceArticleResult,
  ComplianceArticleResult$inboundSchema,
  ComplianceArticleResult$Outbound,
  ComplianceArticleResult$outboundSchema,
} from "./compliancearticleresult.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  PaginationInfo,
  PaginationInfo$inboundSchema,
  PaginationInfo$Outbound,
  PaginationInfo$outboundSchema,
} from "./paginationinfo.js";

/**
 * One or more instances of Compliance Article.
 */
export type ComplianceArticleResults = {
  /**
   * Article details
   *
   * @remarks
   */
  article?: Array<ComplianceArticleResult> | undefined;
  paginationInfo?: PaginationInfo | undefined;
};

/** @internal */
export const ComplianceArticleResults$inboundSchema: z.ZodType<
  ComplianceArticleResults,
  z.ZodTypeDef,
  unknown
> = z.object({
  article: z.array(ComplianceArticleResult$inboundSchema).optional(),
  paginationInfo: PaginationInfo$inboundSchema.optional(),
});

/** @internal */
export type ComplianceArticleResults$Outbound = {
  article?: Array<ComplianceArticleResult$Outbound> | undefined;
  paginationInfo?: PaginationInfo$Outbound | undefined;
};

/** @internal */
export const ComplianceArticleResults$outboundSchema: z.ZodType<
  ComplianceArticleResults$Outbound,
  z.ZodTypeDef,
  ComplianceArticleResults
> = z.object({
  article: z.array(ComplianceArticleResult$outboundSchema).optional(),
  paginationInfo: PaginationInfo$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ComplianceArticleResults$ {
  /** @deprecated use `ComplianceArticleResults$inboundSchema` instead. */
  export const inboundSchema = ComplianceArticleResults$inboundSchema;
  /** @deprecated use `ComplianceArticleResults$outboundSchema` instead. */
  export const outboundSchema = ComplianceArticleResults$outboundSchema;
  /** @deprecated use `ComplianceArticleResults$Outbound` instead. */
  export type Outbound = ComplianceArticleResults$Outbound;
}

export function complianceArticleResultsToJSON(
  complianceArticleResults: ComplianceArticleResults,
): string {
  return JSON.stringify(
    ComplianceArticleResults$outboundSchema.parse(complianceArticleResults),
  );
}

export function complianceArticleResultsFromJSON(
  jsonString: string,
): SafeParseResult<ComplianceArticleResults, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ComplianceArticleResults$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ComplianceArticleResults' from JSON`,
  );
}
