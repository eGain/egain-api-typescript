/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import {
  AnswerRange,
  AnswerRange$inboundSchema,
  AnswerRange$Outbound,
  AnswerRange$outboundSchema,
} from "./answerrange.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  Metadata,
  Metadata$inboundSchema,
  Metadata$Outbound,
  Metadata$outboundSchema,
} from "./metadata.js";
import {
  SchemasAnswer,
  SchemasAnswer$inboundSchema,
  SchemasAnswer$Outbound,
  SchemasAnswer$outboundSchema,
} from "./schemasanswer.js";
import {
  SchemasCustomAttribute,
  SchemasCustomAttribute$inboundSchema,
  SchemasCustomAttribute$Outbound,
  SchemasCustomAttribute$outboundSchema,
} from "./schemascustomattribute.js";

/**
 * type of the question
 */
export const QuestionType = {
  Numeric: "numeric",
  Enumerated: "enumerated",
  List: "list",
  Text: "text",
} as const;
/**
 * type of the question
 */
export type QuestionType = ClosedEnum<typeof QuestionType>;

/**
 * format of the question
 */
export const QuestionFormat = {
  RadioButton: "radioButton",
  Dropdown: "dropdown",
  Checkbox: "checkbox",
  MutliSelect: "mutliSelect",
  Number: "number",
  SingleLineTextField: "singleLineTextField",
  MultiLineTextField: "multiLineTextField",
} as const;
/**
 * format of the question
 */
export type QuestionFormat = ClosedEnum<typeof QuestionFormat>;

export type Question = {
  /**
   * The numerical ID of the question
   */
  id?: string | undefined;
  /**
   * Title of the question
   */
  title?: string | undefined;
  /**
   * type of the question
   */
  type?: QuestionType | undefined;
  /**
   * format of the question
   */
  format?: QuestionFormat | undefined;
  /**
   * short name
   */
  shortName?: string | undefined;
  /**
   * indicates if question has additional information
   */
  hasAdditionalInfo?: boolean | undefined;
  /**
   * indicates if question has action
   */
  hasAction?: boolean | undefined;
  /**
   * valid answers for question
   */
  validAnswer?: Array<SchemasAnswer> | undefined;
  validAnswerRange?: AnswerRange | undefined;
  /**
   * Metadata on question
   */
  metadata?: Array<Metadata> | undefined;
  /**
   * Custom attributes of question
   */
  customAttributes?: Array<SchemasCustomAttribute> | undefined;
};

/** @internal */
export const QuestionType$inboundSchema: z.ZodNativeEnum<typeof QuestionType> =
  z.nativeEnum(QuestionType);

/** @internal */
export const QuestionType$outboundSchema: z.ZodNativeEnum<typeof QuestionType> =
  QuestionType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace QuestionType$ {
  /** @deprecated use `QuestionType$inboundSchema` instead. */
  export const inboundSchema = QuestionType$inboundSchema;
  /** @deprecated use `QuestionType$outboundSchema` instead. */
  export const outboundSchema = QuestionType$outboundSchema;
}

/** @internal */
export const QuestionFormat$inboundSchema: z.ZodNativeEnum<
  typeof QuestionFormat
> = z.nativeEnum(QuestionFormat);

/** @internal */
export const QuestionFormat$outboundSchema: z.ZodNativeEnum<
  typeof QuestionFormat
> = QuestionFormat$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace QuestionFormat$ {
  /** @deprecated use `QuestionFormat$inboundSchema` instead. */
  export const inboundSchema = QuestionFormat$inboundSchema;
  /** @deprecated use `QuestionFormat$outboundSchema` instead. */
  export const outboundSchema = QuestionFormat$outboundSchema;
}

/** @internal */
export const Question$inboundSchema: z.ZodType<
  Question,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  title: z.string().optional(),
  type: QuestionType$inboundSchema.optional(),
  format: QuestionFormat$inboundSchema.optional(),
  shortName: z.string().optional(),
  hasAdditionalInfo: z.boolean().optional(),
  hasAction: z.boolean().optional(),
  validAnswer: z.array(SchemasAnswer$inboundSchema).optional(),
  validAnswerRange: AnswerRange$inboundSchema.optional(),
  metadata: z.array(Metadata$inboundSchema).optional(),
  customAttributes: z.array(SchemasCustomAttribute$inboundSchema).optional(),
});

/** @internal */
export type Question$Outbound = {
  id?: string | undefined;
  title?: string | undefined;
  type?: string | undefined;
  format?: string | undefined;
  shortName?: string | undefined;
  hasAdditionalInfo?: boolean | undefined;
  hasAction?: boolean | undefined;
  validAnswer?: Array<SchemasAnswer$Outbound> | undefined;
  validAnswerRange?: AnswerRange$Outbound | undefined;
  metadata?: Array<Metadata$Outbound> | undefined;
  customAttributes?: Array<SchemasCustomAttribute$Outbound> | undefined;
};

/** @internal */
export const Question$outboundSchema: z.ZodType<
  Question$Outbound,
  z.ZodTypeDef,
  Question
> = z.object({
  id: z.string().optional(),
  title: z.string().optional(),
  type: QuestionType$outboundSchema.optional(),
  format: QuestionFormat$outboundSchema.optional(),
  shortName: z.string().optional(),
  hasAdditionalInfo: z.boolean().optional(),
  hasAction: z.boolean().optional(),
  validAnswer: z.array(SchemasAnswer$outboundSchema).optional(),
  validAnswerRange: AnswerRange$outboundSchema.optional(),
  metadata: z.array(Metadata$outboundSchema).optional(),
  customAttributes: z.array(SchemasCustomAttribute$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Question$ {
  /** @deprecated use `Question$inboundSchema` instead. */
  export const inboundSchema = Question$inboundSchema;
  /** @deprecated use `Question$outboundSchema` instead. */
  export const outboundSchema = Question$outboundSchema;
  /** @deprecated use `Question$Outbound` instead. */
  export type Outbound = Question$Outbound;
}

export function questionToJSON(question: Question): string {
  return JSON.stringify(Question$outboundSchema.parse(question));
}

export function questionFromJSON(
  jsonString: string,
): SafeParseResult<Question, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Question$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Question' from JSON`,
  );
}
