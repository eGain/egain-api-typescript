/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

/**
 * The identifiers of the milestone.
 */
export type MilestoneName = {
  /**
   * The name of the milestone.
   */
  value?: string | undefined;
  /**
   * The readable name of the milestone.
   */
  displayValue?: string | undefined;
};

/** @internal */
export const MilestoneName$inboundSchema: z.ZodType<
  MilestoneName,
  z.ZodTypeDef,
  unknown
> = z.object({
  value: z.string().optional(),
  displayValue: z.string().optional(),
});

/** @internal */
export type MilestoneName$Outbound = {
  value?: string | undefined;
  displayValue?: string | undefined;
};

/** @internal */
export const MilestoneName$outboundSchema: z.ZodType<
  MilestoneName$Outbound,
  z.ZodTypeDef,
  MilestoneName
> = z.object({
  value: z.string().optional(),
  displayValue: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MilestoneName$ {
  /** @deprecated use `MilestoneName$inboundSchema` instead. */
  export const inboundSchema = MilestoneName$inboundSchema;
  /** @deprecated use `MilestoneName$outboundSchema` instead. */
  export const outboundSchema = MilestoneName$outboundSchema;
  /** @deprecated use `MilestoneName$Outbound` instead. */
  export type Outbound = MilestoneName$Outbound;
}

export function milestoneNameToJSON(milestoneName: MilestoneName): string {
  return JSON.stringify(MilestoneName$outboundSchema.parse(milestoneName));
}

export function milestoneNameFromJSON(
  jsonString: string,
): SafeParseResult<MilestoneName, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MilestoneName$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MilestoneName' from JSON`,
  );
}
