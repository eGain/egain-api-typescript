/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

/**
 * This schema contains general information about the topic.
 */
export type TopicAISearchResult = {
  /**
   * Name of Topic.
   */
  name: string;
  /**
   * Number of articles within the topic.
   */
  articleCountInTopic?: number | undefined;
  /**
   * Number of articles in this topic and all sub-topics.
   */
  articleCountInTopicTree?: number | undefined;
  /**
   * The ID of the user that created this resource.
   */
  createdBy?: number | undefined;
  createdDate?: Date | undefined;
  departmentId?: string | undefined;
  /**
   * The ID of the user that modified this resource.
   */
  lastModifiedBy?: number | undefined;
  lastModifiedDate?: Date | undefined;
  id: string;
  childCount?: number | undefined;
};

/** @internal */
export const TopicAISearchResult$inboundSchema: z.ZodType<
  TopicAISearchResult,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  articleCountInTopic: z.number().int().optional(),
  articleCountInTopicTree: z.number().int().optional(),
  createdBy: z.number().int().optional(),
  createdDate: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  departmentId: z.string().optional(),
  lastModifiedBy: z.number().int().optional(),
  lastModifiedDate: z.string().datetime({ offset: true }).transform(v =>
    new Date(v)
  ).optional(),
  id: z.string(),
  childCount: z.number().int().optional(),
});

/** @internal */
export type TopicAISearchResult$Outbound = {
  name: string;
  articleCountInTopic?: number | undefined;
  articleCountInTopicTree?: number | undefined;
  createdBy?: number | undefined;
  createdDate?: string | undefined;
  departmentId?: string | undefined;
  lastModifiedBy?: number | undefined;
  lastModifiedDate?: string | undefined;
  id: string;
  childCount?: number | undefined;
};

/** @internal */
export const TopicAISearchResult$outboundSchema: z.ZodType<
  TopicAISearchResult$Outbound,
  z.ZodTypeDef,
  TopicAISearchResult
> = z.object({
  name: z.string(),
  articleCountInTopic: z.number().int().optional(),
  articleCountInTopicTree: z.number().int().optional(),
  createdBy: z.number().int().optional(),
  createdDate: z.date().transform(v => v.toISOString()).optional(),
  departmentId: z.string().optional(),
  lastModifiedBy: z.number().int().optional(),
  lastModifiedDate: z.date().transform(v => v.toISOString()).optional(),
  id: z.string(),
  childCount: z.number().int().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TopicAISearchResult$ {
  /** @deprecated use `TopicAISearchResult$inboundSchema` instead. */
  export const inboundSchema = TopicAISearchResult$inboundSchema;
  /** @deprecated use `TopicAISearchResult$outboundSchema` instead. */
  export const outboundSchema = TopicAISearchResult$outboundSchema;
  /** @deprecated use `TopicAISearchResult$Outbound` instead. */
  export type Outbound = TopicAISearchResult$Outbound;
}

export function topicAISearchResultToJSON(
  topicAISearchResult: TopicAISearchResult,
): string {
  return JSON.stringify(
    TopicAISearchResult$outboundSchema.parse(topicAISearchResult),
  );
}

export function topicAISearchResultFromJSON(
  jsonString: string,
): SafeParseResult<TopicAISearchResult, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TopicAISearchResult$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TopicAISearchResult' from JSON`,
  );
}
