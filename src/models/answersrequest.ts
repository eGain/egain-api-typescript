/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

/**
 * The channel where the query originated, e.g., directly from the portal or via a custom integration.
 */
export const AnswersRequestType = {
  Portal: "portal",
  Custom: "custom",
} as const;
/**
 * The channel where the query originated, e.g., directly from the portal or via a custom integration.
 */
export type AnswersRequestType = ClosedEnum<typeof AnswersRequestType>;

export type AnswersRequestChannel = {
  /**
   * The channel where the query originated, e.g., directly from the portal or via a custom integration.
   */
  type?: AnswersRequestType | undefined;
  /**
   * A descriptive name for the channel (e.g., "web", "mobile app", "agent console").
   */
  name?: string | undefined;
};

export type AnswersRequest = {
  channel?: AnswersRequestChannel | undefined;
  /**
   * Unique ID for this specific API call or event.
   */
  eventId?: string | undefined;
  /**
   * ID that ties multiple API calls to the same user session. Will be used as part of to tie events back to a session.
   */
  sessionId?: string | undefined;
};

/** @internal */
export const AnswersRequestType$inboundSchema: z.ZodNativeEnum<
  typeof AnswersRequestType
> = z.nativeEnum(AnswersRequestType);

/** @internal */
export const AnswersRequestType$outboundSchema: z.ZodNativeEnum<
  typeof AnswersRequestType
> = AnswersRequestType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AnswersRequestType$ {
  /** @deprecated use `AnswersRequestType$inboundSchema` instead. */
  export const inboundSchema = AnswersRequestType$inboundSchema;
  /** @deprecated use `AnswersRequestType$outboundSchema` instead. */
  export const outboundSchema = AnswersRequestType$outboundSchema;
}

/** @internal */
export const AnswersRequestChannel$inboundSchema: z.ZodType<
  AnswersRequestChannel,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: AnswersRequestType$inboundSchema.default("custom"),
  name: z.string().optional(),
});

/** @internal */
export type AnswersRequestChannel$Outbound = {
  type: string;
  name?: string | undefined;
};

/** @internal */
export const AnswersRequestChannel$outboundSchema: z.ZodType<
  AnswersRequestChannel$Outbound,
  z.ZodTypeDef,
  AnswersRequestChannel
> = z.object({
  type: AnswersRequestType$outboundSchema.default("custom"),
  name: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AnswersRequestChannel$ {
  /** @deprecated use `AnswersRequestChannel$inboundSchema` instead. */
  export const inboundSchema = AnswersRequestChannel$inboundSchema;
  /** @deprecated use `AnswersRequestChannel$outboundSchema` instead. */
  export const outboundSchema = AnswersRequestChannel$outboundSchema;
  /** @deprecated use `AnswersRequestChannel$Outbound` instead. */
  export type Outbound = AnswersRequestChannel$Outbound;
}

export function answersRequestChannelToJSON(
  answersRequestChannel: AnswersRequestChannel,
): string {
  return JSON.stringify(
    AnswersRequestChannel$outboundSchema.parse(answersRequestChannel),
  );
}

export function answersRequestChannelFromJSON(
  jsonString: string,
): SafeParseResult<AnswersRequestChannel, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AnswersRequestChannel$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AnswersRequestChannel' from JSON`,
  );
}

/** @internal */
export const AnswersRequest$inboundSchema: z.ZodType<
  AnswersRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  channel: z.lazy(() => AnswersRequestChannel$inboundSchema).optional(),
  eventId: z.string().optional(),
  sessionId: z.string().optional(),
});

/** @internal */
export type AnswersRequest$Outbound = {
  channel?: AnswersRequestChannel$Outbound | undefined;
  eventId?: string | undefined;
  sessionId?: string | undefined;
};

/** @internal */
export const AnswersRequest$outboundSchema: z.ZodType<
  AnswersRequest$Outbound,
  z.ZodTypeDef,
  AnswersRequest
> = z.object({
  channel: z.lazy(() => AnswersRequestChannel$outboundSchema).optional(),
  eventId: z.string().optional(),
  sessionId: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AnswersRequest$ {
  /** @deprecated use `AnswersRequest$inboundSchema` instead. */
  export const inboundSchema = AnswersRequest$inboundSchema;
  /** @deprecated use `AnswersRequest$outboundSchema` instead. */
  export const outboundSchema = AnswersRequest$outboundSchema;
  /** @deprecated use `AnswersRequest$Outbound` instead. */
  export type Outbound = AnswersRequest$Outbound;
}

export function answersRequestToJSON(answersRequest: AnswersRequest): string {
  return JSON.stringify(AnswersRequest$outboundSchema.parse(answersRequest));
}

export function answersRequestFromJSON(
  jsonString: string,
): SafeParseResult<AnswersRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AnswersRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AnswersRequest' from JSON`,
  );
}
