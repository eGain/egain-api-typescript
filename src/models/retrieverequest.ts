/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

/**
 * The channel where the query originated, e.g., directly from the portal or via a custom integration.
 */
export const RetrieveRequestType = {
  Portal: "portal",
  Custom: "custom",
} as const;
/**
 * The channel where the query originated, e.g., directly from the portal or via a custom integration.
 */
export type RetrieveRequestType = ClosedEnum<typeof RetrieveRequestType>;

export type RetrieveRequestChannel = {
  /**
   * The channel where the query originated, e.g., directly from the portal or via a custom integration.
   */
  type?: RetrieveRequestType | undefined;
  /**
   * A descriptive name for the channel (e.g., "web", "mobile app", "agent console").
   */
  name?: string | undefined;
};

export type RetrieveRequest = {
  channel?: RetrieveRequestChannel | undefined;
  /**
   * Unique ID for this specific API call or event.
   */
  eventId?: string | undefined;
  /**
   * ID that ties multiple API calls to the same user session. Will be used as part of to tie events back to a session.
   */
  sessionId?: string | undefined;
};

/** @internal */
export const RetrieveRequestType$inboundSchema: z.ZodNativeEnum<
  typeof RetrieveRequestType
> = z.nativeEnum(RetrieveRequestType);

/** @internal */
export const RetrieveRequestType$outboundSchema: z.ZodNativeEnum<
  typeof RetrieveRequestType
> = RetrieveRequestType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RetrieveRequestType$ {
  /** @deprecated use `RetrieveRequestType$inboundSchema` instead. */
  export const inboundSchema = RetrieveRequestType$inboundSchema;
  /** @deprecated use `RetrieveRequestType$outboundSchema` instead. */
  export const outboundSchema = RetrieveRequestType$outboundSchema;
}

/** @internal */
export const RetrieveRequestChannel$inboundSchema: z.ZodType<
  RetrieveRequestChannel,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: RetrieveRequestType$inboundSchema.default("custom"),
  name: z.string().optional(),
});

/** @internal */
export type RetrieveRequestChannel$Outbound = {
  type: string;
  name?: string | undefined;
};

/** @internal */
export const RetrieveRequestChannel$outboundSchema: z.ZodType<
  RetrieveRequestChannel$Outbound,
  z.ZodTypeDef,
  RetrieveRequestChannel
> = z.object({
  type: RetrieveRequestType$outboundSchema.default("custom"),
  name: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RetrieveRequestChannel$ {
  /** @deprecated use `RetrieveRequestChannel$inboundSchema` instead. */
  export const inboundSchema = RetrieveRequestChannel$inboundSchema;
  /** @deprecated use `RetrieveRequestChannel$outboundSchema` instead. */
  export const outboundSchema = RetrieveRequestChannel$outboundSchema;
  /** @deprecated use `RetrieveRequestChannel$Outbound` instead. */
  export type Outbound = RetrieveRequestChannel$Outbound;
}

export function retrieveRequestChannelToJSON(
  retrieveRequestChannel: RetrieveRequestChannel,
): string {
  return JSON.stringify(
    RetrieveRequestChannel$outboundSchema.parse(retrieveRequestChannel),
  );
}

export function retrieveRequestChannelFromJSON(
  jsonString: string,
): SafeParseResult<RetrieveRequestChannel, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RetrieveRequestChannel$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RetrieveRequestChannel' from JSON`,
  );
}

/** @internal */
export const RetrieveRequest$inboundSchema: z.ZodType<
  RetrieveRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  channel: z.lazy(() => RetrieveRequestChannel$inboundSchema).optional(),
  eventId: z.string().optional(),
  sessionId: z.string().optional(),
});

/** @internal */
export type RetrieveRequest$Outbound = {
  channel?: RetrieveRequestChannel$Outbound | undefined;
  eventId?: string | undefined;
  sessionId?: string | undefined;
};

/** @internal */
export const RetrieveRequest$outboundSchema: z.ZodType<
  RetrieveRequest$Outbound,
  z.ZodTypeDef,
  RetrieveRequest
> = z.object({
  channel: z.lazy(() => RetrieveRequestChannel$outboundSchema).optional(),
  eventId: z.string().optional(),
  sessionId: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RetrieveRequest$ {
  /** @deprecated use `RetrieveRequest$inboundSchema` instead. */
  export const inboundSchema = RetrieveRequest$inboundSchema;
  /** @deprecated use `RetrieveRequest$outboundSchema` instead. */
  export const outboundSchema = RetrieveRequest$outboundSchema;
  /** @deprecated use `RetrieveRequest$Outbound` instead. */
  export type Outbound = RetrieveRequest$Outbound;
}

export function retrieveRequestToJSON(
  retrieveRequest: RetrieveRequest,
): string {
  return JSON.stringify(RetrieveRequest$outboundSchema.parse(retrieveRequest));
}

export function retrieveRequestFromJSON(
  jsonString: string,
): SafeParseResult<RetrieveRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RetrieveRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RetrieveRequest' from JSON`,
  );
}
