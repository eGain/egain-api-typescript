/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import {
  ArticleResult,
  ArticleResult$inboundSchema,
  ArticleResult$Outbound,
  ArticleResult$outboundSchema,
} from "./articleresult.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  PaginationInfo,
  PaginationInfo$inboundSchema,
  PaginationInfo$Outbound,
  PaginationInfo$outboundSchema,
} from "./paginationinfo.js";

/**
 * One or more instances of an Article result.
 */
export type ArticleResults = {
  /**
   * Article details
   *
   * @remarks
   */
  articles?: Array<ArticleResult> | undefined;
  paginationInfo?: PaginationInfo | undefined;
};

/** @internal */
export const ArticleResults$inboundSchema: z.ZodType<
  ArticleResults,
  z.ZodTypeDef,
  unknown
> = z.object({
  articles: z.array(ArticleResult$inboundSchema).optional(),
  paginationInfo: PaginationInfo$inboundSchema.optional(),
});

/** @internal */
export type ArticleResults$Outbound = {
  articles?: Array<ArticleResult$Outbound> | undefined;
  paginationInfo?: PaginationInfo$Outbound | undefined;
};

/** @internal */
export const ArticleResults$outboundSchema: z.ZodType<
  ArticleResults$Outbound,
  z.ZodTypeDef,
  ArticleResults
> = z.object({
  articles: z.array(ArticleResult$outboundSchema).optional(),
  paginationInfo: PaginationInfo$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ArticleResults$ {
  /** @deprecated use `ArticleResults$inboundSchema` instead. */
  export const inboundSchema = ArticleResults$inboundSchema;
  /** @deprecated use `ArticleResults$outboundSchema` instead. */
  export const outboundSchema = ArticleResults$outboundSchema;
  /** @deprecated use `ArticleResults$Outbound` instead. */
  export type Outbound = ArticleResults$Outbound;
}

export function articleResultsToJSON(articleResults: ArticleResults): string {
  return JSON.stringify(ArticleResults$outboundSchema.parse(articleResults));
}

export function articleResultsFromJSON(
  jsonString: string,
): SafeParseResult<ArticleResults, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ArticleResults$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ArticleResults' from JSON`,
  );
}
