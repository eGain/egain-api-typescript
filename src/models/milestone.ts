/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  MilestoneName,
  MilestoneName$inboundSchema,
  MilestoneName$Outbound,
  MilestoneName$outboundSchema,
} from "./milestonename.js";

/**
 * A resource's workflow milestone.
 */
export type Milestone = {
  /**
   * The identifiers of the milestone.
   */
  name?: MilestoneName | undefined;
};

/** @internal */
export const Milestone$inboundSchema: z.ZodType<
  Milestone,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: MilestoneName$inboundSchema.optional(),
});

/** @internal */
export type Milestone$Outbound = {
  name?: MilestoneName$Outbound | undefined;
};

/** @internal */
export const Milestone$outboundSchema: z.ZodType<
  Milestone$Outbound,
  z.ZodTypeDef,
  Milestone
> = z.object({
  name: MilestoneName$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Milestone$ {
  /** @deprecated use `Milestone$inboundSchema` instead. */
  export const inboundSchema = Milestone$inboundSchema;
  /** @deprecated use `Milestone$outboundSchema` instead. */
  export const outboundSchema = Milestone$outboundSchema;
  /** @deprecated use `Milestone$Outbound` instead. */
  export type Outbound = Milestone$Outbound;
}

export function milestoneToJSON(milestone: Milestone): string {
  return JSON.stringify(Milestone$outboundSchema.parse(milestone));
}

export function milestoneFromJSON(
  jsonString: string,
): SafeParseResult<Milestone, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Milestone$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Milestone' from JSON`,
  );
}
