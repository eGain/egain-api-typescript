/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import {
  ArticleAISearchResult,
  ArticleAISearchResult$inboundSchema,
  ArticleAISearchResult$Outbound,
  ArticleAISearchResult$outboundSchema,
} from "./articleaisearchresult.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  PaginationInfo,
  PaginationInfo$inboundSchema,
  PaginationInfo$Outbound,
  PaginationInfo$outboundSchema,
} from "./paginationinfo.js";
import {
  TopicAISearchResult,
  TopicAISearchResult$inboundSchema,
  TopicAISearchResult$Outbound,
  TopicAISearchResult$outboundSchema,
} from "./topicaisearchresult.js";

/**
 * The channel where the query originated, e.g., directly from the portal or via a custom integration.
 */
export const AISearchResponseType = {
  Portal: "portal",
  Custom: "custom",
} as const;
/**
 * The channel where the query originated, e.g., directly from the portal or via a custom integration.
 */
export type AISearchResponseType = ClosedEnum<typeof AISearchResponseType>;

export type AISearchResponseChannel = {
  /**
   * The channel where the query originated, e.g., directly from the portal or via a custom integration.
   */
  type: AISearchResponseType;
  /**
   * The name of the channel.
   */
  name?: string | undefined;
};

/**
 * Top search results with relevance scores
 */
export type SearchResults = {
  article?: Array<ArticleAISearchResult> | undefined;
  topic?: Array<TopicAISearchResult> | undefined;
};

export type AISearchResponse = {
  channel?: AISearchResponseChannel | undefined;
  /**
   * Top search results with relevance scores
   */
  searchResults?: SearchResults | undefined;
  paginationInfo?: PaginationInfo | undefined;
};

/** @internal */
export const AISearchResponseType$inboundSchema: z.ZodNativeEnum<
  typeof AISearchResponseType
> = z.nativeEnum(AISearchResponseType);

/** @internal */
export const AISearchResponseType$outboundSchema: z.ZodNativeEnum<
  typeof AISearchResponseType
> = AISearchResponseType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AISearchResponseType$ {
  /** @deprecated use `AISearchResponseType$inboundSchema` instead. */
  export const inboundSchema = AISearchResponseType$inboundSchema;
  /** @deprecated use `AISearchResponseType$outboundSchema` instead. */
  export const outboundSchema = AISearchResponseType$outboundSchema;
}

/** @internal */
export const AISearchResponseChannel$inboundSchema: z.ZodType<
  AISearchResponseChannel,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: AISearchResponseType$inboundSchema,
  name: z.string().optional(),
});

/** @internal */
export type AISearchResponseChannel$Outbound = {
  type: string;
  name?: string | undefined;
};

/** @internal */
export const AISearchResponseChannel$outboundSchema: z.ZodType<
  AISearchResponseChannel$Outbound,
  z.ZodTypeDef,
  AISearchResponseChannel
> = z.object({
  type: AISearchResponseType$outboundSchema,
  name: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AISearchResponseChannel$ {
  /** @deprecated use `AISearchResponseChannel$inboundSchema` instead. */
  export const inboundSchema = AISearchResponseChannel$inboundSchema;
  /** @deprecated use `AISearchResponseChannel$outboundSchema` instead. */
  export const outboundSchema = AISearchResponseChannel$outboundSchema;
  /** @deprecated use `AISearchResponseChannel$Outbound` instead. */
  export type Outbound = AISearchResponseChannel$Outbound;
}

export function aiSearchResponseChannelToJSON(
  aiSearchResponseChannel: AISearchResponseChannel,
): string {
  return JSON.stringify(
    AISearchResponseChannel$outboundSchema.parse(aiSearchResponseChannel),
  );
}

export function aiSearchResponseChannelFromJSON(
  jsonString: string,
): SafeParseResult<AISearchResponseChannel, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AISearchResponseChannel$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AISearchResponseChannel' from JSON`,
  );
}

/** @internal */
export const SearchResults$inboundSchema: z.ZodType<
  SearchResults,
  z.ZodTypeDef,
  unknown
> = z.object({
  article: z.array(ArticleAISearchResult$inboundSchema).optional(),
  topic: z.array(TopicAISearchResult$inboundSchema).optional(),
});

/** @internal */
export type SearchResults$Outbound = {
  article?: Array<ArticleAISearchResult$Outbound> | undefined;
  topic?: Array<TopicAISearchResult$Outbound> | undefined;
};

/** @internal */
export const SearchResults$outboundSchema: z.ZodType<
  SearchResults$Outbound,
  z.ZodTypeDef,
  SearchResults
> = z.object({
  article: z.array(ArticleAISearchResult$outboundSchema).optional(),
  topic: z.array(TopicAISearchResult$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchResults$ {
  /** @deprecated use `SearchResults$inboundSchema` instead. */
  export const inboundSchema = SearchResults$inboundSchema;
  /** @deprecated use `SearchResults$outboundSchema` instead. */
  export const outboundSchema = SearchResults$outboundSchema;
  /** @deprecated use `SearchResults$Outbound` instead. */
  export type Outbound = SearchResults$Outbound;
}

export function searchResultsToJSON(searchResults: SearchResults): string {
  return JSON.stringify(SearchResults$outboundSchema.parse(searchResults));
}

export function searchResultsFromJSON(
  jsonString: string,
): SafeParseResult<SearchResults, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SearchResults$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SearchResults' from JSON`,
  );
}

/** @internal */
export const AISearchResponse$inboundSchema: z.ZodType<
  AISearchResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  channel: z.lazy(() => AISearchResponseChannel$inboundSchema).optional(),
  searchResults: z.lazy(() => SearchResults$inboundSchema).optional(),
  paginationInfo: PaginationInfo$inboundSchema.optional(),
});

/** @internal */
export type AISearchResponse$Outbound = {
  channel?: AISearchResponseChannel$Outbound | undefined;
  searchResults?: SearchResults$Outbound | undefined;
  paginationInfo?: PaginationInfo$Outbound | undefined;
};

/** @internal */
export const AISearchResponse$outboundSchema: z.ZodType<
  AISearchResponse$Outbound,
  z.ZodTypeDef,
  AISearchResponse
> = z.object({
  channel: z.lazy(() => AISearchResponseChannel$outboundSchema).optional(),
  searchResults: z.lazy(() => SearchResults$outboundSchema).optional(),
  paginationInfo: PaginationInfo$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AISearchResponse$ {
  /** @deprecated use `AISearchResponse$inboundSchema` instead. */
  export const inboundSchema = AISearchResponse$inboundSchema;
  /** @deprecated use `AISearchResponse$outboundSchema` instead. */
  export const outboundSchema = AISearchResponse$outboundSchema;
  /** @deprecated use `AISearchResponse$Outbound` instead. */
  export type Outbound = AISearchResponse$Outbound;
}

export function aiSearchResponseToJSON(
  aiSearchResponse: AISearchResponse,
): string {
  return JSON.stringify(
    AISearchResponse$outboundSchema.parse(aiSearchResponse),
  );
}

export function aiSearchResponseFromJSON(
  jsonString: string,
): SafeParseResult<AISearchResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AISearchResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AISearchResponse' from JSON`,
  );
}
