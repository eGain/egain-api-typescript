/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

/**
 * Format of the source document (HTML, Doc, or PDF).
 */
export const ReferenceResponseDocType = {
  Html: "HTML",
  Doc: "Doc",
  Pdf: "PDF",
} as const;
/**
 * Format of the source document (HTML, Doc, or PDF).
 */
export type ReferenceResponseDocType = ClosedEnum<
  typeof ReferenceResponseDocType
>;

/**
 * Source Type
 */
export const ReferenceResponseSource = {
  EGainArticle: "eGain Article",
  EGainAttachment: "eGain Attachment",
} as const;
/**
 * Source Type
 */
export type ReferenceResponseSource = ClosedEnum<
  typeof ReferenceResponseSource
>;

/**
 * Defines the relationship between this resource and another object.
 */
export type ReferenceResponseLink = {
  /**
   * Defines the relationship between a linked resource and the current object. <br><br> For example: self, prev, next or an object name such as 'user', 'folder' etc.
   */
  rel?: string | undefined;
  /**
   * The URL that specifies the link's destination.
   */
  href?: string | undefined;
};

/**
 * One document used in generated response
 */
export type ReferenceResponse = {
  /**
   * The ID of the Article. <br><br> An Article ID is composed of a 2-4 letter prefix, followed by a dash and 4-15 digits.
   */
  id: string;
  /**
   * The name of the Article or source content.
   */
  name: string;
  /**
   * Name of the attachment, if an attachment was used as the source content.
   */
  docName?: string | undefined;
  /**
   * Format of the source document (HTML, Doc, or PDF).
   */
  docType: ReferenceResponseDocType;
  /**
   * Source Type
   */
  source: ReferenceResponseSource;
  /**
   * Defines the relationship between this resource and another object.
   */
  link?: ReferenceResponseLink | undefined;
};

/** @internal */
export const ReferenceResponseDocType$inboundSchema: z.ZodNativeEnum<
  typeof ReferenceResponseDocType
> = z.nativeEnum(ReferenceResponseDocType);

/** @internal */
export const ReferenceResponseDocType$outboundSchema: z.ZodNativeEnum<
  typeof ReferenceResponseDocType
> = ReferenceResponseDocType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ReferenceResponseDocType$ {
  /** @deprecated use `ReferenceResponseDocType$inboundSchema` instead. */
  export const inboundSchema = ReferenceResponseDocType$inboundSchema;
  /** @deprecated use `ReferenceResponseDocType$outboundSchema` instead. */
  export const outboundSchema = ReferenceResponseDocType$outboundSchema;
}

/** @internal */
export const ReferenceResponseSource$inboundSchema: z.ZodNativeEnum<
  typeof ReferenceResponseSource
> = z.nativeEnum(ReferenceResponseSource);

/** @internal */
export const ReferenceResponseSource$outboundSchema: z.ZodNativeEnum<
  typeof ReferenceResponseSource
> = ReferenceResponseSource$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ReferenceResponseSource$ {
  /** @deprecated use `ReferenceResponseSource$inboundSchema` instead. */
  export const inboundSchema = ReferenceResponseSource$inboundSchema;
  /** @deprecated use `ReferenceResponseSource$outboundSchema` instead. */
  export const outboundSchema = ReferenceResponseSource$outboundSchema;
}

/** @internal */
export const ReferenceResponseLink$inboundSchema: z.ZodType<
  ReferenceResponseLink,
  z.ZodTypeDef,
  unknown
> = z.object({
  rel: z.string().optional(),
  href: z.string().optional(),
});

/** @internal */
export type ReferenceResponseLink$Outbound = {
  rel?: string | undefined;
  href?: string | undefined;
};

/** @internal */
export const ReferenceResponseLink$outboundSchema: z.ZodType<
  ReferenceResponseLink$Outbound,
  z.ZodTypeDef,
  ReferenceResponseLink
> = z.object({
  rel: z.string().optional(),
  href: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ReferenceResponseLink$ {
  /** @deprecated use `ReferenceResponseLink$inboundSchema` instead. */
  export const inboundSchema = ReferenceResponseLink$inboundSchema;
  /** @deprecated use `ReferenceResponseLink$outboundSchema` instead. */
  export const outboundSchema = ReferenceResponseLink$outboundSchema;
  /** @deprecated use `ReferenceResponseLink$Outbound` instead. */
  export type Outbound = ReferenceResponseLink$Outbound;
}

export function referenceResponseLinkToJSON(
  referenceResponseLink: ReferenceResponseLink,
): string {
  return JSON.stringify(
    ReferenceResponseLink$outboundSchema.parse(referenceResponseLink),
  );
}

export function referenceResponseLinkFromJSON(
  jsonString: string,
): SafeParseResult<ReferenceResponseLink, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ReferenceResponseLink$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ReferenceResponseLink' from JSON`,
  );
}

/** @internal */
export const ReferenceResponse$inboundSchema: z.ZodType<
  ReferenceResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  name: z.string(),
  docName: z.string().optional(),
  docType: ReferenceResponseDocType$inboundSchema,
  source: ReferenceResponseSource$inboundSchema,
  link: z.lazy(() => ReferenceResponseLink$inboundSchema).optional(),
});

/** @internal */
export type ReferenceResponse$Outbound = {
  id: string;
  name: string;
  docName?: string | undefined;
  docType: string;
  source: string;
  link?: ReferenceResponseLink$Outbound | undefined;
};

/** @internal */
export const ReferenceResponse$outboundSchema: z.ZodType<
  ReferenceResponse$Outbound,
  z.ZodTypeDef,
  ReferenceResponse
> = z.object({
  id: z.string(),
  name: z.string(),
  docName: z.string().optional(),
  docType: ReferenceResponseDocType$outboundSchema,
  source: ReferenceResponseSource$outboundSchema,
  link: z.lazy(() => ReferenceResponseLink$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ReferenceResponse$ {
  /** @deprecated use `ReferenceResponse$inboundSchema` instead. */
  export const inboundSchema = ReferenceResponse$inboundSchema;
  /** @deprecated use `ReferenceResponse$outboundSchema` instead. */
  export const outboundSchema = ReferenceResponse$outboundSchema;
  /** @deprecated use `ReferenceResponse$Outbound` instead. */
  export type Outbound = ReferenceResponse$Outbound;
}

export function referenceResponseToJSON(
  referenceResponse: ReferenceResponse,
): string {
  return JSON.stringify(
    ReferenceResponse$outboundSchema.parse(referenceResponse),
  );
}

export function referenceResponseFromJSON(
  jsonString: string,
): SafeParseResult<ReferenceResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ReferenceResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ReferenceResponse' from JSON`,
  );
}
