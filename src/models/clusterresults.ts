/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import {
  ClusterResult,
  ClusterResult$inboundSchema,
  ClusterResult$Outbound,
  ClusterResult$outboundSchema,
} from "./clusterresult.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  PaginationInfo,
  PaginationInfo$inboundSchema,
  PaginationInfo$Outbound,
  PaginationInfo$outboundSchema,
} from "./paginationinfo.js";

/**
 * Success
 */
export type ClusterResults = {
  /**
   * Clusters
   */
  cluster?: Array<ClusterResult> | undefined;
  paginationInfo?: PaginationInfo | undefined;
};

/** @internal */
export const ClusterResults$inboundSchema: z.ZodType<
  ClusterResults,
  z.ZodTypeDef,
  unknown
> = z.object({
  cluster: z.array(ClusterResult$inboundSchema).optional(),
  paginationInfo: PaginationInfo$inboundSchema.optional(),
});

/** @internal */
export type ClusterResults$Outbound = {
  cluster?: Array<ClusterResult$Outbound> | undefined;
  paginationInfo?: PaginationInfo$Outbound | undefined;
};

/** @internal */
export const ClusterResults$outboundSchema: z.ZodType<
  ClusterResults$Outbound,
  z.ZodTypeDef,
  ClusterResults
> = z.object({
  cluster: z.array(ClusterResult$outboundSchema).optional(),
  paginationInfo: PaginationInfo$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClusterResults$ {
  /** @deprecated use `ClusterResults$inboundSchema` instead. */
  export const inboundSchema = ClusterResults$inboundSchema;
  /** @deprecated use `ClusterResults$outboundSchema` instead. */
  export const outboundSchema = ClusterResults$outboundSchema;
  /** @deprecated use `ClusterResults$Outbound` instead. */
  export type Outbound = ClusterResults$Outbound;
}

export function clusterResultsToJSON(clusterResults: ClusterResults): string {
  return JSON.stringify(ClusterResults$outboundSchema.parse(clusterResults));
}

export function clusterResultsFromJSON(
  jsonString: string,
): SafeParseResult<ClusterResults, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ClusterResults$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ClusterResults' from JSON`,
  );
}
