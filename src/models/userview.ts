/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  Link,
  Link$inboundSchema,
  Link$Outbound,
  Link$outboundSchema,
} from "./link.js";

export type UserView = {
  /**
   * The link to the user.
   */
  link?: Array<Link> | undefined;
  /**
   * The first name of the user.
   */
  firstName?: string | undefined;
  /**
   * The last name of the user.
   */
  lastName?: string | undefined;
  /**
   * The ID of the user.
   */
  id?: string | undefined;
};

/** @internal */
export const UserView$inboundSchema: z.ZodType<
  UserView,
  z.ZodTypeDef,
  unknown
> = z.object({
  link: z.array(Link$inboundSchema).optional(),
  firstName: z.string().optional(),
  lastName: z.string().optional(),
  id: z.string().optional(),
});

/** @internal */
export type UserView$Outbound = {
  link?: Array<Link$Outbound> | undefined;
  firstName?: string | undefined;
  lastName?: string | undefined;
  id?: string | undefined;
};

/** @internal */
export const UserView$outboundSchema: z.ZodType<
  UserView$Outbound,
  z.ZodTypeDef,
  UserView
> = z.object({
  link: z.array(Link$outboundSchema).optional(),
  firstName: z.string().optional(),
  lastName: z.string().optional(),
  id: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UserView$ {
  /** @deprecated use `UserView$inboundSchema` instead. */
  export const inboundSchema = UserView$inboundSchema;
  /** @deprecated use `UserView$outboundSchema` instead. */
  export const outboundSchema = UserView$outboundSchema;
  /** @deprecated use `UserView$Outbound` instead. */
  export type Outbound = UserView$Outbound;
}

export function userViewToJSON(userView: UserView): string {
  return JSON.stringify(UserView$outboundSchema.parse(userView));
}

export function userViewFromJSON(
  jsonString: string,
): SafeParseResult<UserView, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UserView$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UserView' from JSON`,
  );
}
