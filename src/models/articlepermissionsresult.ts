/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import {
  ArticlePermissions,
  ArticlePermissions$inboundSchema,
  ArticlePermissions$Outbound,
  ArticlePermissions$outboundSchema,
} from "./articlepermissions.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

/**
 * User permissions on the parent folder.
 */
export type ArticlePermissionsResult = {
  /**
   * ID of Article
   */
  articleID?: string | undefined;
  /**
   * User permissions on the parent folder.
   */
  permissions?: ArticlePermissions | undefined;
};

/** @internal */
export const ArticlePermissionsResult$inboundSchema: z.ZodType<
  ArticlePermissionsResult,
  z.ZodTypeDef,
  unknown
> = z.object({
  articleID: z.string().optional(),
  permissions: ArticlePermissions$inboundSchema.optional(),
});

/** @internal */
export type ArticlePermissionsResult$Outbound = {
  articleID?: string | undefined;
  permissions?: ArticlePermissions$Outbound | undefined;
};

/** @internal */
export const ArticlePermissionsResult$outboundSchema: z.ZodType<
  ArticlePermissionsResult$Outbound,
  z.ZodTypeDef,
  ArticlePermissionsResult
> = z.object({
  articleID: z.string().optional(),
  permissions: ArticlePermissions$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ArticlePermissionsResult$ {
  /** @deprecated use `ArticlePermissionsResult$inboundSchema` instead. */
  export const inboundSchema = ArticlePermissionsResult$inboundSchema;
  /** @deprecated use `ArticlePermissionsResult$outboundSchema` instead. */
  export const outboundSchema = ArticlePermissionsResult$outboundSchema;
  /** @deprecated use `ArticlePermissionsResult$Outbound` instead. */
  export type Outbound = ArticlePermissionsResult$Outbound;
}

export function articlePermissionsResultToJSON(
  articlePermissionsResult: ArticlePermissionsResult,
): string {
  return JSON.stringify(
    ArticlePermissionsResult$outboundSchema.parse(articlePermissionsResult),
  );
}

export function articlePermissionsResultFromJSON(
  jsonString: string,
): SafeParseResult<ArticlePermissionsResult, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ArticlePermissionsResult$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ArticlePermissionsResult' from JSON`,
  );
}
