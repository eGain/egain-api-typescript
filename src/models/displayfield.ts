/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type DisplayField = {
  /**
   * The ID of the Display Field.<br>The ID is composed of a 2-4 letter prefix, followed by a dash and 4-15 digits.
   */
  id?: string | undefined;
  /**
   * content in bytes. 2 MB max
   */
  content?: string | undefined;
  /**
   * name of the field
   */
  fieldName?: any | undefined;
};

/** @internal */
export const DisplayField$inboundSchema: z.ZodType<
  DisplayField,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  content: z.string().optional(),
  fieldName: z.any().optional(),
});

/** @internal */
export type DisplayField$Outbound = {
  id?: string | undefined;
  content?: string | undefined;
  fieldName?: any | undefined;
};

/** @internal */
export const DisplayField$outboundSchema: z.ZodType<
  DisplayField$Outbound,
  z.ZodTypeDef,
  DisplayField
> = z.object({
  id: z.string().optional(),
  content: z.string().optional(),
  fieldName: z.any().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DisplayField$ {
  /** @deprecated use `DisplayField$inboundSchema` instead. */
  export const inboundSchema = DisplayField$inboundSchema;
  /** @deprecated use `DisplayField$outboundSchema` instead. */
  export const outboundSchema = DisplayField$outboundSchema;
  /** @deprecated use `DisplayField$Outbound` instead. */
  export type Outbound = DisplayField$Outbound;
}

export function displayFieldToJSON(displayField: DisplayField): string {
  return JSON.stringify(DisplayField$outboundSchema.parse(displayField));
}

export function displayFieldFromJSON(
  jsonString: string,
): SafeParseResult<DisplayField, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DisplayField$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DisplayField' from JSON`,
  );
}
