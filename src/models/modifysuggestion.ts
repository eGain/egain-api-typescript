/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import {
  AttachmentForCreateSuggestion,
  AttachmentForCreateSuggestion$inboundSchema,
  AttachmentForCreateSuggestion$Outbound,
  AttachmentForCreateSuggestion$outboundSchema,
} from "./attachmentforcreatesuggestion.js";
import {
  CustomAttribute,
  CustomAttribute$inboundSchema,
  CustomAttribute$Outbound,
  CustomAttribute$outboundSchema,
} from "./customattribute.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  Link,
  Link$inboundSchema,
  Link$Outbound,
  Link$outboundSchema,
} from "./link.js";

/**
 * Details of Attachments for the Suggestion.
 */
export type ModifySuggestionAttachments = {
  /**
   * The list of Attachments.<br><br>Required if <code>content</code> and <code>Attachments.unlink</code> are both _not_ provided.
   */
  attachment?: Array<AttachmentForCreateSuggestion> | undefined;
  /**
   * If provided with references to Attachments, <code>unlink</code> removes the Attachment from the Suggestion.<br><br>If the Attachment has no associated objects, it will be deleted.<br><br>Required if <code>content</code> and <code>Attachments.Attachment</code> are both _not_ provided.
   */
  unlink?: Array<Link> | undefined;
};

/**
 * This schema contains information about modifying a Suggestion.
 */
export type ModifySuggestion = {
  /**
   * The ID of the Suggestion. A Suggestion ID is composed of a 2-4 letter prefix, followed by a dash and 4-15 digits.
   */
  id: string;
  /**
   * The name of the Suggestion.
   */
  name?: string | undefined;
  /**
   * The description of the Suggestion.
   */
  description?: string | undefined;
  /**
   * The content of the Suggestion.
   */
  content?: string | undefined;
  /**
   * The date on which the Suggestion was last modified.
   */
  modifiedDate: string;
  /**
   * Details of Attachments for the Suggestion.
   */
  attachments?: ModifySuggestionAttachments | undefined;
  /**
   * Custom Attributes of the Suggestion.
   */
  customAttributes?: Array<CustomAttribute> | undefined;
};

/** @internal */
export const ModifySuggestionAttachments$inboundSchema: z.ZodType<
  ModifySuggestionAttachments,
  z.ZodTypeDef,
  unknown
> = z.object({
  attachment: z.array(AttachmentForCreateSuggestion$inboundSchema).optional(),
  unlink: z.array(Link$inboundSchema).optional(),
});

/** @internal */
export type ModifySuggestionAttachments$Outbound = {
  attachment?: Array<AttachmentForCreateSuggestion$Outbound> | undefined;
  unlink?: Array<Link$Outbound> | undefined;
};

/** @internal */
export const ModifySuggestionAttachments$outboundSchema: z.ZodType<
  ModifySuggestionAttachments$Outbound,
  z.ZodTypeDef,
  ModifySuggestionAttachments
> = z.object({
  attachment: z.array(AttachmentForCreateSuggestion$outboundSchema).optional(),
  unlink: z.array(Link$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ModifySuggestionAttachments$ {
  /** @deprecated use `ModifySuggestionAttachments$inboundSchema` instead. */
  export const inboundSchema = ModifySuggestionAttachments$inboundSchema;
  /** @deprecated use `ModifySuggestionAttachments$outboundSchema` instead. */
  export const outboundSchema = ModifySuggestionAttachments$outboundSchema;
  /** @deprecated use `ModifySuggestionAttachments$Outbound` instead. */
  export type Outbound = ModifySuggestionAttachments$Outbound;
}

export function modifySuggestionAttachmentsToJSON(
  modifySuggestionAttachments: ModifySuggestionAttachments,
): string {
  return JSON.stringify(
    ModifySuggestionAttachments$outboundSchema.parse(
      modifySuggestionAttachments,
    ),
  );
}

export function modifySuggestionAttachmentsFromJSON(
  jsonString: string,
): SafeParseResult<ModifySuggestionAttachments, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ModifySuggestionAttachments$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ModifySuggestionAttachments' from JSON`,
  );
}

/** @internal */
export const ModifySuggestion$inboundSchema: z.ZodType<
  ModifySuggestion,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  name: z.string().optional(),
  description: z.string().optional(),
  content: z.string().optional(),
  modifiedDate: z.string(),
  attachments: z.lazy(() => ModifySuggestionAttachments$inboundSchema)
    .optional(),
  customAttributes: z.array(CustomAttribute$inboundSchema).optional(),
});

/** @internal */
export type ModifySuggestion$Outbound = {
  id: string;
  name?: string | undefined;
  description?: string | undefined;
  content?: string | undefined;
  modifiedDate: string;
  attachments?: ModifySuggestionAttachments$Outbound | undefined;
  customAttributes?: Array<CustomAttribute$Outbound> | undefined;
};

/** @internal */
export const ModifySuggestion$outboundSchema: z.ZodType<
  ModifySuggestion$Outbound,
  z.ZodTypeDef,
  ModifySuggestion
> = z.object({
  id: z.string(),
  name: z.string().optional(),
  description: z.string().optional(),
  content: z.string().optional(),
  modifiedDate: z.string(),
  attachments: z.lazy(() => ModifySuggestionAttachments$outboundSchema)
    .optional(),
  customAttributes: z.array(CustomAttribute$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ModifySuggestion$ {
  /** @deprecated use `ModifySuggestion$inboundSchema` instead. */
  export const inboundSchema = ModifySuggestion$inboundSchema;
  /** @deprecated use `ModifySuggestion$outboundSchema` instead. */
  export const outboundSchema = ModifySuggestion$outboundSchema;
  /** @deprecated use `ModifySuggestion$Outbound` instead. */
  export type Outbound = ModifySuggestion$Outbound;
}

export function modifySuggestionToJSON(
  modifySuggestion: ModifySuggestion,
): string {
  return JSON.stringify(
    ModifySuggestion$outboundSchema.parse(modifySuggestion),
  );
}

export function modifySuggestionFromJSON(
  jsonString: string,
): SafeParseResult<ModifySuggestion, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ModifySuggestion$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ModifySuggestion' from JSON`,
  );
}
