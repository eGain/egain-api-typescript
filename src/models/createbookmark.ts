/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

/**
 * The type of the user associated with the bookmark.
 */
export const UserType = {
  Customer: "customer",
  Agent: "agent",
} as const;
/**
 * The type of the user associated with the bookmark.
 */
export type UserType = ClosedEnum<typeof UserType>;

export type CreateBookmark = {
  /**
   * The ID of the article or topic associated with this bookmark. A case ID or an article ID is composed of a 2-4 letter prefix, followed by a dash and 15 digits.<br><br>This attribute must be provided if <code>resourceType</code> is set to "1 - Article" or "2 - Topic".
   */
  resourceId?: string | undefined;
  /**
   * The ID of the user associated with the bookmark.
   */
  userId?: string | undefined;
  /**
   * The type of the user associated with the bookmark.
   */
  userType?: UserType | undefined;
  /**
   * The name of the bookmark.
   */
  bookmarkName?: string | undefined;
  /**
   * Determines the type of resource:
   *
   * @remarks
   * <li>1 - Article</li>
   * <li>2 - Topic</li>
   * <li>3 - External Content</li>
   */
  resourceType?: number | undefined;
  /**
   * The name of the resource associated with the bookmark.<br><br>This attribute is only available for article and topic bookmarks.
   */
  resourceName?: string | undefined;
  /**
   * The ID of the external content.<br><br>This attribute must be provided if <code>resourceType</code> is set to "3 - External Content".
   */
  externalContentId?: string | undefined;
};

/** @internal */
export const UserType$inboundSchema: z.ZodNativeEnum<typeof UserType> = z
  .nativeEnum(UserType);

/** @internal */
export const UserType$outboundSchema: z.ZodNativeEnum<typeof UserType> =
  UserType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UserType$ {
  /** @deprecated use `UserType$inboundSchema` instead. */
  export const inboundSchema = UserType$inboundSchema;
  /** @deprecated use `UserType$outboundSchema` instead. */
  export const outboundSchema = UserType$outboundSchema;
}

/** @internal */
export const CreateBookmark$inboundSchema: z.ZodType<
  CreateBookmark,
  z.ZodTypeDef,
  unknown
> = z.object({
  resourceId: z.string().optional(),
  userId: z.string().optional(),
  userType: UserType$inboundSchema.optional(),
  bookmarkName: z.string().optional(),
  resourceType: z.number().int().optional(),
  resourceName: z.string().optional(),
  externalContentId: z.string().optional(),
});

/** @internal */
export type CreateBookmark$Outbound = {
  resourceId?: string | undefined;
  userId?: string | undefined;
  userType?: string | undefined;
  bookmarkName?: string | undefined;
  resourceType?: number | undefined;
  resourceName?: string | undefined;
  externalContentId?: string | undefined;
};

/** @internal */
export const CreateBookmark$outboundSchema: z.ZodType<
  CreateBookmark$Outbound,
  z.ZodTypeDef,
  CreateBookmark
> = z.object({
  resourceId: z.string().optional(),
  userId: z.string().optional(),
  userType: UserType$outboundSchema.optional(),
  bookmarkName: z.string().optional(),
  resourceType: z.number().int().optional(),
  resourceName: z.string().optional(),
  externalContentId: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateBookmark$ {
  /** @deprecated use `CreateBookmark$inboundSchema` instead. */
  export const inboundSchema = CreateBookmark$inboundSchema;
  /** @deprecated use `CreateBookmark$outboundSchema` instead. */
  export const outboundSchema = CreateBookmark$outboundSchema;
  /** @deprecated use `CreateBookmark$Outbound` instead. */
  export type Outbound = CreateBookmark$Outbound;
}

export function createBookmarkToJSON(createBookmark: CreateBookmark): string {
  return JSON.stringify(CreateBookmark$outboundSchema.parse(createBookmark));
}

export function createBookmarkFromJSON(
  jsonString: string,
): SafeParseResult<CreateBookmark, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateBookmark$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateBookmark' from JSON`,
  );
}
