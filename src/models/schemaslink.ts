/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type SchemasLink = {
  /**
   * Defines the relationship between a linked resource and the current document.<br><br>For example: self, prev, next or an object name such as 'user', 'folder' etc.
   */
  rel?: string | undefined;
  /**
   * The URL that specifies the link's destination.
   */
  href?: string | undefined;
  /**
   * Determines if this is a default link.
   */
  default?: boolean | undefined;
};

/** @internal */
export const SchemasLink$inboundSchema: z.ZodType<
  SchemasLink,
  z.ZodTypeDef,
  unknown
> = z.object({
  rel: z.string().optional(),
  href: z.string().optional(),
  _default: z.boolean().optional(),
}).transform((v) => {
  return remap$(v, {
    "_default": "default",
  });
});

/** @internal */
export type SchemasLink$Outbound = {
  rel?: string | undefined;
  href?: string | undefined;
  _default?: boolean | undefined;
};

/** @internal */
export const SchemasLink$outboundSchema: z.ZodType<
  SchemasLink$Outbound,
  z.ZodTypeDef,
  SchemasLink
> = z.object({
  rel: z.string().optional(),
  href: z.string().optional(),
  default: z.boolean().optional(),
}).transform((v) => {
  return remap$(v, {
    default: "_default",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SchemasLink$ {
  /** @deprecated use `SchemasLink$inboundSchema` instead. */
  export const inboundSchema = SchemasLink$inboundSchema;
  /** @deprecated use `SchemasLink$outboundSchema` instead. */
  export const outboundSchema = SchemasLink$outboundSchema;
  /** @deprecated use `SchemasLink$Outbound` instead. */
  export type Outbound = SchemasLink$Outbound;
}

export function schemasLinkToJSON(schemasLink: SchemasLink): string {
  return JSON.stringify(SchemasLink$outboundSchema.parse(schemasLink));
}

export function schemasLinkFromJSON(
  jsonString: string,
): SafeParseResult<SchemasLink, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SchemasLink$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SchemasLink' from JSON`,
  );
}
