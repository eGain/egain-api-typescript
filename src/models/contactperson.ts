/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import {
  Email,
  Email$inboundSchema,
  Email$Outbound,
  Email$outboundSchema,
} from "./email.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  Phone,
  Phone$inboundSchema,
  Phone$Outbound,
  Phone$outboundSchema,
} from "./phone.js";

/**
 * ContactPerson
 */
export type ContactPerson = {
  /**
   * First name of the customer
   */
  firstName: string;
  /**
   * Middle name of the customer
   */
  middleName?: string | undefined;
  /**
   * Last name of the customer
   */
  lastName?: string | undefined;
  /**
   * Email details
   */
  email: Array<Email>;
  /**
   * Phone details
   */
  phone?: Array<Phone> | undefined;
};

/** @internal */
export const ContactPerson$inboundSchema: z.ZodType<
  ContactPerson,
  z.ZodTypeDef,
  unknown
> = z.object({
  firstName: z.string(),
  middleName: z.string().optional(),
  lastName: z.string().optional(),
  email: z.array(Email$inboundSchema),
  phone: z.array(Phone$inboundSchema).optional(),
});

/** @internal */
export type ContactPerson$Outbound = {
  firstName: string;
  middleName?: string | undefined;
  lastName?: string | undefined;
  email: Array<Email$Outbound>;
  phone?: Array<Phone$Outbound> | undefined;
};

/** @internal */
export const ContactPerson$outboundSchema: z.ZodType<
  ContactPerson$Outbound,
  z.ZodTypeDef,
  ContactPerson
> = z.object({
  firstName: z.string(),
  middleName: z.string().optional(),
  lastName: z.string().optional(),
  email: z.array(Email$outboundSchema),
  phone: z.array(Phone$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContactPerson$ {
  /** @deprecated use `ContactPerson$inboundSchema` instead. */
  export const inboundSchema = ContactPerson$inboundSchema;
  /** @deprecated use `ContactPerson$outboundSchema` instead. */
  export const outboundSchema = ContactPerson$outboundSchema;
  /** @deprecated use `ContactPerson$Outbound` instead. */
  export type Outbound = ContactPerson$Outbound;
}

export function contactPersonToJSON(contactPerson: ContactPerson): string {
  return JSON.stringify(ContactPerson$outboundSchema.parse(contactPerson));
}

export function contactPersonFromJSON(
  jsonString: string,
): SafeParseResult<ContactPerson, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ContactPerson$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ContactPerson' from JSON`,
  );
}
