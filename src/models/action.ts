/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import {
  ArticleType,
  ArticleType$inboundSchema,
  ArticleType$Outbound,
  ArticleType$outboundSchema,
} from "./articletype.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  Metadata,
  Metadata$inboundSchema,
  Metadata$Outbound,
  Metadata$outboundSchema,
} from "./metadata.js";

export type Action = {
  /**
   * ID of the action
   */
  id?: string | undefined;
  /**
   * Name of the action
   */
  title?: string | undefined;
  /**
   * type of the action
   */
  type?: string | undefined;
  /**
   * short name of the action
   */
  shortName?: string | undefined;
  /**
   * number of times action was rejected.
   */
  rejectCount?: number | undefined;
  /**
   * number of times action was accepted.
   */
  acceptCount?: number | undefined;
  /**
   * Metadata of action
   */
  metadata?: Array<Metadata> | undefined;
  /**
   * The type of the Article and its attributes.
   */
  articleType?: ArticleType | undefined;
};

/** @internal */
export const Action$inboundSchema: z.ZodType<Action, z.ZodTypeDef, unknown> = z
  .object({
    id: z.string().optional(),
    title: z.string().optional(),
    type: z.string().optional(),
    shortName: z.string().optional(),
    rejectCount: z.number().int().optional(),
    acceptCount: z.number().int().optional(),
    metadata: z.array(Metadata$inboundSchema).optional(),
    articleType: ArticleType$inboundSchema.optional(),
  });

/** @internal */
export type Action$Outbound = {
  id?: string | undefined;
  title?: string | undefined;
  type?: string | undefined;
  shortName?: string | undefined;
  rejectCount?: number | undefined;
  acceptCount?: number | undefined;
  metadata?: Array<Metadata$Outbound> | undefined;
  articleType?: ArticleType$Outbound | undefined;
};

/** @internal */
export const Action$outboundSchema: z.ZodType<
  Action$Outbound,
  z.ZodTypeDef,
  Action
> = z.object({
  id: z.string().optional(),
  title: z.string().optional(),
  type: z.string().optional(),
  shortName: z.string().optional(),
  rejectCount: z.number().int().optional(),
  acceptCount: z.number().int().optional(),
  metadata: z.array(Metadata$outboundSchema).optional(),
  articleType: ArticleType$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Action$ {
  /** @deprecated use `Action$inboundSchema` instead. */
  export const inboundSchema = Action$inboundSchema;
  /** @deprecated use `Action$outboundSchema` instead. */
  export const outboundSchema = Action$outboundSchema;
  /** @deprecated use `Action$Outbound` instead. */
  export type Outbound = Action$Outbound;
}

export function actionToJSON(action: Action): string {
  return JSON.stringify(Action$outboundSchema.parse(action));
}

export function actionFromJSON(
  jsonString: string,
): SafeParseResult<Action, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Action$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Action' from JSON`,
  );
}
