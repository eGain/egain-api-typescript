/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  FolderSummary,
  FolderSummary$inboundSchema,
  FolderSummary$Outbound,
  FolderSummary$outboundSchema,
} from "./foldersummary.js";

/**
 * This schema contains one or more FolderSummary instances.
 */
export type FolderBreadcrumb = {
  /**
   * An instance of FolderSummary.
   */
  folderSummary?: Array<FolderSummary> | undefined;
};

/** @internal */
export const FolderBreadcrumb$inboundSchema: z.ZodType<
  FolderBreadcrumb,
  z.ZodTypeDef,
  unknown
> = z.object({
  folderSummary: z.array(FolderSummary$inboundSchema).optional(),
});

/** @internal */
export type FolderBreadcrumb$Outbound = {
  folderSummary?: Array<FolderSummary$Outbound> | undefined;
};

/** @internal */
export const FolderBreadcrumb$outboundSchema: z.ZodType<
  FolderBreadcrumb$Outbound,
  z.ZodTypeDef,
  FolderBreadcrumb
> = z.object({
  folderSummary: z.array(FolderSummary$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FolderBreadcrumb$ {
  /** @deprecated use `FolderBreadcrumb$inboundSchema` instead. */
  export const inboundSchema = FolderBreadcrumb$inboundSchema;
  /** @deprecated use `FolderBreadcrumb$outboundSchema` instead. */
  export const outboundSchema = FolderBreadcrumb$outboundSchema;
  /** @deprecated use `FolderBreadcrumb$Outbound` instead. */
  export type Outbound = FolderBreadcrumb$Outbound;
}

export function folderBreadcrumbToJSON(
  folderBreadcrumb: FolderBreadcrumb,
): string {
  return JSON.stringify(
    FolderBreadcrumb$outboundSchema.parse(folderBreadcrumb),
  );
}

export function folderBreadcrumbFromJSON(
  jsonString: string,
): SafeParseResult<FolderBreadcrumb, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FolderBreadcrumb$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FolderBreadcrumb' from JSON`,
  );
}
