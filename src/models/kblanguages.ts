/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  KbLanguage,
  KbLanguage$inboundSchema,
  KbLanguage$Outbound,
  KbLanguage$outboundSchema,
} from "./kblanguage.js";

/**
 * KB languages
 */
export type KbLanguages = {
  kbLanguage?: Array<KbLanguage> | undefined;
};

/** @internal */
export const KbLanguages$inboundSchema: z.ZodType<
  KbLanguages,
  z.ZodTypeDef,
  unknown
> = z.object({
  KbLanguage: z.array(KbLanguage$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "KbLanguage": "kbLanguage",
  });
});

/** @internal */
export type KbLanguages$Outbound = {
  KbLanguage?: Array<KbLanguage$Outbound> | undefined;
};

/** @internal */
export const KbLanguages$outboundSchema: z.ZodType<
  KbLanguages$Outbound,
  z.ZodTypeDef,
  KbLanguages
> = z.object({
  kbLanguage: z.array(KbLanguage$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    kbLanguage: "KbLanguage",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace KbLanguages$ {
  /** @deprecated use `KbLanguages$inboundSchema` instead. */
  export const inboundSchema = KbLanguages$inboundSchema;
  /** @deprecated use `KbLanguages$outboundSchema` instead. */
  export const outboundSchema = KbLanguages$outboundSchema;
  /** @deprecated use `KbLanguages$Outbound` instead. */
  export type Outbound = KbLanguages$Outbound;
}

export function kbLanguagesToJSON(kbLanguages: KbLanguages): string {
  return JSON.stringify(KbLanguages$outboundSchema.parse(kbLanguages));
}

export function kbLanguagesFromJSON(
  jsonString: string,
): SafeParseResult<KbLanguages, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => KbLanguages$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'KbLanguages' from JSON`,
  );
}
