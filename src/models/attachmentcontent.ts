/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  Link,
  Link$inboundSchema,
  Link$Outbound,
  Link$outboundSchema,
} from "./link.js";

/**
 * The type of attachment.
 */
export const AttachmentContentType = {
  Internal: "INTERNAL",
  External: "EXTERNAL",
} as const;
/**
 * The type of attachment.
 */
export type AttachmentContentType = ClosedEnum<typeof AttachmentContentType>;

export type AttachmentContent = {
  /**
   * The ID of the attachment.
   */
  attachmentId?: string | undefined;
  /**
   * The name of the attachment.
   */
  name?: string | undefined;
  /**
   * The size of the attachment in bytes. The maximum size is limited to 25MB.
   */
  size?: number | undefined;
  /**
   * The type of attachment.
   */
  type?: AttachmentContentType | undefined;
  /**
   * The type of the content.
   */
  attachmentContentType?: string | undefined;
  /**
   * The streaming URL of the attachment.
   */
  streamingUrl?: string | undefined;
  /**
   * Defines the relationship between this resource and another object.
   */
  link?: Link | undefined;
};

/** @internal */
export const AttachmentContentType$inboundSchema: z.ZodNativeEnum<
  typeof AttachmentContentType
> = z.nativeEnum(AttachmentContentType);

/** @internal */
export const AttachmentContentType$outboundSchema: z.ZodNativeEnum<
  typeof AttachmentContentType
> = AttachmentContentType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AttachmentContentType$ {
  /** @deprecated use `AttachmentContentType$inboundSchema` instead. */
  export const inboundSchema = AttachmentContentType$inboundSchema;
  /** @deprecated use `AttachmentContentType$outboundSchema` instead. */
  export const outboundSchema = AttachmentContentType$outboundSchema;
}

/** @internal */
export const AttachmentContent$inboundSchema: z.ZodType<
  AttachmentContent,
  z.ZodTypeDef,
  unknown
> = z.object({
  attachmentId: z.string().optional(),
  name: z.string().optional(),
  size: z.number().int().optional(),
  type: AttachmentContentType$inboundSchema.optional(),
  attachmentContentType: z.string().optional(),
  streamingUrl: z.string().optional(),
  link: Link$inboundSchema.optional(),
});

/** @internal */
export type AttachmentContent$Outbound = {
  attachmentId?: string | undefined;
  name?: string | undefined;
  size?: number | undefined;
  type?: string | undefined;
  attachmentContentType?: string | undefined;
  streamingUrl?: string | undefined;
  link?: Link$Outbound | undefined;
};

/** @internal */
export const AttachmentContent$outboundSchema: z.ZodType<
  AttachmentContent$Outbound,
  z.ZodTypeDef,
  AttachmentContent
> = z.object({
  attachmentId: z.string().optional(),
  name: z.string().optional(),
  size: z.number().int().optional(),
  type: AttachmentContentType$outboundSchema.optional(),
  attachmentContentType: z.string().optional(),
  streamingUrl: z.string().optional(),
  link: Link$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AttachmentContent$ {
  /** @deprecated use `AttachmentContent$inboundSchema` instead. */
  export const inboundSchema = AttachmentContent$inboundSchema;
  /** @deprecated use `AttachmentContent$outboundSchema` instead. */
  export const outboundSchema = AttachmentContent$outboundSchema;
  /** @deprecated use `AttachmentContent$Outbound` instead. */
  export type Outbound = AttachmentContent$Outbound;
}

export function attachmentContentToJSON(
  attachmentContent: AttachmentContent,
): string {
  return JSON.stringify(
    AttachmentContent$outboundSchema.parse(attachmentContent),
  );
}

export function attachmentContentFromJSON(
  jsonString: string,
): SafeParseResult<AttachmentContent, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AttachmentContent$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AttachmentContent' from JSON`,
  );
}
