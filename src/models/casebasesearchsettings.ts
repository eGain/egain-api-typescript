/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type CasebaseSearchSettings = {
  /**
   * indicates whether to close the Guided Help session upon acceptance of answer
   */
  closeSessionOnAccept?: boolean | undefined;
  /**
   * indicates wheather to reject the Guided Helo session upon rejection of answer
   */
  closeSessionOnReject?: boolean | undefined;
};

/** @internal */
export const CasebaseSearchSettings$inboundSchema: z.ZodType<
  CasebaseSearchSettings,
  z.ZodTypeDef,
  unknown
> = z.object({
  closeSessionOnAccept: z.boolean().optional(),
  closeSessionOnReject: z.boolean().optional(),
});

/** @internal */
export type CasebaseSearchSettings$Outbound = {
  closeSessionOnAccept?: boolean | undefined;
  closeSessionOnReject?: boolean | undefined;
};

/** @internal */
export const CasebaseSearchSettings$outboundSchema: z.ZodType<
  CasebaseSearchSettings$Outbound,
  z.ZodTypeDef,
  CasebaseSearchSettings
> = z.object({
  closeSessionOnAccept: z.boolean().optional(),
  closeSessionOnReject: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CasebaseSearchSettings$ {
  /** @deprecated use `CasebaseSearchSettings$inboundSchema` instead. */
  export const inboundSchema = CasebaseSearchSettings$inboundSchema;
  /** @deprecated use `CasebaseSearchSettings$outboundSchema` instead. */
  export const outboundSchema = CasebaseSearchSettings$outboundSchema;
  /** @deprecated use `CasebaseSearchSettings$Outbound` instead. */
  export type Outbound = CasebaseSearchSettings$Outbound;
}

export function casebaseSearchSettingsToJSON(
  casebaseSearchSettings: CasebaseSearchSettings,
): string {
  return JSON.stringify(
    CasebaseSearchSettings$outboundSchema.parse(casebaseSearchSettings),
  );
}

export function casebaseSearchSettingsFromJSON(
  jsonString: string,
): SafeParseResult<CasebaseSearchSettings, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CasebaseSearchSettings$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CasebaseSearchSettings' from JSON`,
  );
}
