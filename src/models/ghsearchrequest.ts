/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  SessionContextVariable,
  SessionContextVariable$inboundSchema,
  SessionContextVariable$Outbound,
  SessionContextVariable$outboundSchema,
} from "./sessioncontextvariable.js";
import {
  StartQuestionAndAnswer,
  StartQuestionAndAnswer$inboundSchema,
  StartQuestionAndAnswer$Outbound,
  StartQuestionAndAnswer$outboundSchema,
} from "./startquestionandanswer.js";

export type GHSearchRequest = {
  /**
   * The numerical ID of the Casebase.
   */
  casebaseId: string;
  /**
   * Pre-answered Questions in Guided Help search
   */
  questions?: Array<StartQuestionAndAnswer> | undefined;
  /**
   * The ID of the guided help profile.<br>
   *
   * @remarks
   * 1 will always be the **system profile**.
   */
  profileId?: string | undefined;
  /**
   * Session variables used to give Guided Help additional context.
   */
  sessionVariable?: Array<SessionContextVariable> | undefined;
  /**
   * Restart the current Guided Help search with the existing context along with session variable context.
   */
  startOver?: boolean | undefined;
  /**
   * Use current live release snapshot of the Casebase otherwise use the authoring release.
   */
  useLiveRelease?: boolean | undefined;
  /**
   * Numeric ID of the guided help session article used for starting search.
   */
  ghsArticleId?: string | undefined;
};

/** @internal */
export const GHSearchRequest$inboundSchema: z.ZodType<
  GHSearchRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  casebaseId: z.string(),
  questions: z.array(StartQuestionAndAnswer$inboundSchema).optional(),
  profileId: z.string().optional(),
  sessionVariable: z.array(SessionContextVariable$inboundSchema).optional(),
  startOver: z.boolean().optional(),
  useLiveRelease: z.boolean().optional(),
  ghsArticleId: z.string().optional(),
});

/** @internal */
export type GHSearchRequest$Outbound = {
  casebaseId: string;
  questions?: Array<StartQuestionAndAnswer$Outbound> | undefined;
  profileId?: string | undefined;
  sessionVariable?: Array<SessionContextVariable$Outbound> | undefined;
  startOver?: boolean | undefined;
  useLiveRelease?: boolean | undefined;
  ghsArticleId?: string | undefined;
};

/** @internal */
export const GHSearchRequest$outboundSchema: z.ZodType<
  GHSearchRequest$Outbound,
  z.ZodTypeDef,
  GHSearchRequest
> = z.object({
  casebaseId: z.string(),
  questions: z.array(StartQuestionAndAnswer$outboundSchema).optional(),
  profileId: z.string().optional(),
  sessionVariable: z.array(SessionContextVariable$outboundSchema).optional(),
  startOver: z.boolean().optional(),
  useLiveRelease: z.boolean().optional(),
  ghsArticleId: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GHSearchRequest$ {
  /** @deprecated use `GHSearchRequest$inboundSchema` instead. */
  export const inboundSchema = GHSearchRequest$inboundSchema;
  /** @deprecated use `GHSearchRequest$outboundSchema` instead. */
  export const outboundSchema = GHSearchRequest$outboundSchema;
  /** @deprecated use `GHSearchRequest$Outbound` instead. */
  export type Outbound = GHSearchRequest$Outbound;
}

export function ghSearchRequestToJSON(
  ghSearchRequest: GHSearchRequest,
): string {
  return JSON.stringify(GHSearchRequest$outboundSchema.parse(ghSearchRequest));
}

export function ghSearchRequestFromJSON(
  jsonString: string,
): SafeParseResult<GHSearchRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GHSearchRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GHSearchRequest' from JSON`,
  );
}
