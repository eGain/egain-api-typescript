/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type ConfigurableAttribute = {
  /**
   * The name of the attribute.
   */
  name: string;
  /**
   * Indicates if the attribute is mandatory.
   */
  mandatory: boolean;
  /**
   * Indicates if the attribute is editable.
   */
  editable: boolean;
};

/** @internal */
export const ConfigurableAttribute$inboundSchema: z.ZodType<
  ConfigurableAttribute,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  mandatory: z.boolean(),
  editable: z.boolean(),
});

/** @internal */
export type ConfigurableAttribute$Outbound = {
  name: string;
  mandatory: boolean;
  editable: boolean;
};

/** @internal */
export const ConfigurableAttribute$outboundSchema: z.ZodType<
  ConfigurableAttribute$Outbound,
  z.ZodTypeDef,
  ConfigurableAttribute
> = z.object({
  name: z.string(),
  mandatory: z.boolean(),
  editable: z.boolean(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ConfigurableAttribute$ {
  /** @deprecated use `ConfigurableAttribute$inboundSchema` instead. */
  export const inboundSchema = ConfigurableAttribute$inboundSchema;
  /** @deprecated use `ConfigurableAttribute$outboundSchema` instead. */
  export const outboundSchema = ConfigurableAttribute$outboundSchema;
  /** @deprecated use `ConfigurableAttribute$Outbound` instead. */
  export type Outbound = ConfigurableAttribute$Outbound;
}

export function configurableAttributeToJSON(
  configurableAttribute: ConfigurableAttribute,
): string {
  return JSON.stringify(
    ConfigurableAttribute$outboundSchema.parse(configurableAttribute),
  );
}

export function configurableAttributeFromJSON(
  jsonString: string,
): SafeParseResult<ConfigurableAttribute, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ConfigurableAttribute$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ConfigurableAttribute' from JSON`,
  );
}
