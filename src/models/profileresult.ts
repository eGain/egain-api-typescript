/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  PaginationInfo,
  PaginationInfo$inboundSchema,
  PaginationInfo$Outbound,
  PaginationInfo$outboundSchema,
} from "./paginationinfo.js";
import {
  Profile,
  Profile$inboundSchema,
  Profile$Outbound,
  Profile$outboundSchema,
} from "./profile.js";

export type ProfileResult = {
  /**
   * profiles
   */
  profile?: Array<Profile> | undefined;
  paginationInfo?: PaginationInfo | undefined;
};

/** @internal */
export const ProfileResult$inboundSchema: z.ZodType<
  ProfileResult,
  z.ZodTypeDef,
  unknown
> = z.object({
  profile: z.array(Profile$inboundSchema).optional(),
  paginationInfo: PaginationInfo$inboundSchema.optional(),
});

/** @internal */
export type ProfileResult$Outbound = {
  profile?: Array<Profile$Outbound> | undefined;
  paginationInfo?: PaginationInfo$Outbound | undefined;
};

/** @internal */
export const ProfileResult$outboundSchema: z.ZodType<
  ProfileResult$Outbound,
  z.ZodTypeDef,
  ProfileResult
> = z.object({
  profile: z.array(Profile$outboundSchema).optional(),
  paginationInfo: PaginationInfo$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ProfileResult$ {
  /** @deprecated use `ProfileResult$inboundSchema` instead. */
  export const inboundSchema = ProfileResult$inboundSchema;
  /** @deprecated use `ProfileResult$outboundSchema` instead. */
  export const outboundSchema = ProfileResult$outboundSchema;
  /** @deprecated use `ProfileResult$Outbound` instead. */
  export type Outbound = ProfileResult$Outbound;
}

export function profileResultToJSON(profileResult: ProfileResult): string {
  return JSON.stringify(ProfileResult$outboundSchema.parse(profileResult));
}

export function profileResultFromJSON(
  jsonString: string,
): SafeParseResult<ProfileResult, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ProfileResult$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ProfileResult' from JSON`,
  );
}
