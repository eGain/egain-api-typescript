/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  PaginationInfo,
  PaginationInfo$inboundSchema,
  PaginationInfo$Outbound,
  PaginationInfo$outboundSchema,
} from "./paginationinfo.js";
import {
  TopicTreeNode,
  TopicTreeNode$inboundSchema,
  TopicTreeNode$Outbound,
  TopicTreeNode$outboundSchema,
} from "./topictreenode.js";

/**
 * This schema contains the result of topic tree
 */
export type TopicTreeResult = {
  topicTree?: Array<TopicTreeNode> | undefined;
  paginationInfo?: PaginationInfo | undefined;
};

/** @internal */
export const TopicTreeResult$inboundSchema: z.ZodType<
  TopicTreeResult,
  z.ZodTypeDef,
  unknown
> = z.object({
  topicTree: z.array(TopicTreeNode$inboundSchema).optional(),
  paginationInfo: PaginationInfo$inboundSchema.optional(),
});

/** @internal */
export type TopicTreeResult$Outbound = {
  topicTree?: Array<TopicTreeNode$Outbound> | undefined;
  paginationInfo?: PaginationInfo$Outbound | undefined;
};

/** @internal */
export const TopicTreeResult$outboundSchema: z.ZodType<
  TopicTreeResult$Outbound,
  z.ZodTypeDef,
  TopicTreeResult
> = z.object({
  topicTree: z.array(TopicTreeNode$outboundSchema).optional(),
  paginationInfo: PaginationInfo$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TopicTreeResult$ {
  /** @deprecated use `TopicTreeResult$inboundSchema` instead. */
  export const inboundSchema = TopicTreeResult$inboundSchema;
  /** @deprecated use `TopicTreeResult$outboundSchema` instead. */
  export const outboundSchema = TopicTreeResult$outboundSchema;
  /** @deprecated use `TopicTreeResult$Outbound` instead. */
  export type Outbound = TopicTreeResult$Outbound;
}

export function topicTreeResultToJSON(
  topicTreeResult: TopicTreeResult,
): string {
  return JSON.stringify(TopicTreeResult$outboundSchema.parse(topicTreeResult));
}

export function topicTreeResultFromJSON(
  jsonString: string,
): SafeParseResult<TopicTreeResult, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TopicTreeResult$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TopicTreeResult' from JSON`,
  );
}
