/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

/**
 * The start date for the Article.
 */
export type StartDateDateAndTime = {
  /**
   * The date in the format <code>YYYY-MM-DDTHH:MM:SS</code>.
   */
  date: Date;
};

/**
 * The end date for the Article.
 */
export type DueDateDateAndTime = {
  /**
   * The date in the format <code>YYYY-MM-DDTHH:MM:SS</code>.
   */
  date: Date;
};

/**
 * This schema contains the compliance details for an Article.
 */
export type ComplianceForArticle = {
  /**
   * The start date for the Article.
   */
  startDate?: StartDateDateAndTime | undefined;
  /**
   * The end date for the Article.
   */
  dueDate?: DueDateDateAndTime | undefined;
};

/** @internal */
export const StartDateDateAndTime$inboundSchema: z.ZodType<
  StartDateDateAndTime,
  z.ZodTypeDef,
  unknown
> = z.object({
  date: z.string().datetime({ offset: true }).transform(v => new Date(v)),
});

/** @internal */
export type StartDateDateAndTime$Outbound = {
  date: string;
};

/** @internal */
export const StartDateDateAndTime$outboundSchema: z.ZodType<
  StartDateDateAndTime$Outbound,
  z.ZodTypeDef,
  StartDateDateAndTime
> = z.object({
  date: z.date().transform(v => v.toISOString()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StartDateDateAndTime$ {
  /** @deprecated use `StartDateDateAndTime$inboundSchema` instead. */
  export const inboundSchema = StartDateDateAndTime$inboundSchema;
  /** @deprecated use `StartDateDateAndTime$outboundSchema` instead. */
  export const outboundSchema = StartDateDateAndTime$outboundSchema;
  /** @deprecated use `StartDateDateAndTime$Outbound` instead. */
  export type Outbound = StartDateDateAndTime$Outbound;
}

export function startDateDateAndTimeToJSON(
  startDateDateAndTime: StartDateDateAndTime,
): string {
  return JSON.stringify(
    StartDateDateAndTime$outboundSchema.parse(startDateDateAndTime),
  );
}

export function startDateDateAndTimeFromJSON(
  jsonString: string,
): SafeParseResult<StartDateDateAndTime, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => StartDateDateAndTime$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'StartDateDateAndTime' from JSON`,
  );
}

/** @internal */
export const DueDateDateAndTime$inboundSchema: z.ZodType<
  DueDateDateAndTime,
  z.ZodTypeDef,
  unknown
> = z.object({
  date: z.string().datetime({ offset: true }).transform(v => new Date(v)),
});

/** @internal */
export type DueDateDateAndTime$Outbound = {
  date: string;
};

/** @internal */
export const DueDateDateAndTime$outboundSchema: z.ZodType<
  DueDateDateAndTime$Outbound,
  z.ZodTypeDef,
  DueDateDateAndTime
> = z.object({
  date: z.date().transform(v => v.toISOString()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DueDateDateAndTime$ {
  /** @deprecated use `DueDateDateAndTime$inboundSchema` instead. */
  export const inboundSchema = DueDateDateAndTime$inboundSchema;
  /** @deprecated use `DueDateDateAndTime$outboundSchema` instead. */
  export const outboundSchema = DueDateDateAndTime$outboundSchema;
  /** @deprecated use `DueDateDateAndTime$Outbound` instead. */
  export type Outbound = DueDateDateAndTime$Outbound;
}

export function dueDateDateAndTimeToJSON(
  dueDateDateAndTime: DueDateDateAndTime,
): string {
  return JSON.stringify(
    DueDateDateAndTime$outboundSchema.parse(dueDateDateAndTime),
  );
}

export function dueDateDateAndTimeFromJSON(
  jsonString: string,
): SafeParseResult<DueDateDateAndTime, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DueDateDateAndTime$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DueDateDateAndTime' from JSON`,
  );
}

/** @internal */
export const ComplianceForArticle$inboundSchema: z.ZodType<
  ComplianceForArticle,
  z.ZodTypeDef,
  unknown
> = z.object({
  startDate: z.lazy(() => StartDateDateAndTime$inboundSchema).optional(),
  dueDate: z.lazy(() => DueDateDateAndTime$inboundSchema).optional(),
});

/** @internal */
export type ComplianceForArticle$Outbound = {
  startDate?: StartDateDateAndTime$Outbound | undefined;
  dueDate?: DueDateDateAndTime$Outbound | undefined;
};

/** @internal */
export const ComplianceForArticle$outboundSchema: z.ZodType<
  ComplianceForArticle$Outbound,
  z.ZodTypeDef,
  ComplianceForArticle
> = z.object({
  startDate: z.lazy(() => StartDateDateAndTime$outboundSchema).optional(),
  dueDate: z.lazy(() => DueDateDateAndTime$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ComplianceForArticle$ {
  /** @deprecated use `ComplianceForArticle$inboundSchema` instead. */
  export const inboundSchema = ComplianceForArticle$inboundSchema;
  /** @deprecated use `ComplianceForArticle$outboundSchema` instead. */
  export const outboundSchema = ComplianceForArticle$outboundSchema;
  /** @deprecated use `ComplianceForArticle$Outbound` instead. */
  export type Outbound = ComplianceForArticle$Outbound;
}

export function complianceForArticleToJSON(
  complianceForArticle: ComplianceForArticle,
): string {
  return JSON.stringify(
    ComplianceForArticle$outboundSchema.parse(complianceForArticle),
  );
}

export function complianceForArticleFromJSON(
  jsonString: string,
): SafeParseResult<ComplianceForArticle, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ComplianceForArticle$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ComplianceForArticle' from JSON`,
  );
}
