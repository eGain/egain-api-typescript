/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type Profile = {
  /**
   * The ID of the guided help profile.<br>
   *
   * @remarks
   * 1 will always be the **system profile**.
   */
  id: string;
  /**
   * Name of the profile
   */
  name: string;
};

/** @internal */
export const Profile$inboundSchema: z.ZodType<Profile, z.ZodTypeDef, unknown> =
  z.object({
    id: z.string(),
    name: z.string(),
  });

/** @internal */
export type Profile$Outbound = {
  id: string;
  name: string;
};

/** @internal */
export const Profile$outboundSchema: z.ZodType<
  Profile$Outbound,
  z.ZodTypeDef,
  Profile
> = z.object({
  id: z.string(),
  name: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Profile$ {
  /** @deprecated use `Profile$inboundSchema` instead. */
  export const inboundSchema = Profile$inboundSchema;
  /** @deprecated use `Profile$outboundSchema` instead. */
  export const outboundSchema = Profile$outboundSchema;
  /** @deprecated use `Profile$Outbound` instead. */
  export type Outbound = Profile$Outbound;
}

export function profileToJSON(profile: Profile): string {
  return JSON.stringify(Profile$outboundSchema.parse(profile));
}

export function profileFromJSON(
  jsonString: string,
): SafeParseResult<Profile, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Profile$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Profile' from JSON`,
  );
}
