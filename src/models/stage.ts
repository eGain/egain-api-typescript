/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  Milestone,
  Milestone$inboundSchema,
  Milestone$Outbound,
  Milestone$outboundSchema,
} from "./milestone.js";

/**
 * A stage in the Article's workflow.
 */
export type Stage = {
  /**
   * The name of the stage.
   */
  name?: string | undefined;
  /**
   * A resource's workflow milestone.
   */
  milestone?: Milestone | undefined;
};

/** @internal */
export const Stage$inboundSchema: z.ZodType<Stage, z.ZodTypeDef, unknown> = z
  .object({
    name: z.string().optional(),
    milestone: Milestone$inboundSchema.optional(),
  });

/** @internal */
export type Stage$Outbound = {
  name?: string | undefined;
  milestone?: Milestone$Outbound | undefined;
};

/** @internal */
export const Stage$outboundSchema: z.ZodType<
  Stage$Outbound,
  z.ZodTypeDef,
  Stage
> = z.object({
  name: z.string().optional(),
  milestone: Milestone$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Stage$ {
  /** @deprecated use `Stage$inboundSchema` instead. */
  export const inboundSchema = Stage$inboundSchema;
  /** @deprecated use `Stage$outboundSchema` instead. */
  export const outboundSchema = Stage$outboundSchema;
  /** @deprecated use `Stage$Outbound` instead. */
  export type Outbound = Stage$Outbound;
}

export function stageToJSON(stage: Stage): string {
  return JSON.stringify(Stage$outboundSchema.parse(stage));
}

export function stageFromJSON(
  jsonString: string,
): SafeParseResult<Stage, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Stage$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Stage' from JSON`,
  );
}
