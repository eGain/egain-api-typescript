/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type UploadAttachmentRequest = {
  /**
   * The Language locale accepted by the client (used for locale specific fields in resource representation and in error responses).
   */
  acceptLanguage: models.AcceptLanguage;
  /**
   * Signature data to upload attachment.
   */
  signature: string;
  requestBody: ReadableStream<Uint8Array> | Blob | ArrayBuffer | Uint8Array;
};

/** @internal */
export const UploadAttachmentRequest$inboundSchema: z.ZodType<
  UploadAttachmentRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  "Accept-Language": models.AcceptLanguage$inboundSchema,
  signature: z.string(),
  RequestBody: z.union([
    z.instanceof(ReadableStream<Uint8Array>),
    z.instanceof(Blob),
    z.instanceof(ArrayBuffer),
    z.instanceof(Uint8Array),
  ]),
}).transform((v) => {
  return remap$(v, {
    "Accept-Language": "acceptLanguage",
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type UploadAttachmentRequest$Outbound = {
  "Accept-Language": string;
  signature: string;
  RequestBody: ReadableStream<Uint8Array> | Blob | ArrayBuffer | Uint8Array;
};

/** @internal */
export const UploadAttachmentRequest$outboundSchema: z.ZodType<
  UploadAttachmentRequest$Outbound,
  z.ZodTypeDef,
  UploadAttachmentRequest
> = z.object({
  acceptLanguage: models.AcceptLanguage$outboundSchema,
  signature: z.string(),
  requestBody: z.union([
    z.instanceof(ReadableStream<Uint8Array>),
    z.instanceof(Blob),
    z.instanceof(ArrayBuffer),
    z.instanceof(Uint8Array),
  ]),
}).transform((v) => {
  return remap$(v, {
    acceptLanguage: "Accept-Language",
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UploadAttachmentRequest$ {
  /** @deprecated use `UploadAttachmentRequest$inboundSchema` instead. */
  export const inboundSchema = UploadAttachmentRequest$inboundSchema;
  /** @deprecated use `UploadAttachmentRequest$outboundSchema` instead. */
  export const outboundSchema = UploadAttachmentRequest$outboundSchema;
  /** @deprecated use `UploadAttachmentRequest$Outbound` instead. */
  export type Outbound = UploadAttachmentRequest$Outbound;
}

export function uploadAttachmentRequestToJSON(
  uploadAttachmentRequest: UploadAttachmentRequest,
): string {
  return JSON.stringify(
    UploadAttachmentRequest$outboundSchema.parse(uploadAttachmentRequest),
  );
}

export function uploadAttachmentRequestFromJSON(
  jsonString: string,
): SafeParseResult<UploadAttachmentRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UploadAttachmentRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UploadAttachmentRequest' from JSON`,
  );
}
