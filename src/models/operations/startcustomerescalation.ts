/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type StartCustomerEscalationRequest = {
  /**
   * The Language locale accepted by the client (used for locale specific fields in resource representation and in error responses).
   */
  acceptLanguage: models.AcceptLanguage;
  /**
   * The ID of the portal being accessed.<br><br>A portal ID is composed of a 2-4 letter prefix, followed by a dash and 4-15 digits.
   */
  portalID: string;
  /**
   * The language used for fetching the details of a resource. Resources available in different languages may differ from each other.
   */
  language: models.MandatoryLanguageQueryParameter;
  startEscalationRequest: models.StartEscalationRequest;
};

export type StartCustomerEscalationResponse = {
  headers: { [k: string]: Array<string> };
};

/** @internal */
export const StartCustomerEscalationRequest$inboundSchema: z.ZodType<
  StartCustomerEscalationRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  "Accept-Language": models.AcceptLanguage$inboundSchema,
  portalID: z.string(),
  language: models.MandatoryLanguageQueryParameter$inboundSchema,
  StartEscalationRequest: models.StartEscalationRequest$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "Accept-Language": "acceptLanguage",
    "StartEscalationRequest": "startEscalationRequest",
  });
});

/** @internal */
export type StartCustomerEscalationRequest$Outbound = {
  "Accept-Language": string;
  portalID: string;
  language: string;
  StartEscalationRequest: models.StartEscalationRequest$Outbound;
};

/** @internal */
export const StartCustomerEscalationRequest$outboundSchema: z.ZodType<
  StartCustomerEscalationRequest$Outbound,
  z.ZodTypeDef,
  StartCustomerEscalationRequest
> = z.object({
  acceptLanguage: models.AcceptLanguage$outboundSchema,
  portalID: z.string(),
  language: models.MandatoryLanguageQueryParameter$outboundSchema,
  startEscalationRequest: models.StartEscalationRequest$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    acceptLanguage: "Accept-Language",
    startEscalationRequest: "StartEscalationRequest",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StartCustomerEscalationRequest$ {
  /** @deprecated use `StartCustomerEscalationRequest$inboundSchema` instead. */
  export const inboundSchema = StartCustomerEscalationRequest$inboundSchema;
  /** @deprecated use `StartCustomerEscalationRequest$outboundSchema` instead. */
  export const outboundSchema = StartCustomerEscalationRequest$outboundSchema;
  /** @deprecated use `StartCustomerEscalationRequest$Outbound` instead. */
  export type Outbound = StartCustomerEscalationRequest$Outbound;
}

export function startCustomerEscalationRequestToJSON(
  startCustomerEscalationRequest: StartCustomerEscalationRequest,
): string {
  return JSON.stringify(
    StartCustomerEscalationRequest$outboundSchema.parse(
      startCustomerEscalationRequest,
    ),
  );
}

export function startCustomerEscalationRequestFromJSON(
  jsonString: string,
): SafeParseResult<StartCustomerEscalationRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => StartCustomerEscalationRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'StartCustomerEscalationRequest' from JSON`,
  );
}

/** @internal */
export const StartCustomerEscalationResponse$inboundSchema: z.ZodType<
  StartCustomerEscalationResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())),
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
  });
});

/** @internal */
export type StartCustomerEscalationResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
};

/** @internal */
export const StartCustomerEscalationResponse$outboundSchema: z.ZodType<
  StartCustomerEscalationResponse$Outbound,
  z.ZodTypeDef,
  StartCustomerEscalationResponse
> = z.object({
  headers: z.record(z.array(z.string())),
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StartCustomerEscalationResponse$ {
  /** @deprecated use `StartCustomerEscalationResponse$inboundSchema` instead. */
  export const inboundSchema = StartCustomerEscalationResponse$inboundSchema;
  /** @deprecated use `StartCustomerEscalationResponse$outboundSchema` instead. */
  export const outboundSchema = StartCustomerEscalationResponse$outboundSchema;
  /** @deprecated use `StartCustomerEscalationResponse$Outbound` instead. */
  export type Outbound = StartCustomerEscalationResponse$Outbound;
}

export function startCustomerEscalationResponseToJSON(
  startCustomerEscalationResponse: StartCustomerEscalationResponse,
): string {
  return JSON.stringify(
    StartCustomerEscalationResponse$outboundSchema.parse(
      startCustomerEscalationResponse,
    ),
  );
}

export function startCustomerEscalationResponseFromJSON(
  jsonString: string,
): SafeParseResult<StartCustomerEscalationResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => StartCustomerEscalationResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'StartCustomerEscalationResponse' from JSON`,
  );
}
