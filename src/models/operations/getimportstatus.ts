/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const GetImportStatusServerList = [
  /**
   * Production Server
   */
  "https://api.aidev.egain.cloud/knowledge/contentmgr/v4",
] as const;

export type GetImportStatusRequest = {
  /**
   * **Job ID Parameter**
   *
   * @remarks
   *
   * The unique identifier for the import or validation job. This ID was returned when the job was created via the Import or Validate API.
   *
   * **Format:** UUID v4 (e.g., 7A84B875-6F75-4C7B-B137-0632B62DB0BD)
   *
   * **Example Usage:**
   * ```bash
   * GET /import/content/7A84B875-6F75-4C7B-B137-0632B62DB0BD/status
   * ```
   */
  jobId: string;
};

/** @internal */
export const GetImportStatusRequest$inboundSchema: z.ZodType<
  GetImportStatusRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  job_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "job_id": "jobId",
  });
});

/** @internal */
export type GetImportStatusRequest$Outbound = {
  job_id: string;
};

/** @internal */
export const GetImportStatusRequest$outboundSchema: z.ZodType<
  GetImportStatusRequest$Outbound,
  z.ZodTypeDef,
  GetImportStatusRequest
> = z.object({
  jobId: z.string(),
}).transform((v) => {
  return remap$(v, {
    jobId: "job_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetImportStatusRequest$ {
  /** @deprecated use `GetImportStatusRequest$inboundSchema` instead. */
  export const inboundSchema = GetImportStatusRequest$inboundSchema;
  /** @deprecated use `GetImportStatusRequest$outboundSchema` instead. */
  export const outboundSchema = GetImportStatusRequest$outboundSchema;
  /** @deprecated use `GetImportStatusRequest$Outbound` instead. */
  export type Outbound = GetImportStatusRequest$Outbound;
}

export function getImportStatusRequestToJSON(
  getImportStatusRequest: GetImportStatusRequest,
): string {
  return JSON.stringify(
    GetImportStatusRequest$outboundSchema.parse(getImportStatusRequest),
  );
}

export function getImportStatusRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetImportStatusRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetImportStatusRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetImportStatusRequest' from JSON`,
  );
}
