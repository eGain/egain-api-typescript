/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const CreateImportValidationServerList = [
  /**
   * Production Server
   */
  "https://${API_DOMAIN}/knowledge/contentmgr/v4",
] as const;

export type CreateImportValidationResponse = {
  headers: { [k: string]: Array<string> };
};

/** @internal */
export const CreateImportValidationResponse$inboundSchema: z.ZodType<
  CreateImportValidationResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())),
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
  });
});

/** @internal */
export type CreateImportValidationResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
};

/** @internal */
export const CreateImportValidationResponse$outboundSchema: z.ZodType<
  CreateImportValidationResponse$Outbound,
  z.ZodTypeDef,
  CreateImportValidationResponse
> = z.object({
  headers: z.record(z.array(z.string())),
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateImportValidationResponse$ {
  /** @deprecated use `CreateImportValidationResponse$inboundSchema` instead. */
  export const inboundSchema = CreateImportValidationResponse$inboundSchema;
  /** @deprecated use `CreateImportValidationResponse$outboundSchema` instead. */
  export const outboundSchema = CreateImportValidationResponse$outboundSchema;
  /** @deprecated use `CreateImportValidationResponse$Outbound` instead. */
  export type Outbound = CreateImportValidationResponse$Outbound;
}

export function createImportValidationResponseToJSON(
  createImportValidationResponse: CreateImportValidationResponse,
): string {
  return JSON.stringify(
    CreateImportValidationResponse$outboundSchema.parse(
      createImportValidationResponse,
    ),
  );
}

export function createImportValidationResponseFromJSON(
  jsonString: string,
): SafeParseResult<CreateImportValidationResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateImportValidationResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateImportValidationResponse' from JSON`,
  );
}
