/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type SearchPriorToEscalationRequest = {
  /**
   * The Language locale accepted by the client (used for locale specific fields in resource representation and in error responses).
   */
  acceptLanguage: models.AcceptLanguage;
  /**
   * The ID of the portal being accessed.<br><br>A portal ID is composed of a 2-4 letter prefix, followed by a dash and 4-15 digits.
   */
  portalID: string;
  /**
   * The ID (uuid) of the customer escalation.
   *
   * @remarks
   */
  escalationId: string;
  /**
   * This parameter will restrict the search scope to the provided topic and it's sub topic.
   */
  filterArticlesInTopicTree?: string | undefined;
  /**
   * The fields of the article to be returned.
   */
  additionalAttributes?: models.OptionalArticleAttributes | undefined;
  /**
   * The "maxResults" parameter specifies the number of articles that should be included in the response.
   *
   * @remarks
   *
   * It is only required when the escalation type is chat escalation.If not specified then default value 5 will be considered for chat escalation.
   *
   * If the escalation type is email, the maximum results value specified in the portal settings for email escalation will be taken into consideration.
   */
  maxResults?: number | undefined;
  /**
   * Pagination parameter that specifies the page number of results to be returned. Used in conjunction with $pagesize.
   */
  pagenum?: number | undefined;
  /**
   * Pagination parameter that specifies the number of results per page. Used in conjunction with $pagenum.<br>Valid range of 5-75<br>_Default value_: 25
   */
  pagesize?: number | undefined;
};

/** @internal */
export const SearchPriorToEscalationRequest$inboundSchema: z.ZodType<
  SearchPriorToEscalationRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  "Accept-Language": models.AcceptLanguage$inboundSchema,
  portalID: z.string(),
  escalationId: z.string(),
  "filter[articles-in-topic-tree]": z.string().optional(),
  additionalAttributes: models.OptionalArticleAttributes$inboundSchema
    .optional(),
  maxResults: z.number().int().optional(),
  pagenum: z.number().int().default(1),
  pagesize: z.number().int().default(25),
}).transform((v) => {
  return remap$(v, {
    "Accept-Language": "acceptLanguage",
    "filter[articles-in-topic-tree]": "filterArticlesInTopicTree",
  });
});

/** @internal */
export type SearchPriorToEscalationRequest$Outbound = {
  "Accept-Language": string;
  portalID: string;
  escalationId: string;
  "filter[articles-in-topic-tree]"?: string | undefined;
  additionalAttributes?: string | undefined;
  maxResults?: number | undefined;
  pagenum: number;
  pagesize: number;
};

/** @internal */
export const SearchPriorToEscalationRequest$outboundSchema: z.ZodType<
  SearchPriorToEscalationRequest$Outbound,
  z.ZodTypeDef,
  SearchPriorToEscalationRequest
> = z.object({
  acceptLanguage: models.AcceptLanguage$outboundSchema,
  portalID: z.string(),
  escalationId: z.string(),
  filterArticlesInTopicTree: z.string().optional(),
  additionalAttributes: models.OptionalArticleAttributes$outboundSchema
    .optional(),
  maxResults: z.number().int().optional(),
  pagenum: z.number().int().default(1),
  pagesize: z.number().int().default(25),
}).transform((v) => {
  return remap$(v, {
    acceptLanguage: "Accept-Language",
    filterArticlesInTopicTree: "filter[articles-in-topic-tree]",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchPriorToEscalationRequest$ {
  /** @deprecated use `SearchPriorToEscalationRequest$inboundSchema` instead. */
  export const inboundSchema = SearchPriorToEscalationRequest$inboundSchema;
  /** @deprecated use `SearchPriorToEscalationRequest$outboundSchema` instead. */
  export const outboundSchema = SearchPriorToEscalationRequest$outboundSchema;
  /** @deprecated use `SearchPriorToEscalationRequest$Outbound` instead. */
  export type Outbound = SearchPriorToEscalationRequest$Outbound;
}

export function searchPriorToEscalationRequestToJSON(
  searchPriorToEscalationRequest: SearchPriorToEscalationRequest,
): string {
  return JSON.stringify(
    SearchPriorToEscalationRequest$outboundSchema.parse(
      searchPriorToEscalationRequest,
    ),
  );
}

export function searchPriorToEscalationRequestFromJSON(
  jsonString: string,
): SafeParseResult<SearchPriorToEscalationRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SearchPriorToEscalationRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SearchPriorToEscalationRequest' from JSON`,
  );
}
