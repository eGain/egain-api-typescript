/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

/**
 * Provides information about the method in which the Article is accessed and is used for self-service analytics. Refer to the eGain User Guide regarding "Article View Contexts".
 *
 * @remarks
 *
 * | Name | Description
 * | ---- | -----------
 * | article_view | View an Article directly using its ID.
 * | article_view_more_related_Article  | View related articles of an Article using its ID.
 * | article_view_basic_search | View an Article via a basic search.
 * | article_view_adv_search | View an Article via an advanced search.
 * | article_view_guided_help | View an Article via a Guided Help solution.
 * | article_view_browse_topic | View an Article via browsing a topic.
 * | article_view_browse_tree | View an Article via browsing a topic tree.
 * | article_view_popular_articles | View an Article using the Popular Items list in the Self-Service portal.
 * | article_view_useful_items | View Article using the Useful Items list in the Self-Service portal.
 * | article_view_widget | View an Article via a widget.
 * | article_view_announcement | View an Article from the announcement section in the Self-Service portal.
 * | article_view_bookmarked | View a bookmarked Article.
 * | article_view_subscription_notification | View an Article from a subscription notification.
 * | article_view_guided_help_additional_info | View an Article via additional information from a Guided Help search.
 * | view_articles_pending_compliance | View an Article via Read & Sign in the Self-Service portal.
 * | type_ahead_Suggestion | View an Article from a type-ahead Suggestion in the Self-Service portal.
 * | semantic_Suggestion | View an Article from a semantic Suggestion in the Self-Service portal.
 * | instant_answer | View an Article via an Instant Answers solution.
 * | instant_answer_reference | View an Article that is used as a reference for an Instant Answers solution.
 */
export const AccessSource = {
  ArticleView: "article_view",
  ArticleViewMoreRelatedArticle: "article_view_more_related_Article",
  ArticleViewBasicSearch: "article_view_basic_search",
  ArticleViewAdvSearch: "article_view_adv_search",
  ArticleViewGuidedHelp: "article_view_guided_help",
  ArticleViewBrowseTopic: "article_view_browse_topic",
  ArticleViewBrowseTree: "article_view_browse_tree",
  ArticleViewPopularArticles: "article_view_popular_articles",
  ArticleViewUsefulItems: "article_view_useful_items",
  ArticleViewWidget: "article_view_widget",
  ArticleViewAnnouncement: "article_view_announcement",
  ArticleViewBookmarked: "article_view_bookmarked",
  ArticleViewSubscriptionNotification: "article_view_subscription_notification",
  ArticleViewGuidedHelpAdditionalInfo:
    "article_view_guided_help_additional_info",
  ViewArticlesPendingCompliance: "view_articles_pending_compliance",
  TypeAheadSuggestion: "type_ahead_Suggestion",
  SemanticSuggestion: "semantic_Suggestion",
  InstantAnswer: "instant_answer",
  InstantAnswerReference: "instant_answer_reference",
} as const;
/**
 * Provides information about the method in which the Article is accessed and is used for self-service analytics. Refer to the eGain User Guide regarding "Article View Contexts".
 *
 * @remarks
 *
 * | Name | Description
 * | ---- | -----------
 * | article_view | View an Article directly using its ID.
 * | article_view_more_related_Article  | View related articles of an Article using its ID.
 * | article_view_basic_search | View an Article via a basic search.
 * | article_view_adv_search | View an Article via an advanced search.
 * | article_view_guided_help | View an Article via a Guided Help solution.
 * | article_view_browse_topic | View an Article via browsing a topic.
 * | article_view_browse_tree | View an Article via browsing a topic tree.
 * | article_view_popular_articles | View an Article using the Popular Items list in the Self-Service portal.
 * | article_view_useful_items | View Article using the Useful Items list in the Self-Service portal.
 * | article_view_widget | View an Article via a widget.
 * | article_view_announcement | View an Article from the announcement section in the Self-Service portal.
 * | article_view_bookmarked | View a bookmarked Article.
 * | article_view_subscription_notification | View an Article from a subscription notification.
 * | article_view_guided_help_additional_info | View an Article via additional information from a Guided Help search.
 * | view_articles_pending_compliance | View an Article via Read & Sign in the Self-Service portal.
 * | type_ahead_Suggestion | View an Article from a type-ahead Suggestion in the Self-Service portal.
 * | semantic_Suggestion | View an Article from a semantic Suggestion in the Self-Service portal.
 * | instant_answer | View an Article via an Instant Answers solution.
 * | instant_answer_reference | View an Article that is used as a reference for an Instant Answers solution.
 */
export type AccessSource = ClosedEnum<typeof AccessSource>;

export type GetArticleByIdRequest = {
  /**
   * The Language locale accepted by the client (used for locale specific fields in resource representation and in error responses).
   */
  acceptLanguage: models.AcceptLanguage;
  /**
   * The ID of the portal being accessed.<br><br>A portal ID is composed of a 2-4 letter prefix, followed by a dash and 4-15 digits.
   */
  portalID: string;
  /**
   * The ID of the Article.<br><br>An Article ID is composed of a 2-4 letter prefix followed by a dash and 4-15 digits.
   */
  articleID: string;
  /**
   * The language that describes the details of a resource. Resources available in different languages may differ from each other.<li>If <code>lang</code> is not passed, then the portal's default language is used.</li>
   */
  language?: models.LanguageQueryParameter | undefined;
  /**
   * The attributes of an Article to be returned *in addition to* the default list of attributes, listed below. Multiple additional attributes can be specified using a comma-separated list. Passing 'all' will return all attributes.
   *
   * @remarks
   *
   * #### Default Attributes
   * These Article attributes are always returned:
   *
   * | Name | Description
   * | ---- | -----------
   * | id | The ID of the Article.
   * | name  | The name of the Article.
   * | additionalInfo | Additional information provided as Article metadata.
   * | articleType | The Article type and its attributes.
   * | articleKeywords | A comma-separated list of keywords associated with this Article.
   * | articleState | The current state of the Article. States include A (Authoring), S (Staging), and P (Published).
   * | articleSummary | A brief summary of the Article, provided as metadata.
   * | createdBy | The ID, first name, middle name and last name of the user that created the Article.
   * | createdDate | The date that the Article was created.
   * | departmentId | ID of the department for which this Article belongs to.
   * | description | The Article's description.
   * | expirationDate | The date that the Article is set to expire.
   * | attachments | The Article's attachments
   * | imageURL | The URL of the image that is present in the Article version. It is used as the thumbnail image for the Article.
   * | includeInGenAI | Indicates whether this Article is used for eGain's generative AI features.
   * | isSubscribed | Indicates whether the Article is subscribed for notifications.
   * | languageCode | The language code of the Article language.
   * | link | The link object, used to retrieve the details of the Article.
   * | modifiedBy | The ID, first name, middle name and last name of the user that last modified the Article.
   * | modifiedDate | The date that the Article was last modified on.
   * | topicBreadcrumb | Contains a list of topics from the top-level topic to this Article. There may be multiple paths.
   * | versionId | The ID of the Article version that is returned.
   */
  articleAdditionalAttributes?:
    | Array<models.ArticleAdditionalAttributes>
    | undefined;
  customAdditionalAttributes?: string | undefined;
  /**
   * Provides information about the method in which the Article is accessed and is used for self-service analytics. Refer to the eGain User Guide regarding "Article View Contexts".
   *
   * @remarks
   *
   * | Name | Description
   * | ---- | -----------
   * | article_view | View an Article directly using its ID.
   * | article_view_more_related_Article  | View related articles of an Article using its ID.
   * | article_view_basic_search | View an Article via a basic search.
   * | article_view_adv_search | View an Article via an advanced search.
   * | article_view_guided_help | View an Article via a Guided Help solution.
   * | article_view_browse_topic | View an Article via browsing a topic.
   * | article_view_browse_tree | View an Article via browsing a topic tree.
   * | article_view_popular_articles | View an Article using the Popular Items list in the Self-Service portal.
   * | article_view_useful_items | View Article using the Useful Items list in the Self-Service portal.
   * | article_view_widget | View an Article via a widget.
   * | article_view_announcement | View an Article from the announcement section in the Self-Service portal.
   * | article_view_bookmarked | View a bookmarked Article.
   * | article_view_subscription_notification | View an Article from a subscription notification.
   * | article_view_guided_help_additional_info | View an Article via additional information from a Guided Help search.
   * | view_articles_pending_compliance | View an Article via Read & Sign in the Self-Service portal.
   * | type_ahead_Suggestion | View an Article from a type-ahead Suggestion in the Self-Service portal.
   * | semantic_Suggestion | View an Article from a semantic Suggestion in the Self-Service portal.
   * | instant_answer | View an Article via an Instant Answers solution.
   * | instant_answer_reference | View an Article that is used as a reference for an Instant Answers solution.
   */
  accessSource?: AccessSource | undefined;
  /**
   * The ID of a publish view for an Article. A publish view is a set of tags used to generate multiple editions of the same Article for display on the self-service portal. Publish views are used in conjunction with single sourcing to tailor the content of an Article to a specific audience by granting access to an Article's version to users that possess the same tags.<br><br>A publish view ID is composed of a 4-letter prefix, followed by a dash and 4-15 digits.
   */
  publishViewId?: string | undefined;
  /**
   * For agents with the View Author Portal or View Staging Portal actions, this determines which version of the Article is returned.<li>'Authoring' returns the most recent version of an Article checked-in by an author.</li><li>'Staging' returns the updated version currently being processed in a workflow.</li><li>'Publish' returns the most recently published version.</li>
   */
  workflowMilestone?: models.WorkflowMilestone | undefined;
};

/** @internal */
export const AccessSource$inboundSchema: z.ZodNativeEnum<typeof AccessSource> =
  z.nativeEnum(AccessSource);

/** @internal */
export const AccessSource$outboundSchema: z.ZodNativeEnum<typeof AccessSource> =
  AccessSource$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccessSource$ {
  /** @deprecated use `AccessSource$inboundSchema` instead. */
  export const inboundSchema = AccessSource$inboundSchema;
  /** @deprecated use `AccessSource$outboundSchema` instead. */
  export const outboundSchema = AccessSource$outboundSchema;
}

/** @internal */
export const GetArticleByIdRequest$inboundSchema: z.ZodType<
  GetArticleByIdRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  "Accept-Language": models.AcceptLanguage$inboundSchema,
  portalID: z.string(),
  articleID: z.string(),
  language: models.LanguageQueryParameter$inboundSchema.optional(),
  articleAdditionalAttributes: z.array(
    models.ArticleAdditionalAttributes$inboundSchema,
  ).optional(),
  customAdditionalAttributes: z.string().optional(),
  accessSource: AccessSource$inboundSchema.default("article_view"),
  publishViewId: z.string().optional(),
  workflowMilestone: models.WorkflowMilestone$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "Accept-Language": "acceptLanguage",
  });
});

/** @internal */
export type GetArticleByIdRequest$Outbound = {
  "Accept-Language": string;
  portalID: string;
  articleID: string;
  language?: string | undefined;
  articleAdditionalAttributes?: Array<string> | undefined;
  customAdditionalAttributes?: string | undefined;
  accessSource: string;
  publishViewId?: string | undefined;
  workflowMilestone?: string | undefined;
};

/** @internal */
export const GetArticleByIdRequest$outboundSchema: z.ZodType<
  GetArticleByIdRequest$Outbound,
  z.ZodTypeDef,
  GetArticleByIdRequest
> = z.object({
  acceptLanguage: models.AcceptLanguage$outboundSchema,
  portalID: z.string(),
  articleID: z.string(),
  language: models.LanguageQueryParameter$outboundSchema.optional(),
  articleAdditionalAttributes: z.array(
    models.ArticleAdditionalAttributes$outboundSchema,
  ).optional(),
  customAdditionalAttributes: z.string().optional(),
  accessSource: AccessSource$outboundSchema.default("article_view"),
  publishViewId: z.string().optional(),
  workflowMilestone: models.WorkflowMilestone$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    acceptLanguage: "Accept-Language",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetArticleByIdRequest$ {
  /** @deprecated use `GetArticleByIdRequest$inboundSchema` instead. */
  export const inboundSchema = GetArticleByIdRequest$inboundSchema;
  /** @deprecated use `GetArticleByIdRequest$outboundSchema` instead. */
  export const outboundSchema = GetArticleByIdRequest$outboundSchema;
  /** @deprecated use `GetArticleByIdRequest$Outbound` instead. */
  export type Outbound = GetArticleByIdRequest$Outbound;
}

export function getArticleByIdRequestToJSON(
  getArticleByIdRequest: GetArticleByIdRequest,
): string {
  return JSON.stringify(
    GetArticleByIdRequest$outboundSchema.parse(getArticleByIdRequest),
  );
}

export function getArticleByIdRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetArticleByIdRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetArticleByIdRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetArticleByIdRequest' from JSON`,
  );
}
