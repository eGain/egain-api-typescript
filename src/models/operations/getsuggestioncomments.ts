/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type GetSuggestionCommentsRequest = {
  /**
   * The Language locale accepted by the client (used for locale specific fields in resource representation and in error responses).
   */
  acceptLanguage: models.AcceptLanguage;
  /**
   * The ID of the portal being accessed.<br><br>A portal ID is composed of a 2-4 letter prefix, followed by a dash and 4-15 digits.
   */
  portalID: string;
  /**
   * The ID of the Suggestion.<br><br>A Suggestion ID is composed of a 2-4 letter prefix, followed by a dash and 4-15 digits.
   */
  suggestionID: string;
};

/** @internal */
export const GetSuggestionCommentsRequest$inboundSchema: z.ZodType<
  GetSuggestionCommentsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  "Accept-Language": models.AcceptLanguage$inboundSchema,
  portalID: z.string(),
  suggestionID: z.string(),
}).transform((v) => {
  return remap$(v, {
    "Accept-Language": "acceptLanguage",
  });
});

/** @internal */
export type GetSuggestionCommentsRequest$Outbound = {
  "Accept-Language": string;
  portalID: string;
  suggestionID: string;
};

/** @internal */
export const GetSuggestionCommentsRequest$outboundSchema: z.ZodType<
  GetSuggestionCommentsRequest$Outbound,
  z.ZodTypeDef,
  GetSuggestionCommentsRequest
> = z.object({
  acceptLanguage: models.AcceptLanguage$outboundSchema,
  portalID: z.string(),
  suggestionID: z.string(),
}).transform((v) => {
  return remap$(v, {
    acceptLanguage: "Accept-Language",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSuggestionCommentsRequest$ {
  /** @deprecated use `GetSuggestionCommentsRequest$inboundSchema` instead. */
  export const inboundSchema = GetSuggestionCommentsRequest$inboundSchema;
  /** @deprecated use `GetSuggestionCommentsRequest$outboundSchema` instead. */
  export const outboundSchema = GetSuggestionCommentsRequest$outboundSchema;
  /** @deprecated use `GetSuggestionCommentsRequest$Outbound` instead. */
  export type Outbound = GetSuggestionCommentsRequest$Outbound;
}

export function getSuggestionCommentsRequestToJSON(
  getSuggestionCommentsRequest: GetSuggestionCommentsRequest,
): string {
  return JSON.stringify(
    GetSuggestionCommentsRequest$outboundSchema.parse(
      getSuggestionCommentsRequest,
    ),
  );
}

export function getSuggestionCommentsRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetSuggestionCommentsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetSuggestionCommentsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetSuggestionCommentsRequest' from JSON`,
  );
}
