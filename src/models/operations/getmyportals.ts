/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type GetMyPortalsRequest = {
  /**
   * The Language locale accepted by the client (used for locale specific fields in resource representation and in error responses).
   */
  acceptLanguage: models.AcceptLanguage;
  /**
   * The language used for fetching the details of a resource. Resources available in different languages may differ from each other.
   */
  language: models.MandatoryLanguageQueryParameter;
  /**
   * The Name of the department for which portals are to be fetched
   */
  department?: string | undefined;
  /**
   * Portal name starting with a specific character are considered to filter the result.
   */
  filterText?: string | undefined;
  /**
   * The Name of the template used while creating Short URL.
   */
  shortUrlTemplate?: string | undefined;
  /**
   * Objects returned in server response are sorted based on the attribute supplied under $sort. <br>_Default value_: name.
   */
  sort?: models.SortIdNameDepartment | undefined;
  /**
   * Common query parameter $order.
   */
  order?: models.Order | undefined;
  /**
   * Pagination parameter that specifies the page number of results to be returned. Used in conjunction with $pagesize.
   */
  pagenum?: number | undefined;
  /**
   * Pagination parameter that specifies the number of results per page. Used in conjunction with $pagenum.<br>Valid range of 5-75<br>_Default value_: 25
   */
  pagesize?: number | undefined;
};

/** @internal */
export const GetMyPortalsRequest$inboundSchema: z.ZodType<
  GetMyPortalsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  "Accept-Language": models.AcceptLanguage$inboundSchema,
  language: models.MandatoryLanguageQueryParameter$inboundSchema,
  department: z.string().optional(),
  filterText: z.string().optional(),
  shortUrlTemplate: z.string().optional(),
  sort: models.SortIdNameDepartment$inboundSchema.optional(),
  order: models.Order$inboundSchema.optional(),
  pagenum: z.number().int().default(1),
  pagesize: z.number().int().default(25),
}).transform((v) => {
  return remap$(v, {
    "Accept-Language": "acceptLanguage",
  });
});

/** @internal */
export type GetMyPortalsRequest$Outbound = {
  "Accept-Language": string;
  language: string;
  department?: string | undefined;
  filterText?: string | undefined;
  shortUrlTemplate?: string | undefined;
  sort?: string | undefined;
  order?: string | undefined;
  pagenum: number;
  pagesize: number;
};

/** @internal */
export const GetMyPortalsRequest$outboundSchema: z.ZodType<
  GetMyPortalsRequest$Outbound,
  z.ZodTypeDef,
  GetMyPortalsRequest
> = z.object({
  acceptLanguage: models.AcceptLanguage$outboundSchema,
  language: models.MandatoryLanguageQueryParameter$outboundSchema,
  department: z.string().optional(),
  filterText: z.string().optional(),
  shortUrlTemplate: z.string().optional(),
  sort: models.SortIdNameDepartment$outboundSchema.optional(),
  order: models.Order$outboundSchema.optional(),
  pagenum: z.number().int().default(1),
  pagesize: z.number().int().default(25),
}).transform((v) => {
  return remap$(v, {
    acceptLanguage: "Accept-Language",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetMyPortalsRequest$ {
  /** @deprecated use `GetMyPortalsRequest$inboundSchema` instead. */
  export const inboundSchema = GetMyPortalsRequest$inboundSchema;
  /** @deprecated use `GetMyPortalsRequest$outboundSchema` instead. */
  export const outboundSchema = GetMyPortalsRequest$outboundSchema;
  /** @deprecated use `GetMyPortalsRequest$Outbound` instead. */
  export type Outbound = GetMyPortalsRequest$Outbound;
}

export function getMyPortalsRequestToJSON(
  getMyPortalsRequest: GetMyPortalsRequest,
): string {
  return JSON.stringify(
    GetMyPortalsRequest$outboundSchema.parse(getMyPortalsRequest),
  );
}

export function getMyPortalsRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetMyPortalsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetMyPortalsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetMyPortalsRequest' from JSON`,
  );
}
