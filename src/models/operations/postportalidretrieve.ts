/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export const PostPortalIDRetrieveServerList = [
  /**
   * aiservices
   */
  "https://${API_DOMAIN}/core/aiservices/v4",
] as const;

export type PostPortalIDRetrieveRequest = {
  /**
   * The search query string. The string must be escaped as required by the URL syntax rules.
   */
  q: string;
  /**
   * The ID of the portal being accessed.<br><br>A portal ID is composed of a 2-4 letter prefix, followed by a dash and 4-15 digits.
   */
  portalID: string;
  dollarFilterUserProfileID?: string | undefined;
  /**
   * The language that describes the details of a resource. Resources available in different languages may differ from each other. <br><br> If lang is not passed, then the portal's default language is used.
   */
  language?: models.LanguageCodeParameter | undefined;
  /**
   * An object where each key is a **Category Tag ID** (numeric string),
   *
   * @remarks
   * and each value is an array of **Tag IDs** for that category.
   */
  dollarFilterTags?: { [k: string]: Array<string> } | undefined;
  /**
   * An array of topic IDs. It is used to restrict search results to specific topics.
   */
  dollarFilterTopicIds?: Array<string> | undefined;
  retrieveRequest?: models.RetrieveRequest | undefined;
};

/** @internal */
export const PostPortalIDRetrieveRequest$inboundSchema: z.ZodType<
  PostPortalIDRetrieveRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  q: z.string(),
  portalID: z.string(),
  "$filter[userProfileID]": z.string().optional(),
  language: models.LanguageCodeParameter$inboundSchema.optional(),
  "$filter[tags]": z.record(z.array(z.string())).optional(),
  "$filter[topicIds]": z.array(z.string()).optional(),
  RetrieveRequest: models.RetrieveRequest$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "$filter[userProfileID]": "dollarFilterUserProfileID",
    "$filter[tags]": "dollarFilterTags",
    "$filter[topicIds]": "dollarFilterTopicIds",
    "RetrieveRequest": "retrieveRequest",
  });
});

/** @internal */
export type PostPortalIDRetrieveRequest$Outbound = {
  q: string;
  portalID: string;
  "$filter[userProfileID]"?: string | undefined;
  language?: string | undefined;
  "$filter[tags]"?: { [k: string]: Array<string> } | undefined;
  "$filter[topicIds]"?: Array<string> | undefined;
  RetrieveRequest?: models.RetrieveRequest$Outbound | undefined;
};

/** @internal */
export const PostPortalIDRetrieveRequest$outboundSchema: z.ZodType<
  PostPortalIDRetrieveRequest$Outbound,
  z.ZodTypeDef,
  PostPortalIDRetrieveRequest
> = z.object({
  q: z.string(),
  portalID: z.string(),
  dollarFilterUserProfileID: z.string().optional(),
  language: models.LanguageCodeParameter$outboundSchema.optional(),
  dollarFilterTags: z.record(z.array(z.string())).optional(),
  dollarFilterTopicIds: z.array(z.string()).optional(),
  retrieveRequest: models.RetrieveRequest$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    dollarFilterUserProfileID: "$filter[userProfileID]",
    dollarFilterTags: "$filter[tags]",
    dollarFilterTopicIds: "$filter[topicIds]",
    retrieveRequest: "RetrieveRequest",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostPortalIDRetrieveRequest$ {
  /** @deprecated use `PostPortalIDRetrieveRequest$inboundSchema` instead. */
  export const inboundSchema = PostPortalIDRetrieveRequest$inboundSchema;
  /** @deprecated use `PostPortalIDRetrieveRequest$outboundSchema` instead. */
  export const outboundSchema = PostPortalIDRetrieveRequest$outboundSchema;
  /** @deprecated use `PostPortalIDRetrieveRequest$Outbound` instead. */
  export type Outbound = PostPortalIDRetrieveRequest$Outbound;
}

export function postPortalIDRetrieveRequestToJSON(
  postPortalIDRetrieveRequest: PostPortalIDRetrieveRequest,
): string {
  return JSON.stringify(
    PostPortalIDRetrieveRequest$outboundSchema.parse(
      postPortalIDRetrieveRequest,
    ),
  );
}

export function postPortalIDRetrieveRequestFromJSON(
  jsonString: string,
): SafeParseResult<PostPortalIDRetrieveRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostPortalIDRetrieveRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostPortalIDRetrieveRequest' from JSON`,
  );
}
