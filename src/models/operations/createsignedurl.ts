/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type CreateSignedURLRequest = {
  /**
   * The Language locale accepted by the client (used for locale specific fields in resource representation and in error responses).
   */
  acceptLanguage: models.AcceptLanguage;
  attachmentUpload: models.AttachmentUpload;
};

/** @internal */
export const CreateSignedURLRequest$inboundSchema: z.ZodType<
  CreateSignedURLRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  "Accept-Language": models.AcceptLanguage$inboundSchema,
  AttachmentUpload: models.AttachmentUpload$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "Accept-Language": "acceptLanguage",
    "AttachmentUpload": "attachmentUpload",
  });
});

/** @internal */
export type CreateSignedURLRequest$Outbound = {
  "Accept-Language": string;
  AttachmentUpload: models.AttachmentUpload$Outbound;
};

/** @internal */
export const CreateSignedURLRequest$outboundSchema: z.ZodType<
  CreateSignedURLRequest$Outbound,
  z.ZodTypeDef,
  CreateSignedURLRequest
> = z.object({
  acceptLanguage: models.AcceptLanguage$outboundSchema,
  attachmentUpload: models.AttachmentUpload$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    acceptLanguage: "Accept-Language",
    attachmentUpload: "AttachmentUpload",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateSignedURLRequest$ {
  /** @deprecated use `CreateSignedURLRequest$inboundSchema` instead. */
  export const inboundSchema = CreateSignedURLRequest$inboundSchema;
  /** @deprecated use `CreateSignedURLRequest$outboundSchema` instead. */
  export const outboundSchema = CreateSignedURLRequest$outboundSchema;
  /** @deprecated use `CreateSignedURLRequest$Outbound` instead. */
  export type Outbound = CreateSignedURLRequest$Outbound;
}

export function createSignedURLRequestToJSON(
  createSignedURLRequest: CreateSignedURLRequest,
): string {
  return JSON.stringify(
    CreateSignedURLRequest$outboundSchema.parse(createSignedURLRequest),
  );
}

export function createSignedURLRequestFromJSON(
  jsonString: string,
): SafeParseResult<CreateSignedURLRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateSignedURLRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateSignedURLRequest' from JSON`,
  );
}
