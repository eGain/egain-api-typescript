/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type GetArticleEditionDetailsRequest = {
  /**
   * The Language locale accepted by the client (used for locale specific fields in resource representation and in error responses).
   */
  acceptLanguage: models.AcceptLanguage;
  /**
   * The ID of the Article. Both numeric and alternate ID formats are supported.<br><br>Valid numerical IDs are 15-19 digits long.
   */
  articleID: string;
  /**
   * Publish View Id of the article on which operation is performed.
   */
  publishViewId: string;
  /**
   * The language used for fetching the details of a resource. Resources available in different languages may differ from each other.
   */
  language: models.MandatoryLanguageQueryParameter;
};

/** @internal */
export const GetArticleEditionDetailsRequest$inboundSchema: z.ZodType<
  GetArticleEditionDetailsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  "Accept-Language": models.AcceptLanguage$inboundSchema,
  articleID: z.string(),
  publishViewId: z.string(),
  language: models.MandatoryLanguageQueryParameter$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "Accept-Language": "acceptLanguage",
  });
});

/** @internal */
export type GetArticleEditionDetailsRequest$Outbound = {
  "Accept-Language": string;
  articleID: string;
  publishViewId: string;
  language: string;
};

/** @internal */
export const GetArticleEditionDetailsRequest$outboundSchema: z.ZodType<
  GetArticleEditionDetailsRequest$Outbound,
  z.ZodTypeDef,
  GetArticleEditionDetailsRequest
> = z.object({
  acceptLanguage: models.AcceptLanguage$outboundSchema,
  articleID: z.string(),
  publishViewId: z.string(),
  language: models.MandatoryLanguageQueryParameter$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    acceptLanguage: "Accept-Language",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetArticleEditionDetailsRequest$ {
  /** @deprecated use `GetArticleEditionDetailsRequest$inboundSchema` instead. */
  export const inboundSchema = GetArticleEditionDetailsRequest$inboundSchema;
  /** @deprecated use `GetArticleEditionDetailsRequest$outboundSchema` instead. */
  export const outboundSchema = GetArticleEditionDetailsRequest$outboundSchema;
  /** @deprecated use `GetArticleEditionDetailsRequest$Outbound` instead. */
  export type Outbound = GetArticleEditionDetailsRequest$Outbound;
}

export function getArticleEditionDetailsRequestToJSON(
  getArticleEditionDetailsRequest: GetArticleEditionDetailsRequest,
): string {
  return JSON.stringify(
    GetArticleEditionDetailsRequest$outboundSchema.parse(
      getArticleEditionDetailsRequest,
    ),
  );
}

export function getArticleEditionDetailsRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetArticleEditionDetailsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetArticleEditionDetailsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetArticleEditionDetailsRequest' from JSON`,
  );
}
