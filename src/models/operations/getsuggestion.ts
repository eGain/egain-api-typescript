/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type GetSuggestionRequest = {
  /**
   * The Language locale accepted by the client (used for locale specific fields in resource representation and in error responses).
   */
  acceptLanguage: models.AcceptLanguage;
  /**
   * The ID of the portal being accessed.<br><br>A portal ID is composed of a 2-4 letter prefix, followed by a dash and 4-15 digits.
   */
  portalID: string;
  /**
   * The ID of the Suggestion.<br><br>A Suggestion ID is composed of a 2-4 letter prefix, followed by a dash and 4-15 digits.
   */
  suggestionID: string;
  /**
   * The attributes of a Suggestion to be returned *in addition to* the default list of attributes, listed below. Multiple additional attributes can be specified using a comma-separated list. Passing 'all' returns all attributes.
   *
   * @remarks
   *
   * #### Default Attributes
   * These Suggestion attributes are always returned:
   *
   * | Name | Description
   * | ---- | -----------
   * | id | The ID of the Suggestion.
   * | name  | The name of the Suggestion.
   * | status | The status of the Suggestion.
   * | description | The description of the Suggestion.
   * | language | Details about the language of the Suggestion.
   * | modifiedBy.id | The ID of the user that last modified the Suggestion.
   * | modifiedBy.firstName | The Suggestion's last modified user's first name.
   * | modifiedBy.middleName | The Suggestion's last modified user's middle name.
   * | modifiedBy.lastName | The Suggestion's last modified user's last name.
   * | modifiedDate | The Suggestion's last modified date <u>and</u> information about the user that last modified the Suggestion.
   * | link | The link object, used to retrieve the details of the Suggestion.
   * | hasComments | The Suggestion has one or more comments
   * | hasAttachments | The Suggestion has one or more attachments
   * | hasRelatedArticles | The Suggestion has related articles
   */
  suggestionAdditionalAttributes?:
    | Array<models.SuggestionAdditionalAttributes>
    | undefined;
  customAdditionalAttributes?: string | undefined;
};

/** @internal */
export const GetSuggestionRequest$inboundSchema: z.ZodType<
  GetSuggestionRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  "Accept-Language": models.AcceptLanguage$inboundSchema,
  portalID: z.string(),
  suggestionID: z.string(),
  suggestionAdditionalAttributes: z.array(
    models.SuggestionAdditionalAttributes$inboundSchema,
  ).optional(),
  customAdditionalAttributes: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "Accept-Language": "acceptLanguage",
  });
});

/** @internal */
export type GetSuggestionRequest$Outbound = {
  "Accept-Language": string;
  portalID: string;
  suggestionID: string;
  suggestionAdditionalAttributes?: Array<string> | undefined;
  customAdditionalAttributes?: string | undefined;
};

/** @internal */
export const GetSuggestionRequest$outboundSchema: z.ZodType<
  GetSuggestionRequest$Outbound,
  z.ZodTypeDef,
  GetSuggestionRequest
> = z.object({
  acceptLanguage: models.AcceptLanguage$outboundSchema,
  portalID: z.string(),
  suggestionID: z.string(),
  suggestionAdditionalAttributes: z.array(
    models.SuggestionAdditionalAttributes$outboundSchema,
  ).optional(),
  customAdditionalAttributes: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    acceptLanguage: "Accept-Language",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSuggestionRequest$ {
  /** @deprecated use `GetSuggestionRequest$inboundSchema` instead. */
  export const inboundSchema = GetSuggestionRequest$inboundSchema;
  /** @deprecated use `GetSuggestionRequest$outboundSchema` instead. */
  export const outboundSchema = GetSuggestionRequest$outboundSchema;
  /** @deprecated use `GetSuggestionRequest$Outbound` instead. */
  export type Outbound = GetSuggestionRequest$Outbound;
}

export function getSuggestionRequestToJSON(
  getSuggestionRequest: GetSuggestionRequest,
): string {
  return JSON.stringify(
    GetSuggestionRequest$outboundSchema.parse(getSuggestionRequest),
  );
}

export function getSuggestionRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetSuggestionRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetSuggestionRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetSuggestionRequest' from JSON`,
  );
}
