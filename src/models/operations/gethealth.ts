/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const GetHealthServerList = [
  /**
   * Production Server
   */
  "https://${API_DOMAIN}/knowledge/contentmgr/v4",
] as const;

/**
 * ## Service is Healthy
 *
 * @remarks
 *
 * The Import Content service is operating normally with all components functioning as expected.
 *
 * **Health Status Details:**
 * - **Overall Status**: Service is healthy and ready to process requests
 *
 * **Response Information:**
 * - **Status**: Current health state (healthy, degraded, unhealthy)
 * - **Timestamp**: When health check was performed
 * - **Version**: Current API version
 */
export type GetHealthResponse = {
  /**
   * **Health Status**
   *
   * @remarks
   *
   * The overall health status of the service. Possible values:
   * - **healthy**: Service is operating normally
   * - **degraded**: Service is functional but with performance issues
   * - **unhealthy**: Service is experiencing critical issues
   * - **maintenance**: Service is under planned maintenance
   */
  status?: string | undefined;
  /**
   * **Health Check Timestamp**
   *
   * @remarks
   *
   * The exact date and time when this health check was performed. This is useful for:
   * - Tracking health check frequency
   * - Correlating with other system events
   * - Monitoring health check response times
   * - Historical health trend analysis
   */
  timestamp?: Date | undefined;
  /**
   * **API Version**
   *
   * @remarks
   *
   * The current version of the Import Content API. This helps with:
   * - Version compatibility checking
   * - Feature availability verification
   * - Upgrade planning and coordination
   * - Support and troubleshooting
   */
  version?: string | undefined;
  /**
   * **Service Uptime**
   *
   * @remarks
   *
   * The total time the service has been running since the last restart. This metric is useful for:
   * - Service stability monitoring
   * - Maintenance scheduling
   * - Performance trend analysis
   * - Reliability assessment
   */
  uptime?: string | undefined;
};

/** @internal */
export const GetHealthResponse$inboundSchema: z.ZodType<
  GetHealthResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  status: z.string().optional(),
  timestamp: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  version: z.string().optional(),
  uptime: z.string().optional(),
});

/** @internal */
export type GetHealthResponse$Outbound = {
  status?: string | undefined;
  timestamp?: string | undefined;
  version?: string | undefined;
  uptime?: string | undefined;
};

/** @internal */
export const GetHealthResponse$outboundSchema: z.ZodType<
  GetHealthResponse$Outbound,
  z.ZodTypeDef,
  GetHealthResponse
> = z.object({
  status: z.string().optional(),
  timestamp: z.date().transform(v => v.toISOString()).optional(),
  version: z.string().optional(),
  uptime: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetHealthResponse$ {
  /** @deprecated use `GetHealthResponse$inboundSchema` instead. */
  export const inboundSchema = GetHealthResponse$inboundSchema;
  /** @deprecated use `GetHealthResponse$outboundSchema` instead. */
  export const outboundSchema = GetHealthResponse$outboundSchema;
  /** @deprecated use `GetHealthResponse$Outbound` instead. */
  export type Outbound = GetHealthResponse$Outbound;
}

export function getHealthResponseToJSON(
  getHealthResponse: GetHealthResponse,
): string {
  return JSON.stringify(
    GetHealthResponse$outboundSchema.parse(getHealthResponse),
  );
}

export function getHealthResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetHealthResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetHealthResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetHealthResponse' from JSON`,
  );
}
