/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type StartGHSearchRequest = {
  /**
   * The Language locale accepted by the client (used for locale specific fields in resource representation and in error responses).
   */
  acceptLanguage: models.AcceptLanguage;
  /**
   * The ID of the portal being accessed.<br><br>A portal ID is composed of a 2-4 letter prefix, followed by a dash and 4-15 digits.
   */
  portalID: string;
  /**
   * The language that describes the details of a resource. Resources available in different languages may differ from each other.<li>If <code>lang</code> is not passed, then the portal's default language is used.</li>
   */
  language?: models.LanguageQueryParameter | undefined;
  ghCustomAdditionalAttributes?: string | undefined;
  ghSearchRequest: models.GHSearchRequest;
};

export type StartGHSearchResponse = {
  headers: { [k: string]: Array<string> };
  result: models.GHSearchResult;
};

/** @internal */
export const StartGHSearchRequest$inboundSchema: z.ZodType<
  StartGHSearchRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  "Accept-Language": models.AcceptLanguage$inboundSchema,
  portalID: z.string(),
  language: models.LanguageQueryParameter$inboundSchema.optional(),
  ghCustomAdditionalAttributes: z.string().optional(),
  GHSearchRequest: models.GHSearchRequest$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "Accept-Language": "acceptLanguage",
    "GHSearchRequest": "ghSearchRequest",
  });
});

/** @internal */
export type StartGHSearchRequest$Outbound = {
  "Accept-Language": string;
  portalID: string;
  language?: string | undefined;
  ghCustomAdditionalAttributes?: string | undefined;
  GHSearchRequest: models.GHSearchRequest$Outbound;
};

/** @internal */
export const StartGHSearchRequest$outboundSchema: z.ZodType<
  StartGHSearchRequest$Outbound,
  z.ZodTypeDef,
  StartGHSearchRequest
> = z.object({
  acceptLanguage: models.AcceptLanguage$outboundSchema,
  portalID: z.string(),
  language: models.LanguageQueryParameter$outboundSchema.optional(),
  ghCustomAdditionalAttributes: z.string().optional(),
  ghSearchRequest: models.GHSearchRequest$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    acceptLanguage: "Accept-Language",
    ghSearchRequest: "GHSearchRequest",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StartGHSearchRequest$ {
  /** @deprecated use `StartGHSearchRequest$inboundSchema` instead. */
  export const inboundSchema = StartGHSearchRequest$inboundSchema;
  /** @deprecated use `StartGHSearchRequest$outboundSchema` instead. */
  export const outboundSchema = StartGHSearchRequest$outboundSchema;
  /** @deprecated use `StartGHSearchRequest$Outbound` instead. */
  export type Outbound = StartGHSearchRequest$Outbound;
}

export function startGHSearchRequestToJSON(
  startGHSearchRequest: StartGHSearchRequest,
): string {
  return JSON.stringify(
    StartGHSearchRequest$outboundSchema.parse(startGHSearchRequest),
  );
}

export function startGHSearchRequestFromJSON(
  jsonString: string,
): SafeParseResult<StartGHSearchRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => StartGHSearchRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'StartGHSearchRequest' from JSON`,
  );
}

/** @internal */
export const StartGHSearchResponse$inboundSchema: z.ZodType<
  StartGHSearchResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())),
  Result: models.GHSearchResult$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
    "Result": "result",
  });
});

/** @internal */
export type StartGHSearchResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
  Result: models.GHSearchResult$Outbound;
};

/** @internal */
export const StartGHSearchResponse$outboundSchema: z.ZodType<
  StartGHSearchResponse$Outbound,
  z.ZodTypeDef,
  StartGHSearchResponse
> = z.object({
  headers: z.record(z.array(z.string())),
  result: models.GHSearchResult$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StartGHSearchResponse$ {
  /** @deprecated use `StartGHSearchResponse$inboundSchema` instead. */
  export const inboundSchema = StartGHSearchResponse$inboundSchema;
  /** @deprecated use `StartGHSearchResponse$outboundSchema` instead. */
  export const outboundSchema = StartGHSearchResponse$outboundSchema;
  /** @deprecated use `StartGHSearchResponse$Outbound` instead. */
  export type Outbound = StartGHSearchResponse$Outbound;
}

export function startGHSearchResponseToJSON(
  startGHSearchResponse: StartGHSearchResponse,
): string {
  return JSON.stringify(
    StartGHSearchResponse$outboundSchema.parse(startGHSearchResponse),
  );
}

export function startGHSearchResponseFromJSON(
  jsonString: string,
): SafeParseResult<StartGHSearchResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => StartGHSearchResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'StartGHSearchResponse' from JSON`,
  );
}
