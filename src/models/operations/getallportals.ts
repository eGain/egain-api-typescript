/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type GetAllPortalsRequest = {
  /**
   * The Language locale accepted by the client (used for locale specific fields in resource representation and in error responses).
   */
  acceptLanguage: models.AcceptLanguage;
  /**
   * The ID of the department.
   */
  departmentID?: string | undefined;
  /**
   * The language that describes the details of a resource. Resources available in different languages may differ from each other.<li>If <code>lang</code> is not passed, then the portal's default language is used.</li>
   */
  language?: models.LanguageQueryParameter | undefined;
  /**
   * Pagination parameter that specifies the page number of results to be returned. Used in conjunction with $pagesize.
   */
  pagenum?: number | undefined;
  /**
   * Pagination parameter that specifies the number of results per page. Used in conjunction with $pagenum.
   */
  pagesize?: number | undefined;
};

/** @internal */
export const GetAllPortalsRequest$inboundSchema: z.ZodType<
  GetAllPortalsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  "Accept-Language": models.AcceptLanguage$inboundSchema,
  departmentID: z.string().optional(),
  language: models.LanguageQueryParameter$inboundSchema.optional(),
  pagenum: z.number().int().default(1),
  pagesize: z.number().int().default(10),
}).transform((v) => {
  return remap$(v, {
    "Accept-Language": "acceptLanguage",
  });
});

/** @internal */
export type GetAllPortalsRequest$Outbound = {
  "Accept-Language": string;
  departmentID?: string | undefined;
  language?: string | undefined;
  pagenum: number;
  pagesize: number;
};

/** @internal */
export const GetAllPortalsRequest$outboundSchema: z.ZodType<
  GetAllPortalsRequest$Outbound,
  z.ZodTypeDef,
  GetAllPortalsRequest
> = z.object({
  acceptLanguage: models.AcceptLanguage$outboundSchema,
  departmentID: z.string().optional(),
  language: models.LanguageQueryParameter$outboundSchema.optional(),
  pagenum: z.number().int().default(1),
  pagesize: z.number().int().default(10),
}).transform((v) => {
  return remap$(v, {
    acceptLanguage: "Accept-Language",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPortalsRequest$ {
  /** @deprecated use `GetAllPortalsRequest$inboundSchema` instead. */
  export const inboundSchema = GetAllPortalsRequest$inboundSchema;
  /** @deprecated use `GetAllPortalsRequest$outboundSchema` instead. */
  export const outboundSchema = GetAllPortalsRequest$outboundSchema;
  /** @deprecated use `GetAllPortalsRequest$Outbound` instead. */
  export type Outbound = GetAllPortalsRequest$Outbound;
}

export function getAllPortalsRequestToJSON(
  getAllPortalsRequest: GetAllPortalsRequest,
): string {
  return JSON.stringify(
    GetAllPortalsRequest$outboundSchema.parse(getAllPortalsRequest),
  );
}

export function getAllPortalsRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetAllPortalsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAllPortalsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllPortalsRequest' from JSON`,
  );
}
