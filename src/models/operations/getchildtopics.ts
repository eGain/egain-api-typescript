/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type GetchildtopicsRequest = {
  /**
   * The Language locale accepted by the client (used for locale specific fields in resource representation and in error responses).
   */
  acceptLanguage: models.AcceptLanguage;
  /**
   * The ID of the portal being accessed.<br><br>A portal ID is composed of a 2-4 letter prefix, followed by a dash and 4-15 digits.
   */
  portalID: string;
  /**
   * Search Profile ID
   */
  searchProfileId?: string | undefined;
  /**
   * The ID of a topic.<br><br>A topic ID is composed of a 2-4 letter prefix, followed by a dash and 4-15 digits.
   */
  topicID: string;
  /**
   * Depth of the topic hierarchy to be returned in the response.
   */
  level?: number | undefined;
  /**
   * The language that describes the details of a resource. Resources available in different languages may differ from each other.<li>If <code>lang</code> is not passed, then the portal's default language is used.</li>
   */
  language?: models.LanguageQueryParameter | undefined;
  /**
   * The attributes of a topic to be returned *in addition to* the default list of attributes, listed below. Multiple additional attributes can be specified using a comma-separated list. Passing 'all' returns all attributes.
   *
   * @remarks
   *
   * #### Default Attributes
   * These topic attributes are always returned:
   *
   * | Name | Description
   * | ---- | -----------
   * | id | The ID of the topic.
   * | name  | The name of the topic.
   * | articleCountInTopic | Number of articles in this topic.
   * | articleCountInTopicTree  | Number of articles in this topic and all sub-topics.
   * | createdBy.id | The ID of the user that created the topic.
   * | createdDate | The date when the topic was created.
   * | departmentId | ID of the department for which this topic belongs to.
   * | topicHomeArticleId | The ID of the article used as the home page of this topic.
   * | modifiedBy.id | The ID of the user that last modified the topic.
   * | modifiedDate | The date when the topic was last modified on.
   * | childCount | Total number of children sub-topis below the current topic
   * | subTopicIds | Array with the list of sub-topics
   * | parentTopicId | ID of the parent topic. -1 if it is the root topic.
   */
  topicAdditionalAttributes?:
    | Array<models.TopicAdditionalAttributes>
    | undefined;
  customAdditionalAttributes?: string | undefined;
  /**
   * Pagination parameter that specifies the page number of results to be returned. Used in conjunction with $pagesize.
   */
  pagenum?: number | undefined;
  /**
   * Pagination parameter that specifies the number of results per page. Used in conjunction with $pagenum.
   */
  pagesize?: number | undefined;
};

/** @internal */
export const GetchildtopicsRequest$inboundSchema: z.ZodType<
  GetchildtopicsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  "Accept-Language": models.AcceptLanguage$inboundSchema,
  portalID: z.string(),
  searchProfileId: z.string().optional(),
  topicID: z.string(),
  level: z.number().int().optional(),
  language: models.LanguageQueryParameter$inboundSchema.optional(),
  topicAdditionalAttributes: z.array(
    models.TopicAdditionalAttributes$inboundSchema,
  ).optional(),
  customAdditionalAttributes: z.string().optional(),
  pagenum: z.number().int().default(1),
  pagesize: z.number().int().default(10),
}).transform((v) => {
  return remap$(v, {
    "Accept-Language": "acceptLanguage",
  });
});

/** @internal */
export type GetchildtopicsRequest$Outbound = {
  "Accept-Language": string;
  portalID: string;
  searchProfileId?: string | undefined;
  topicID: string;
  level?: number | undefined;
  language?: string | undefined;
  topicAdditionalAttributes?: Array<string> | undefined;
  customAdditionalAttributes?: string | undefined;
  pagenum: number;
  pagesize: number;
};

/** @internal */
export const GetchildtopicsRequest$outboundSchema: z.ZodType<
  GetchildtopicsRequest$Outbound,
  z.ZodTypeDef,
  GetchildtopicsRequest
> = z.object({
  acceptLanguage: models.AcceptLanguage$outboundSchema,
  portalID: z.string(),
  searchProfileId: z.string().optional(),
  topicID: z.string(),
  level: z.number().int().optional(),
  language: models.LanguageQueryParameter$outboundSchema.optional(),
  topicAdditionalAttributes: z.array(
    models.TopicAdditionalAttributes$outboundSchema,
  ).optional(),
  customAdditionalAttributes: z.string().optional(),
  pagenum: z.number().int().default(1),
  pagesize: z.number().int().default(10),
}).transform((v) => {
  return remap$(v, {
    acceptLanguage: "Accept-Language",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetchildtopicsRequest$ {
  /** @deprecated use `GetchildtopicsRequest$inboundSchema` instead. */
  export const inboundSchema = GetchildtopicsRequest$inboundSchema;
  /** @deprecated use `GetchildtopicsRequest$outboundSchema` instead. */
  export const outboundSchema = GetchildtopicsRequest$outboundSchema;
  /** @deprecated use `GetchildtopicsRequest$Outbound` instead. */
  export type Outbound = GetchildtopicsRequest$Outbound;
}

export function getchildtopicsRequestToJSON(
  getchildtopicsRequest: GetchildtopicsRequest,
): string {
  return JSON.stringify(
    GetchildtopicsRequest$outboundSchema.parse(getchildtopicsRequest),
  );
}

export function getchildtopicsRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetchildtopicsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetchildtopicsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetchildtopicsRequest' from JSON`,
  );
}
