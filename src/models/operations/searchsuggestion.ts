/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

/**
 * The search filter applied to the list of suggestions by a user.
 */
export const FilterStatus = {
  Suggested: "suggested",
  Pending: "pending",
  Declined: "declined",
  Approved: "approved",
} as const;
/**
 * The search filter applied to the list of suggestions by a user.
 */
export type FilterStatus = ClosedEnum<typeof FilterStatus>;

export type SearchSuggestionRequest = {
  /**
   * The Language locale accepted by the client (used for locale specific fields in resource representation and in error responses).
   */
  acceptLanguage: models.AcceptLanguage;
  /**
   * The ID of the portal being accessed.<br><br>A portal ID is composed of a 2-4 letter prefix, followed by a dash and 4-15 digits.
   */
  portalID: string;
  /**
   * The search filter applied to the list of suggestions by a user.
   */
  filterStatus: FilterStatus;
  /**
   * Objects returned in server response are sorted based on the attribute supplied under $sort.
   */
  sort?: models.SortIdName | undefined;
  /**
   * Common query parameter $order.
   */
  order?: models.Order | undefined;
  /**
   * Pagination parameter that specifies the page number of results to be returned. Used in conjunction with $pagesize.
   */
  pagenum?: number | undefined;
  /**
   * Pagination parameter that specifies the number of results per page. Used in conjunction with $pagenum.<br>Valid range of 5-75<br>_Default value_: 25
   */
  pagesize?: number | undefined;
};

/** @internal */
export const FilterStatus$inboundSchema: z.ZodNativeEnum<typeof FilterStatus> =
  z.nativeEnum(FilterStatus);

/** @internal */
export const FilterStatus$outboundSchema: z.ZodNativeEnum<typeof FilterStatus> =
  FilterStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FilterStatus$ {
  /** @deprecated use `FilterStatus$inboundSchema` instead. */
  export const inboundSchema = FilterStatus$inboundSchema;
  /** @deprecated use `FilterStatus$outboundSchema` instead. */
  export const outboundSchema = FilterStatus$outboundSchema;
}

/** @internal */
export const SearchSuggestionRequest$inboundSchema: z.ZodType<
  SearchSuggestionRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  "Accept-Language": models.AcceptLanguage$inboundSchema,
  portalID: z.string(),
  "filter[status]": FilterStatus$inboundSchema,
  sort: models.SortIdName$inboundSchema.optional(),
  order: models.Order$inboundSchema.optional(),
  pagenum: z.number().int().default(1),
  pagesize: z.number().int().default(25),
}).transform((v) => {
  return remap$(v, {
    "Accept-Language": "acceptLanguage",
    "filter[status]": "filterStatus",
  });
});

/** @internal */
export type SearchSuggestionRequest$Outbound = {
  "Accept-Language": string;
  portalID: string;
  "filter[status]": string;
  sort?: string | undefined;
  order?: string | undefined;
  pagenum: number;
  pagesize: number;
};

/** @internal */
export const SearchSuggestionRequest$outboundSchema: z.ZodType<
  SearchSuggestionRequest$Outbound,
  z.ZodTypeDef,
  SearchSuggestionRequest
> = z.object({
  acceptLanguage: models.AcceptLanguage$outboundSchema,
  portalID: z.string(),
  filterStatus: FilterStatus$outboundSchema,
  sort: models.SortIdName$outboundSchema.optional(),
  order: models.Order$outboundSchema.optional(),
  pagenum: z.number().int().default(1),
  pagesize: z.number().int().default(25),
}).transform((v) => {
  return remap$(v, {
    acceptLanguage: "Accept-Language",
    filterStatus: "filter[status]",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchSuggestionRequest$ {
  /** @deprecated use `SearchSuggestionRequest$inboundSchema` instead. */
  export const inboundSchema = SearchSuggestionRequest$inboundSchema;
  /** @deprecated use `SearchSuggestionRequest$outboundSchema` instead. */
  export const outboundSchema = SearchSuggestionRequest$outboundSchema;
  /** @deprecated use `SearchSuggestionRequest$Outbound` instead. */
  export type Outbound = SearchSuggestionRequest$Outbound;
}

export function searchSuggestionRequestToJSON(
  searchSuggestionRequest: SearchSuggestionRequest,
): string {
  return JSON.stringify(
    SearchSuggestionRequest$outboundSchema.parse(searchSuggestionRequest),
  );
}

export function searchSuggestionRequestFromJSON(
  jsonString: string,
): SafeParseResult<SearchSuggestionRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SearchSuggestionRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SearchSuggestionRequest' from JSON`,
  );
}
