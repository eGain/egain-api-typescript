/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type GetPendingComplianceArticlesRequest = {
  /**
   * The Language locale accepted by the client (used for locale specific fields in resource representation and in error responses).
   */
  acceptLanguage: models.AcceptLanguage;
  /**
   * The attributes of an Article to be returned *in addition to* the default list of attributes, listed below. Multiple additional attributes can be specified using a comma-separated list. Passing 'all' will return all attributes.
   *
   * @remarks
   *
   * #### Default Attributes
   * These Article attributes are always returned:
   *
   * | Name | Description
   * | ---- | -----------
   * | id | The ID of the Article.
   * | name  | The name of the Article.
   * | updateSummary | Summary of the Article update.
   * | articleType | The Article Type and its attributes.
   * | createdBy | The ID, first name, middle name and last name of the user that created the Article.
   * | createdDate | The date that the Article was created.
   * | hasAttachments | True: The Article has one or more attachments.<br>False: The Article does not have any attachments.
   * | languageCode | The language code of the Article language.
   * | modifiedBy | The ID, first name, middle name and last name of the user that last modified the Article.
   * | modifiedDate | The date that the Article was last modified on.
   * | link | The link object, used to retrieve the details of the Article.
   * | versionId | The ID of the Article version that is returned.
   */
  complianceArticleResultAdditionalAttributes?:
    | Array<models.ComplianceArticleResultAdditionalAttributes>
    | undefined;
  /**
   * The ID of the portal being accessed.<br><br>A portal ID is composed of a 2-4 letter prefix, followed by a dash and 4-15 digits.
   */
  portalID: string;
  /**
   * The language that describes the details of a resource. Resources available in different languages may differ from each other.<li>If <code>lang</code> is not passed, then the portal's default language is used.</li>
   */
  language?: models.LanguageQueryParameter | undefined;
  /**
   * Pagination parameter that specifies the page number of results to be returned. Used in conjunction with $pagesize.
   */
  pagenum?: number | undefined;
  /**
   * Pagination parameter that specifies the number of results per page. Used in conjunction with $pagenum.
   */
  pagesize?: number | undefined;
};

/** @internal */
export const GetPendingComplianceArticlesRequest$inboundSchema: z.ZodType<
  GetPendingComplianceArticlesRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  "Accept-Language": models.AcceptLanguage$inboundSchema,
  complianceArticleResultAdditionalAttributes: z.array(
    models.ComplianceArticleResultAdditionalAttributes$inboundSchema,
  ).optional(),
  portalID: z.string(),
  language: models.LanguageQueryParameter$inboundSchema.optional(),
  pagenum: z.number().int().default(1),
  pagesize: z.number().int().default(10),
}).transform((v) => {
  return remap$(v, {
    "Accept-Language": "acceptLanguage",
  });
});

/** @internal */
export type GetPendingComplianceArticlesRequest$Outbound = {
  "Accept-Language": string;
  complianceArticleResultAdditionalAttributes?: Array<string> | undefined;
  portalID: string;
  language?: string | undefined;
  pagenum: number;
  pagesize: number;
};

/** @internal */
export const GetPendingComplianceArticlesRequest$outboundSchema: z.ZodType<
  GetPendingComplianceArticlesRequest$Outbound,
  z.ZodTypeDef,
  GetPendingComplianceArticlesRequest
> = z.object({
  acceptLanguage: models.AcceptLanguage$outboundSchema,
  complianceArticleResultAdditionalAttributes: z.array(
    models.ComplianceArticleResultAdditionalAttributes$outboundSchema,
  ).optional(),
  portalID: z.string(),
  language: models.LanguageQueryParameter$outboundSchema.optional(),
  pagenum: z.number().int().default(1),
  pagesize: z.number().int().default(10),
}).transform((v) => {
  return remap$(v, {
    acceptLanguage: "Accept-Language",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetPendingComplianceArticlesRequest$ {
  /** @deprecated use `GetPendingComplianceArticlesRequest$inboundSchema` instead. */
  export const inboundSchema =
    GetPendingComplianceArticlesRequest$inboundSchema;
  /** @deprecated use `GetPendingComplianceArticlesRequest$outboundSchema` instead. */
  export const outboundSchema =
    GetPendingComplianceArticlesRequest$outboundSchema;
  /** @deprecated use `GetPendingComplianceArticlesRequest$Outbound` instead. */
  export type Outbound = GetPendingComplianceArticlesRequest$Outbound;
}

export function getPendingComplianceArticlesRequestToJSON(
  getPendingComplianceArticlesRequest: GetPendingComplianceArticlesRequest,
): string {
  return JSON.stringify(
    GetPendingComplianceArticlesRequest$outboundSchema.parse(
      getPendingComplianceArticlesRequest,
    ),
  );
}

export function getPendingComplianceArticlesRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetPendingComplianceArticlesRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetPendingComplianceArticlesRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetPendingComplianceArticlesRequest' from JSON`,
  );
}
