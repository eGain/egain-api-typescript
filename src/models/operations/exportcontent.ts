/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ExportContentResponse = {
  headers: { [k: string]: Array<string> };
};

/** @internal */
export const ExportContentResponse$inboundSchema: z.ZodType<
  ExportContentResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())),
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
  });
});

/** @internal */
export type ExportContentResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
};

/** @internal */
export const ExportContentResponse$outboundSchema: z.ZodType<
  ExportContentResponse$Outbound,
  z.ZodTypeDef,
  ExportContentResponse
> = z.object({
  headers: z.record(z.array(z.string())),
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ExportContentResponse$ {
  /** @deprecated use `ExportContentResponse$inboundSchema` instead. */
  export const inboundSchema = ExportContentResponse$inboundSchema;
  /** @deprecated use `ExportContentResponse$outboundSchema` instead. */
  export const outboundSchema = ExportContentResponse$outboundSchema;
  /** @deprecated use `ExportContentResponse$Outbound` instead. */
  export type Outbound = ExportContentResponse$Outbound;
}

export function exportContentResponseToJSON(
  exportContentResponse: ExportContentResponse,
): string {
  return JSON.stringify(
    ExportContentResponse$outboundSchema.parse(exportContentResponse),
  );
}

export function exportContentResponseFromJSON(
  jsonString: string,
): SafeParseResult<ExportContentResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ExportContentResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ExportContentResponse' from JSON`,
  );
}
