/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type GetTagCategoriesForInterestForPortalRequest = {
  /**
   * The Language locale accepted by the client (used for locale specific fields in resource representation and in error responses).
   */
  acceptLanguage: models.AcceptLanguage;
  /**
   * The ID of the portal being accessed.<br><br>A portal ID is composed of a 2-4 letter prefix, followed by a dash and 4-15 digits.
   */
  portalID: string;
  /**
   * The language used for fetching the details of a resource. Resources available in different languages may differ from each other.
   */
  language: models.MandatoryLanguageQueryParameter;
};

/** @internal */
export const GetTagCategoriesForInterestForPortalRequest$inboundSchema:
  z.ZodType<
    GetTagCategoriesForInterestForPortalRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    "Accept-Language": models.AcceptLanguage$inboundSchema,
    portalID: z.string(),
    language: models.MandatoryLanguageQueryParameter$inboundSchema,
  }).transform((v) => {
    return remap$(v, {
      "Accept-Language": "acceptLanguage",
    });
  });

/** @internal */
export type GetTagCategoriesForInterestForPortalRequest$Outbound = {
  "Accept-Language": string;
  portalID: string;
  language: string;
};

/** @internal */
export const GetTagCategoriesForInterestForPortalRequest$outboundSchema:
  z.ZodType<
    GetTagCategoriesForInterestForPortalRequest$Outbound,
    z.ZodTypeDef,
    GetTagCategoriesForInterestForPortalRequest
  > = z.object({
    acceptLanguage: models.AcceptLanguage$outboundSchema,
    portalID: z.string(),
    language: models.MandatoryLanguageQueryParameter$outboundSchema,
  }).transform((v) => {
    return remap$(v, {
      acceptLanguage: "Accept-Language",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetTagCategoriesForInterestForPortalRequest$ {
  /** @deprecated use `GetTagCategoriesForInterestForPortalRequest$inboundSchema` instead. */
  export const inboundSchema =
    GetTagCategoriesForInterestForPortalRequest$inboundSchema;
  /** @deprecated use `GetTagCategoriesForInterestForPortalRequest$outboundSchema` instead. */
  export const outboundSchema =
    GetTagCategoriesForInterestForPortalRequest$outboundSchema;
  /** @deprecated use `GetTagCategoriesForInterestForPortalRequest$Outbound` instead. */
  export type Outbound = GetTagCategoriesForInterestForPortalRequest$Outbound;
}

export function getTagCategoriesForInterestForPortalRequestToJSON(
  getTagCategoriesForInterestForPortalRequest:
    GetTagCategoriesForInterestForPortalRequest,
): string {
  return JSON.stringify(
    GetTagCategoriesForInterestForPortalRequest$outboundSchema.parse(
      getTagCategoriesForInterestForPortalRequest,
    ),
  );
}

export function getTagCategoriesForInterestForPortalRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  GetTagCategoriesForInterestForPortalRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetTagCategoriesForInterestForPortalRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetTagCategoriesForInterestForPortalRequest' from JSON`,
  );
}
