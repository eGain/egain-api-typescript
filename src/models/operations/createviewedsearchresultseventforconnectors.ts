/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type CreateViewedSearchResultsEventForConnectorsRequest = {
  /**
   * The Language locale accepted by the client (used for locale specific fields in resource representation and in error responses).
   */
  acceptLanguage: models.AcceptLanguage;
  /**
   * The ID of the portal being accessed.<br><br>A portal ID is composed of a 2-4 letter prefix, followed by a dash and 4-15 digits.
   */
  portalID: string;
  createViewedSearchResultEventForConnectors:
    models.CreateViewedSearchResultEventForConnectors;
};

/** @internal */
export const CreateViewedSearchResultsEventForConnectorsRequest$inboundSchema:
  z.ZodType<
    CreateViewedSearchResultsEventForConnectorsRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    "Accept-Language": models.AcceptLanguage$inboundSchema,
    portalID: z.string(),
    createViewedSearchResultEventForConnectors:
      models.CreateViewedSearchResultEventForConnectors$inboundSchema,
  }).transform((v) => {
    return remap$(v, {
      "Accept-Language": "acceptLanguage",
    });
  });

/** @internal */
export type CreateViewedSearchResultsEventForConnectorsRequest$Outbound = {
  "Accept-Language": string;
  portalID: string;
  createViewedSearchResultEventForConnectors:
    models.CreateViewedSearchResultEventForConnectors$Outbound;
};

/** @internal */
export const CreateViewedSearchResultsEventForConnectorsRequest$outboundSchema:
  z.ZodType<
    CreateViewedSearchResultsEventForConnectorsRequest$Outbound,
    z.ZodTypeDef,
    CreateViewedSearchResultsEventForConnectorsRequest
  > = z.object({
    acceptLanguage: models.AcceptLanguage$outboundSchema,
    portalID: z.string(),
    createViewedSearchResultEventForConnectors:
      models.CreateViewedSearchResultEventForConnectors$outboundSchema,
  }).transform((v) => {
    return remap$(v, {
      acceptLanguage: "Accept-Language",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateViewedSearchResultsEventForConnectorsRequest$ {
  /** @deprecated use `CreateViewedSearchResultsEventForConnectorsRequest$inboundSchema` instead. */
  export const inboundSchema =
    CreateViewedSearchResultsEventForConnectorsRequest$inboundSchema;
  /** @deprecated use `CreateViewedSearchResultsEventForConnectorsRequest$outboundSchema` instead. */
  export const outboundSchema =
    CreateViewedSearchResultsEventForConnectorsRequest$outboundSchema;
  /** @deprecated use `CreateViewedSearchResultsEventForConnectorsRequest$Outbound` instead. */
  export type Outbound =
    CreateViewedSearchResultsEventForConnectorsRequest$Outbound;
}

export function createViewedSearchResultsEventForConnectorsRequestToJSON(
  createViewedSearchResultsEventForConnectorsRequest:
    CreateViewedSearchResultsEventForConnectorsRequest,
): string {
  return JSON.stringify(
    CreateViewedSearchResultsEventForConnectorsRequest$outboundSchema.parse(
      createViewedSearchResultsEventForConnectorsRequest,
    ),
  );
}

export function createViewedSearchResultsEventForConnectorsRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  CreateViewedSearchResultsEventForConnectorsRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      CreateViewedSearchResultsEventForConnectorsRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'CreateViewedSearchResultsEventForConnectorsRequest' from JSON`,
  );
}
