/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

/**
 * workflow milestone of the Article
 */
export const WorkflowMilestone = {
  Authoring: "authoring",
  Publish: "publish",
  Staging: "staging",
} as const;
/**
 * workflow milestone of the Article
 */
export type WorkflowMilestone = ClosedEnum<typeof WorkflowMilestone>;

export type GetArticlePersonalizationRequest = {
  /**
   * The Language locale accepted by the client (used for locale specific fields in resource representation and in error responses).
   */
  acceptLanguage: models.AcceptLanguage;
  /**
   * The ID of the portal being accessed.<br><br>A portal ID is composed of a 2-4 letter prefix, followed by a dash and 4-15 digits.
   */
  portalID: string;
  /**
   * The ID of the Article.<br><br>An Article ID is composed of a 2-4 letter prefix followed by a dash and 4-15 digits.
   */
  articleID: string;
  /**
   * The language that describes the details of a resource. Resources available in different languages may differ from each other.<li>If <code>lang</code> is not passed, then the portal's default language is used.</li>
   */
  language?: models.LanguageQueryParameter | undefined;
  /**
   * Workflow milestone of the Article
   */
  workflowMilestone?: WorkflowMilestone | undefined;
};

/** @internal */
export const WorkflowMilestone$inboundSchema: z.ZodNativeEnum<
  typeof WorkflowMilestone
> = z.nativeEnum(WorkflowMilestone);

/** @internal */
export const WorkflowMilestone$outboundSchema: z.ZodNativeEnum<
  typeof WorkflowMilestone
> = WorkflowMilestone$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace WorkflowMilestone$ {
  /** @deprecated use `WorkflowMilestone$inboundSchema` instead. */
  export const inboundSchema = WorkflowMilestone$inboundSchema;
  /** @deprecated use `WorkflowMilestone$outboundSchema` instead. */
  export const outboundSchema = WorkflowMilestone$outboundSchema;
}

/** @internal */
export const GetArticlePersonalizationRequest$inboundSchema: z.ZodType<
  GetArticlePersonalizationRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  "Accept-Language": models.AcceptLanguage$inboundSchema,
  portalID: z.string(),
  articleID: z.string(),
  language: models.LanguageQueryParameter$inboundSchema.optional(),
  workflowMilestone: WorkflowMilestone$inboundSchema.default("publish"),
}).transform((v) => {
  return remap$(v, {
    "Accept-Language": "acceptLanguage",
  });
});

/** @internal */
export type GetArticlePersonalizationRequest$Outbound = {
  "Accept-Language": string;
  portalID: string;
  articleID: string;
  language?: string | undefined;
  workflowMilestone: string;
};

/** @internal */
export const GetArticlePersonalizationRequest$outboundSchema: z.ZodType<
  GetArticlePersonalizationRequest$Outbound,
  z.ZodTypeDef,
  GetArticlePersonalizationRequest
> = z.object({
  acceptLanguage: models.AcceptLanguage$outboundSchema,
  portalID: z.string(),
  articleID: z.string(),
  language: models.LanguageQueryParameter$outboundSchema.optional(),
  workflowMilestone: WorkflowMilestone$outboundSchema.default("publish"),
}).transform((v) => {
  return remap$(v, {
    acceptLanguage: "Accept-Language",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetArticlePersonalizationRequest$ {
  /** @deprecated use `GetArticlePersonalizationRequest$inboundSchema` instead. */
  export const inboundSchema = GetArticlePersonalizationRequest$inboundSchema;
  /** @deprecated use `GetArticlePersonalizationRequest$outboundSchema` instead. */
  export const outboundSchema = GetArticlePersonalizationRequest$outboundSchema;
  /** @deprecated use `GetArticlePersonalizationRequest$Outbound` instead. */
  export type Outbound = GetArticlePersonalizationRequest$Outbound;
}

export function getArticlePersonalizationRequestToJSON(
  getArticlePersonalizationRequest: GetArticlePersonalizationRequest,
): string {
  return JSON.stringify(
    GetArticlePersonalizationRequest$outboundSchema.parse(
      getArticlePersonalizationRequest,
    ),
  );
}

export function getArticlePersonalizationRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetArticlePersonalizationRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetArticlePersonalizationRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetArticlePersonalizationRequest' from JSON`,
  );
}
