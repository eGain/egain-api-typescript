/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type AiSearchRequest = {
  /**
   * The search query string. The string must be escaped as required by the URL syntax rules.
   */
  q: string;
  /**
   * The ID of the portal being accessed.<br><br>A portal ID is composed of a 2-4 letter prefix, followed by a dash and 4-15 digits.
   */
  portalID: string;
  /**
   * The ID of the user profile.
   *
   * @remarks
   */
  filterUserProfileID?: string | undefined;
  /**
   * The language that describes the details of a resource. Resources available in different languages may differ from each other. <br><br> If lang is not passed, then the portal's default language is used.
   */
  language?: models.LanguageCodeParameter | undefined;
  /**
   * An object where each key is a **Category Tag ID** (numeric string),
   *
   * @remarks
   * and each value is an array of **Tag IDs** for that category.
   */
  filterTags?: { [k: string]: Array<string> } | undefined;
  /**
   * An array of topic IDs. It is used to restrict search results to specific topics.
   */
  filterTopicIds?: Array<string> | undefined;
  /**
   * One or more comma-separated names for article custom attributes defined by the user to be returned.
   */
  articleCustomAdditionalAttributes?: string | undefined;
  /**
   * Pagination parameter that specifies the page number of results to be returned. Used in conjunction with $pagesize.
   */
  pagenum?: number | undefined;
  /**
   * Pagination parameter that specifies the number of results per page. Used in conjunction with $pagenum.
   */
  pagesize?: number | undefined;
};

/** @internal */
export const AiSearchRequest$inboundSchema: z.ZodType<
  AiSearchRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  q: z.string(),
  portalID: z.string(),
  filterUserProfileID: z.string().optional(),
  language: models.LanguageCodeParameter$inboundSchema.optional(),
  filterTags: z.record(z.array(z.string())).optional(),
  filterTopicIds: z.array(z.string()).optional(),
  articleCustomAdditionalAttributes: z.string().optional(),
  pagenum: z.number().int().default(1),
  pagesize: z.number().int().default(10),
});

/** @internal */
export type AiSearchRequest$Outbound = {
  q: string;
  portalID: string;
  filterUserProfileID?: string | undefined;
  language?: string | undefined;
  filterTags?: { [k: string]: Array<string> } | undefined;
  filterTopicIds?: Array<string> | undefined;
  articleCustomAdditionalAttributes?: string | undefined;
  pagenum: number;
  pagesize: number;
};

/** @internal */
export const AiSearchRequest$outboundSchema: z.ZodType<
  AiSearchRequest$Outbound,
  z.ZodTypeDef,
  AiSearchRequest
> = z.object({
  q: z.string(),
  portalID: z.string(),
  filterUserProfileID: z.string().optional(),
  language: models.LanguageCodeParameter$outboundSchema.optional(),
  filterTags: z.record(z.array(z.string())).optional(),
  filterTopicIds: z.array(z.string()).optional(),
  articleCustomAdditionalAttributes: z.string().optional(),
  pagenum: z.number().int().default(1),
  pagesize: z.number().int().default(10),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AiSearchRequest$ {
  /** @deprecated use `AiSearchRequest$inboundSchema` instead. */
  export const inboundSchema = AiSearchRequest$inboundSchema;
  /** @deprecated use `AiSearchRequest$outboundSchema` instead. */
  export const outboundSchema = AiSearchRequest$outboundSchema;
  /** @deprecated use `AiSearchRequest$Outbound` instead. */
  export type Outbound = AiSearchRequest$Outbound;
}

export function aiSearchRequestToJSON(
  aiSearchRequest: AiSearchRequest,
): string {
  return JSON.stringify(AiSearchRequest$outboundSchema.parse(aiSearchRequest));
}

export function aiSearchRequestFromJSON(
  jsonString: string,
): SafeParseResult<AiSearchRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AiSearchRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AiSearchRequest' from JSON`,
  );
}
