/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type Answer = {
  /**
   * ID of answer
   */
  id?: string | undefined;
  /**
   * Value of answer
   */
  value?: string | undefined;
};

/** @internal */
export const Answer$inboundSchema: z.ZodType<Answer, z.ZodTypeDef, unknown> = z
  .object({
    id: z.string().optional(),
    value: z.string().optional(),
  });

/** @internal */
export type Answer$Outbound = {
  id?: string | undefined;
  value?: string | undefined;
};

/** @internal */
export const Answer$outboundSchema: z.ZodType<
  Answer$Outbound,
  z.ZodTypeDef,
  Answer
> = z.object({
  id: z.string().optional(),
  value: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Answer$ {
  /** @deprecated use `Answer$inboundSchema` instead. */
  export const inboundSchema = Answer$inboundSchema;
  /** @deprecated use `Answer$outboundSchema` instead. */
  export const outboundSchema = Answer$outboundSchema;
  /** @deprecated use `Answer$Outbound` instead. */
  export type Outbound = Answer$Outbound;
}

export function answerToJSON(answer: Answer): string {
  return JSON.stringify(Answer$outboundSchema.parse(answer));
}

export function answerFromJSON(
  jsonString: string,
): SafeParseResult<Answer, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Answer$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Answer' from JSON`,
  );
}
