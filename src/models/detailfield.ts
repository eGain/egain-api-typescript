/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type DetailField = {
  /**
   * The ID of the Detail Field.<br>The ID is composed of a 2-4 letter prefix, followed by a dash and 4-15 digits.
   */
  id?: string | undefined;
  /**
   * link of the detail
   */
  detailLink?: string | undefined;
  /**
   * type of the detail
   */
  detailType?: string | undefined;
  /**
   * name of the field
   */
  fieldName?: string | undefined;
};

/** @internal */
export const DetailField$inboundSchema: z.ZodType<
  DetailField,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  detailLink: z.string().optional(),
  detailType: z.string().optional(),
  fieldName: z.string().optional(),
});

/** @internal */
export type DetailField$Outbound = {
  id?: string | undefined;
  detailLink?: string | undefined;
  detailType?: string | undefined;
  fieldName?: string | undefined;
};

/** @internal */
export const DetailField$outboundSchema: z.ZodType<
  DetailField$Outbound,
  z.ZodTypeDef,
  DetailField
> = z.object({
  id: z.string().optional(),
  detailLink: z.string().optional(),
  detailType: z.string().optional(),
  fieldName: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DetailField$ {
  /** @deprecated use `DetailField$inboundSchema` instead. */
  export const inboundSchema = DetailField$inboundSchema;
  /** @deprecated use `DetailField$outboundSchema` instead. */
  export const outboundSchema = DetailField$outboundSchema;
  /** @deprecated use `DetailField$Outbound` instead. */
  export type Outbound = DetailField$Outbound;
}

export function detailFieldToJSON(detailField: DetailField): string {
  return JSON.stringify(DetailField$outboundSchema.parse(detailField));
}

export function detailFieldFromJSON(
  jsonString: string,
): SafeParseResult<DetailField, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DetailField$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DetailField' from JSON`,
  );
}
