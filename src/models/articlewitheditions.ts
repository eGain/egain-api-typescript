/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import {
  ArticleAttachment,
  ArticleAttachment$inboundSchema,
  ArticleAttachment$Outbound,
  ArticleAttachment$outboundSchema,
} from "./articleattachment.js";
import {
  ArticleType,
  ArticleType$inboundSchema,
  ArticleType$Outbound,
  ArticleType$outboundSchema,
} from "./articletype.js";
import {
  CreatedBy,
  CreatedBy$inboundSchema,
  CreatedBy$Outbound,
  CreatedBy$outboundSchema,
} from "./createdby.js";
import {
  CustomAttribute,
  CustomAttribute$inboundSchema,
  CustomAttribute$Outbound,
  CustomAttribute$outboundSchema,
} from "./customattribute.js";
import {
  Edition,
  Edition$inboundSchema,
  Edition$Outbound,
  Edition$outboundSchema,
} from "./edition.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  LanguageCode,
  LanguageCode$inboundSchema,
  LanguageCode$outboundSchema,
} from "./languagecode.js";
import {
  Link,
  Link$inboundSchema,
  Link$Outbound,
  Link$outboundSchema,
} from "./link.js";
import {
  ModifiedBy,
  ModifiedBy$inboundSchema,
  ModifiedBy$Outbound,
  ModifiedBy$outboundSchema,
} from "./modifiedby.js";
import {
  OwnedBy,
  OwnedBy$inboundSchema,
  OwnedBy$Outbound,
  OwnedBy$outboundSchema,
} from "./ownedby.js";
import {
  Personalization,
  Personalization$inboundSchema,
  Personalization$Outbound,
  Personalization$outboundSchema,
} from "./personalization.js";
import {
  RelatedQuestions,
  RelatedQuestions$inboundSchema,
  RelatedQuestions$Outbound,
  RelatedQuestions$outboundSchema,
} from "./relatedquestions.js";
import {
  StructuredAuthoringFields,
  StructuredAuthoringFields$inboundSchema,
  StructuredAuthoringFields$Outbound,
  StructuredAuthoringFields$outboundSchema,
} from "./structuredauthoringfields.js";
import {
  Workflow,
  Workflow$inboundSchema,
  Workflow$Outbound,
  Workflow$outboundSchema,
} from "./workflow.js";

/**
 * Success
 */
export type ArticleWithEditions = {
  /**
   * The ID of the Article.<br>An Article ID is composed of a 2-4 letter prefix, followed by a dash and 4-15 digits.
   */
  id: string;
  /**
   * Additional information about the Article. Max 1 KB.
   */
  additionalInfo?: string | undefined;
  /**
   * The name of the macro associated with this Article.
   */
  articleMacro?: string | undefined;
  /**
   * The type of the Article and its attributes.
   */
  articleType?: ArticleType | undefined;
  /**
   * A comma-separated list of keywords associated with this Article. 1 KB max size limit.
   */
  articleKeywords?: string | undefined;
  /**
   * A brief summary of the Article, provided as metadata. 1 KB max size limit.
   */
  articleSummary?: string | undefined;
  /**
   * The attachments of the Article.
   *
   * @remarks
   */
  attachments?: Array<ArticleAttachment> | undefined;
  /**
   * The date on which the Article version is available.
   */
  availabilityDate?: string | undefined;
  /**
   * The editions of this Article that are available to the user.
   */
  availableEditions?: Array<Edition> | undefined;
  /**
   * The average rating of the Article.
   */
  averageRating?: number | undefined;
  /**
   * The Article content. The maximum allowed Article content size is 5 MB.
   */
  content?: string | undefined;
  /**
   * The plaintext version of the Article content, which does not have the HTML tags and rich formatting present in *content*. The maximum allowed Article content size is 5 MB.
   */
  contentText?: string | undefined;
  createdBy: CreatedBy;
  modifiedBy?: ModifiedBy | undefined;
  ownedBy?: OwnedBy | undefined;
  createdDate?: string | undefined;
  /**
   * A list of custom attributes.
   */
  customAttributes?: Array<CustomAttribute> | undefined;
  /**
   * ID of the Article's department.
   */
  departmentID?: string | undefined;
  /**
   * A description of the Article. The maximum allowed Article description size is 1 KB.
   */
  description?: string | undefined;
  /**
   * Date of Article expiration if Article expires otherwise empty.
   */
  expirationDate?: string | undefined;
  /**
   * The URL of an image to be associated with the Article.
   */
  imageURL?: string | undefined;
  /**
   * Indicates whether the Article is included for Generative AI.
   */
  includeInGenAI?: boolean | undefined;
  /**
   * Indicates whether the Article is subscribed for notifications.
   */
  isSubscribed?: boolean | undefined;
  /**
   * The date on which the Article was last modified.
   */
  modifiedDate?: string | undefined;
  /**
   * Language code of the resource's language.
   */
  languageCode?: LanguageCode | undefined;
  /**
   * Defines the relationship between this resource and another object.
   */
  link?: Link | undefined;
  /**
   * The name of the Article.
   */
  name: string;
  structuredAuthoringFields?: StructuredAuthoringFields | undefined;
  /**
   * The Article's state.
   */
  articleState?: string | undefined;
  /**
   * The number of times that this Article has been rated.
   */
  timesRated?: number | undefined;
  /**
   * Related questions for the article.
   */
  relatedQuestions?: RelatedQuestions | undefined;
  /**
   * The ID of this version of the Article.
   */
  versionId?: string | undefined;
  /**
   * The Article's workflow.
   */
  workflow?: Workflow | undefined;
  /**
   * Personalization allows the filtering of search results and controls the access to articles and article editions.
   */
  personalization?: Personalization | undefined;
};

/** @internal */
export const ArticleWithEditions$inboundSchema: z.ZodType<
  ArticleWithEditions,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  additionalInfo: z.string().optional(),
  articleMacro: z.string().optional(),
  articleType: ArticleType$inboundSchema.optional(),
  articleKeywords: z.string().optional(),
  articleSummary: z.string().optional(),
  attachments: z.array(ArticleAttachment$inboundSchema).optional(),
  availabilityDate: z.string().optional(),
  availableEditions: z.array(Edition$inboundSchema).optional(),
  averageRating: z.number().optional(),
  content: z.string().optional(),
  contentText: z.string().optional(),
  createdBy: CreatedBy$inboundSchema,
  modifiedBy: ModifiedBy$inboundSchema.optional(),
  ownedBy: OwnedBy$inboundSchema.optional(),
  createdDate: z.string().optional(),
  customAttributes: z.array(CustomAttribute$inboundSchema).optional(),
  departmentID: z.string().optional(),
  description: z.string().optional(),
  expirationDate: z.string().optional(),
  imageURL: z.string().optional(),
  includeInGenAI: z.boolean().optional(),
  isSubscribed: z.boolean().optional(),
  modifiedDate: z.string().optional(),
  languageCode: LanguageCode$inboundSchema.optional(),
  link: Link$inboundSchema.optional(),
  name: z.string(),
  structuredAuthoringFields: StructuredAuthoringFields$inboundSchema.optional(),
  articleState: z.string().optional(),
  timesRated: z.number().int().optional(),
  relatedQuestions: RelatedQuestions$inboundSchema.optional(),
  versionId: z.string().optional(),
  workflow: Workflow$inboundSchema.optional(),
  personalization: Personalization$inboundSchema.optional(),
});

/** @internal */
export type ArticleWithEditions$Outbound = {
  id: string;
  additionalInfo?: string | undefined;
  articleMacro?: string | undefined;
  articleType?: ArticleType$Outbound | undefined;
  articleKeywords?: string | undefined;
  articleSummary?: string | undefined;
  attachments?: Array<ArticleAttachment$Outbound> | undefined;
  availabilityDate?: string | undefined;
  availableEditions?: Array<Edition$Outbound> | undefined;
  averageRating?: number | undefined;
  content?: string | undefined;
  contentText?: string | undefined;
  createdBy: CreatedBy$Outbound;
  modifiedBy?: ModifiedBy$Outbound | undefined;
  ownedBy?: OwnedBy$Outbound | undefined;
  createdDate?: string | undefined;
  customAttributes?: Array<CustomAttribute$Outbound> | undefined;
  departmentID?: string | undefined;
  description?: string | undefined;
  expirationDate?: string | undefined;
  imageURL?: string | undefined;
  includeInGenAI?: boolean | undefined;
  isSubscribed?: boolean | undefined;
  modifiedDate?: string | undefined;
  languageCode?: string | undefined;
  link?: Link$Outbound | undefined;
  name: string;
  structuredAuthoringFields?: StructuredAuthoringFields$Outbound | undefined;
  articleState?: string | undefined;
  timesRated?: number | undefined;
  relatedQuestions?: RelatedQuestions$Outbound | undefined;
  versionId?: string | undefined;
  workflow?: Workflow$Outbound | undefined;
  personalization?: Personalization$Outbound | undefined;
};

/** @internal */
export const ArticleWithEditions$outboundSchema: z.ZodType<
  ArticleWithEditions$Outbound,
  z.ZodTypeDef,
  ArticleWithEditions
> = z.object({
  id: z.string(),
  additionalInfo: z.string().optional(),
  articleMacro: z.string().optional(),
  articleType: ArticleType$outboundSchema.optional(),
  articleKeywords: z.string().optional(),
  articleSummary: z.string().optional(),
  attachments: z.array(ArticleAttachment$outboundSchema).optional(),
  availabilityDate: z.string().optional(),
  availableEditions: z.array(Edition$outboundSchema).optional(),
  averageRating: z.number().optional(),
  content: z.string().optional(),
  contentText: z.string().optional(),
  createdBy: CreatedBy$outboundSchema,
  modifiedBy: ModifiedBy$outboundSchema.optional(),
  ownedBy: OwnedBy$outboundSchema.optional(),
  createdDate: z.string().optional(),
  customAttributes: z.array(CustomAttribute$outboundSchema).optional(),
  departmentID: z.string().optional(),
  description: z.string().optional(),
  expirationDate: z.string().optional(),
  imageURL: z.string().optional(),
  includeInGenAI: z.boolean().optional(),
  isSubscribed: z.boolean().optional(),
  modifiedDate: z.string().optional(),
  languageCode: LanguageCode$outboundSchema.optional(),
  link: Link$outboundSchema.optional(),
  name: z.string(),
  structuredAuthoringFields: StructuredAuthoringFields$outboundSchema
    .optional(),
  articleState: z.string().optional(),
  timesRated: z.number().int().optional(),
  relatedQuestions: RelatedQuestions$outboundSchema.optional(),
  versionId: z.string().optional(),
  workflow: Workflow$outboundSchema.optional(),
  personalization: Personalization$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ArticleWithEditions$ {
  /** @deprecated use `ArticleWithEditions$inboundSchema` instead. */
  export const inboundSchema = ArticleWithEditions$inboundSchema;
  /** @deprecated use `ArticleWithEditions$outboundSchema` instead. */
  export const outboundSchema = ArticleWithEditions$outboundSchema;
  /** @deprecated use `ArticleWithEditions$Outbound` instead. */
  export type Outbound = ArticleWithEditions$Outbound;
}

export function articleWithEditionsToJSON(
  articleWithEditions: ArticleWithEditions,
): string {
  return JSON.stringify(
    ArticleWithEditions$outboundSchema.parse(articleWithEditions),
  );
}

export function articleWithEditionsFromJSON(
  jsonString: string,
): SafeParseResult<ArticleWithEditions, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ArticleWithEditions$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ArticleWithEditions' from JSON`,
  );
}
