/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type ModifiedBy = {
  /**
   * The ID of the user that modified this resource.
   */
  id?: string | undefined;
  /**
   * The resource modifier's username.
   */
  userName?: string | undefined;
  /**
   * The resource modifier's first name.
   */
  firstName?: string | undefined;
  /**
   * The resource modifier's middle name.
   */
  middleName?: string | undefined;
  /**
   * The resource modifier's last name.
   */
  lastName?: string | undefined;
};

/** @internal */
export const ModifiedBy$inboundSchema: z.ZodType<
  ModifiedBy,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  userName: z.string().optional(),
  firstName: z.string().optional(),
  middleName: z.string().optional(),
  lastName: z.string().optional(),
});

/** @internal */
export type ModifiedBy$Outbound = {
  id?: string | undefined;
  userName?: string | undefined;
  firstName?: string | undefined;
  middleName?: string | undefined;
  lastName?: string | undefined;
};

/** @internal */
export const ModifiedBy$outboundSchema: z.ZodType<
  ModifiedBy$Outbound,
  z.ZodTypeDef,
  ModifiedBy
> = z.object({
  id: z.string().optional(),
  userName: z.string().optional(),
  firstName: z.string().optional(),
  middleName: z.string().optional(),
  lastName: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ModifiedBy$ {
  /** @deprecated use `ModifiedBy$inboundSchema` instead. */
  export const inboundSchema = ModifiedBy$inboundSchema;
  /** @deprecated use `ModifiedBy$outboundSchema` instead. */
  export const outboundSchema = ModifiedBy$outboundSchema;
  /** @deprecated use `ModifiedBy$Outbound` instead. */
  export type Outbound = ModifiedBy$Outbound;
}

export function modifiedByToJSON(modifiedBy: ModifiedBy): string {
  return JSON.stringify(ModifiedBy$outboundSchema.parse(modifiedBy));
}

export function modifiedByFromJSON(
  jsonString: string,
): SafeParseResult<ModifiedBy, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ModifiedBy$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ModifiedBy' from JSON`,
  );
}
