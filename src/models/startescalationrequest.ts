/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import {
  Contacts,
  Contacts$inboundSchema,
  Contacts$Outbound,
  Contacts$outboundSchema,
} from "./contacts.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

/**
 * The contact point details of the customer who is starting the escalation.
 */
export type Customer = {
  /**
   * Contacts
   */
  contacts?: Contacts | undefined;
};

/**
 * The type of escalation
 *
 * @remarks
 */
export const ChannelEnum = {
  Email: "email",
} as const;
/**
 * The type of escalation
 *
 * @remarks
 */
export type ChannelEnum = ClosedEnum<typeof ChannelEnum>;

/**
 * Only required when captcha is enabled for portal.
 *
 * @remarks
 */
export type Captcha = {
  response: string;
};

export type StartEscalationRequest = {
  /**
   * The contact point details of the customer who is starting the escalation.
   */
  customer?: Customer | undefined;
  /**
   * The subject of the email message.
   *
   * @remarks
   */
  subject: string;
  /**
   * The body of the email message.
   *
   * @remarks
   */
  body: string;
  /**
   * The type of escalation
   *
   * @remarks
   */
  channel: ChannelEnum;
  /**
   * The url of the page that the customer was viewing at the time when the ecalation started.
   *
   * @remarks
   */
  url: string;
  /**
   * Only required when captcha is enabled for portal.
   *
   * @remarks
   */
  captcha?: Captcha | undefined;
};

/** @internal */
export const Customer$inboundSchema: z.ZodType<
  Customer,
  z.ZodTypeDef,
  unknown
> = z.object({
  contacts: Contacts$inboundSchema.optional(),
});

/** @internal */
export type Customer$Outbound = {
  contacts?: Contacts$Outbound | undefined;
};

/** @internal */
export const Customer$outboundSchema: z.ZodType<
  Customer$Outbound,
  z.ZodTypeDef,
  Customer
> = z.object({
  contacts: Contacts$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Customer$ {
  /** @deprecated use `Customer$inboundSchema` instead. */
  export const inboundSchema = Customer$inboundSchema;
  /** @deprecated use `Customer$outboundSchema` instead. */
  export const outboundSchema = Customer$outboundSchema;
  /** @deprecated use `Customer$Outbound` instead. */
  export type Outbound = Customer$Outbound;
}

export function customerToJSON(customer: Customer): string {
  return JSON.stringify(Customer$outboundSchema.parse(customer));
}

export function customerFromJSON(
  jsonString: string,
): SafeParseResult<Customer, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Customer$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Customer' from JSON`,
  );
}

/** @internal */
export const ChannelEnum$inboundSchema: z.ZodNativeEnum<typeof ChannelEnum> = z
  .nativeEnum(ChannelEnum);

/** @internal */
export const ChannelEnum$outboundSchema: z.ZodNativeEnum<typeof ChannelEnum> =
  ChannelEnum$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChannelEnum$ {
  /** @deprecated use `ChannelEnum$inboundSchema` instead. */
  export const inboundSchema = ChannelEnum$inboundSchema;
  /** @deprecated use `ChannelEnum$outboundSchema` instead. */
  export const outboundSchema = ChannelEnum$outboundSchema;
}

/** @internal */
export const Captcha$inboundSchema: z.ZodType<Captcha, z.ZodTypeDef, unknown> =
  z.object({
    response: z.string(),
  });

/** @internal */
export type Captcha$Outbound = {
  response: string;
};

/** @internal */
export const Captcha$outboundSchema: z.ZodType<
  Captcha$Outbound,
  z.ZodTypeDef,
  Captcha
> = z.object({
  response: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Captcha$ {
  /** @deprecated use `Captcha$inboundSchema` instead. */
  export const inboundSchema = Captcha$inboundSchema;
  /** @deprecated use `Captcha$outboundSchema` instead. */
  export const outboundSchema = Captcha$outboundSchema;
  /** @deprecated use `Captcha$Outbound` instead. */
  export type Outbound = Captcha$Outbound;
}

export function captchaToJSON(captcha: Captcha): string {
  return JSON.stringify(Captcha$outboundSchema.parse(captcha));
}

export function captchaFromJSON(
  jsonString: string,
): SafeParseResult<Captcha, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Captcha$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Captcha' from JSON`,
  );
}

/** @internal */
export const StartEscalationRequest$inboundSchema: z.ZodType<
  StartEscalationRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  customer: z.lazy(() => Customer$inboundSchema).optional(),
  subject: z.string(),
  body: z.string(),
  channel: ChannelEnum$inboundSchema,
  url: z.string(),
  captcha: z.lazy(() => Captcha$inboundSchema).optional(),
});

/** @internal */
export type StartEscalationRequest$Outbound = {
  customer?: Customer$Outbound | undefined;
  subject: string;
  body: string;
  channel: string;
  url: string;
  captcha?: Captcha$Outbound | undefined;
};

/** @internal */
export const StartEscalationRequest$outboundSchema: z.ZodType<
  StartEscalationRequest$Outbound,
  z.ZodTypeDef,
  StartEscalationRequest
> = z.object({
  customer: z.lazy(() => Customer$outboundSchema).optional(),
  subject: z.string(),
  body: z.string(),
  channel: ChannelEnum$outboundSchema,
  url: z.string(),
  captcha: z.lazy(() => Captcha$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StartEscalationRequest$ {
  /** @deprecated use `StartEscalationRequest$inboundSchema` instead. */
  export const inboundSchema = StartEscalationRequest$inboundSchema;
  /** @deprecated use `StartEscalationRequest$outboundSchema` instead. */
  export const outboundSchema = StartEscalationRequest$outboundSchema;
  /** @deprecated use `StartEscalationRequest$Outbound` instead. */
  export type Outbound = StartEscalationRequest$Outbound;
}

export function startEscalationRequestToJSON(
  startEscalationRequest: StartEscalationRequest,
): string {
  return JSON.stringify(
    StartEscalationRequest$outboundSchema.parse(startEscalationRequest),
  );
}

export function startEscalationRequestFromJSON(
  jsonString: string,
): SafeParseResult<StartEscalationRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => StartEscalationRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'StartEscalationRequest' from JSON`,
  );
}
