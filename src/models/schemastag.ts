/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type SchemasTag = {
  /**
   * The unique identifier for the tag.
   */
  id?: string | undefined;
  /**
   * The name of the tag.
   */
  name?: string | undefined;
};

/** @internal */
export const SchemasTag$inboundSchema: z.ZodType<
  SchemasTag,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  name: z.string().optional(),
});

/** @internal */
export type SchemasTag$Outbound = {
  id?: string | undefined;
  name?: string | undefined;
};

/** @internal */
export const SchemasTag$outboundSchema: z.ZodType<
  SchemasTag$Outbound,
  z.ZodTypeDef,
  SchemasTag
> = z.object({
  id: z.string().optional(),
  name: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SchemasTag$ {
  /** @deprecated use `SchemasTag$inboundSchema` instead. */
  export const inboundSchema = SchemasTag$inboundSchema;
  /** @deprecated use `SchemasTag$outboundSchema` instead. */
  export const outboundSchema = SchemasTag$outboundSchema;
  /** @deprecated use `SchemasTag$Outbound` instead. */
  export type Outbound = SchemasTag$Outbound;
}

export function schemasTagToJSON(schemasTag: SchemasTag): string {
  return JSON.stringify(SchemasTag$outboundSchema.parse(schemasTag));
}

export function schemasTagFromJSON(
  jsonString: string,
): SafeParseResult<SchemasTag, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SchemasTag$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SchemasTag' from JSON`,
  );
}
