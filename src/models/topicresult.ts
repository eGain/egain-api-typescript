/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  PaginationInfo,
  PaginationInfo$inboundSchema,
  PaginationInfo$Outbound,
  PaginationInfo$outboundSchema,
} from "./paginationinfo.js";
import {
  Topic,
  Topic$inboundSchema,
  Topic$Outbound,
  Topic$outboundSchema,
} from "./topic.js";

/**
 * A TopicResult defines a response from any of the Topic APIs.
 */
export type TopicResult = {
  topic?: Array<Topic> | undefined;
  paginationInfo?: PaginationInfo | undefined;
};

/** @internal */
export const TopicResult$inboundSchema: z.ZodType<
  TopicResult,
  z.ZodTypeDef,
  unknown
> = z.object({
  topic: z.array(Topic$inboundSchema).optional(),
  paginationInfo: PaginationInfo$inboundSchema.optional(),
});

/** @internal */
export type TopicResult$Outbound = {
  topic?: Array<Topic$Outbound> | undefined;
  paginationInfo?: PaginationInfo$Outbound | undefined;
};

/** @internal */
export const TopicResult$outboundSchema: z.ZodType<
  TopicResult$Outbound,
  z.ZodTypeDef,
  TopicResult
> = z.object({
  topic: z.array(Topic$outboundSchema).optional(),
  paginationInfo: PaginationInfo$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TopicResult$ {
  /** @deprecated use `TopicResult$inboundSchema` instead. */
  export const inboundSchema = TopicResult$inboundSchema;
  /** @deprecated use `TopicResult$outboundSchema` instead. */
  export const outboundSchema = TopicResult$outboundSchema;
  /** @deprecated use `TopicResult$Outbound` instead. */
  export type Outbound = TopicResult$Outbound;
}

export function topicResultToJSON(topicResult: TopicResult): string {
  return JSON.stringify(TopicResult$outboundSchema.parse(topicResult));
}

export function topicResultFromJSON(
  jsonString: string,
): SafeParseResult<TopicResult, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TopicResult$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TopicResult' from JSON`,
  );
}
