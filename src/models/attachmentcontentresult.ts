/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import {
  AttachmentContent,
  AttachmentContent$inboundSchema,
  AttachmentContent$Outbound,
  AttachmentContent$outboundSchema,
} from "./attachmentcontent.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

/**
 * The returned attachment content.
 */
export type AttachmentContentResult = {
  attachmentContent?: Array<AttachmentContent> | undefined;
};

/** @internal */
export const AttachmentContentResult$inboundSchema: z.ZodType<
  AttachmentContentResult,
  z.ZodTypeDef,
  unknown
> = z.object({
  attachmentContent: z.array(AttachmentContent$inboundSchema).optional(),
});

/** @internal */
export type AttachmentContentResult$Outbound = {
  attachmentContent?: Array<AttachmentContent$Outbound> | undefined;
};

/** @internal */
export const AttachmentContentResult$outboundSchema: z.ZodType<
  AttachmentContentResult$Outbound,
  z.ZodTypeDef,
  AttachmentContentResult
> = z.object({
  attachmentContent: z.array(AttachmentContent$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AttachmentContentResult$ {
  /** @deprecated use `AttachmentContentResult$inboundSchema` instead. */
  export const inboundSchema = AttachmentContentResult$inboundSchema;
  /** @deprecated use `AttachmentContentResult$outboundSchema` instead. */
  export const outboundSchema = AttachmentContentResult$outboundSchema;
  /** @deprecated use `AttachmentContentResult$Outbound` instead. */
  export type Outbound = AttachmentContentResult$Outbound;
}

export function attachmentContentResultToJSON(
  attachmentContentResult: AttachmentContentResult,
): string {
  return JSON.stringify(
    AttachmentContentResult$outboundSchema.parse(attachmentContentResult),
  );
}

export function attachmentContentResultFromJSON(
  jsonString: string,
): SafeParseResult<AttachmentContentResult, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AttachmentContentResult$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AttachmentContentResult' from JSON`,
  );
}
