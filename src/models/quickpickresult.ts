/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type QuickpickResult = {
  /**
   * The ID of the Quickpick being accessed.
   *
   * @remarks
   */
  id?: string | undefined;
  /**
   * name of the quick pick
   */
  name?: string | undefined;
  /**
   * comment about quick pick
   */
  comment?: string | undefined;
  /**
   * The numerical ID of the Casebase Release.
   */
  casebaseReleaseId?: string | undefined;
};

/** @internal */
export const QuickpickResult$inboundSchema: z.ZodType<
  QuickpickResult,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  name: z.string().optional(),
  comment: z.string().optional(),
  casebaseReleaseId: z.string().optional(),
});

/** @internal */
export type QuickpickResult$Outbound = {
  id?: string | undefined;
  name?: string | undefined;
  comment?: string | undefined;
  casebaseReleaseId?: string | undefined;
};

/** @internal */
export const QuickpickResult$outboundSchema: z.ZodType<
  QuickpickResult$Outbound,
  z.ZodTypeDef,
  QuickpickResult
> = z.object({
  id: z.string().optional(),
  name: z.string().optional(),
  comment: z.string().optional(),
  casebaseReleaseId: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace QuickpickResult$ {
  /** @deprecated use `QuickpickResult$inboundSchema` instead. */
  export const inboundSchema = QuickpickResult$inboundSchema;
  /** @deprecated use `QuickpickResult$outboundSchema` instead. */
  export const outboundSchema = QuickpickResult$outboundSchema;
  /** @deprecated use `QuickpickResult$Outbound` instead. */
  export type Outbound = QuickpickResult$Outbound;
}

export function quickpickResultToJSON(
  quickpickResult: QuickpickResult,
): string {
  return JSON.stringify(QuickpickResult$outboundSchema.parse(quickpickResult));
}

export function quickpickResultFromJSON(
  jsonString: string,
): SafeParseResult<QuickpickResult, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => QuickpickResult$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'QuickpickResult' from JSON`,
  );
}
