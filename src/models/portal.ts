/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import {
  CreatedBy,
  CreatedBy$inboundSchema,
  CreatedBy$Outbound,
  CreatedBy$outboundSchema,
} from "./createdby.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  KbLanguages,
  KbLanguages$inboundSchema,
  KbLanguages$Outbound,
  KbLanguages$outboundSchema,
} from "./kblanguages.js";
import {
  Link,
  Link$inboundSchema,
  Link$Outbound,
  Link$outboundSchema,
} from "./link.js";
import {
  ModifiedBy,
  ModifiedBy$inboundSchema,
  ModifiedBy$Outbound,
  ModifiedBy$outboundSchema,
} from "./modifiedby.js";
import {
  PortalSettings,
  PortalSettings$inboundSchema,
  PortalSettings$Outbound,
  PortalSettings$outboundSchema,
} from "./portalsettings.js";

export type Portal = {
  /**
   * The alphanumeric ID of the portal.<br><br>A topic ID is composed of a 2-4 letter prefix, followed by a dash and 4-15 digits.
   */
  id: string;
  /**
   * The name of the portal.
   */
  name: string;
  /**
   * The ID of the department.
   */
  departmentId?: string | undefined;
  /**
   * The description of the portal.
   */
  description?: string | undefined;
  /**
   * The default ID of the language for the portal content.
   */
  defaultContentLanguageId?: string | undefined;
  /**
   * The IETF code of the default language for the portal content.
   */
  defaultContentLanguageCode?: string | undefined;
  createdBy?: CreatedBy | undefined;
  /**
   * The date that the portal was created.
   */
  createdDate?: string | undefined;
  modifiedBy?: ModifiedBy | undefined;
  /**
   * The date on which the portal was last modified.
   */
  modifiedDate?: string | undefined;
  /**
   * Indicates if Structured Authoring is enabled for the portal.
   */
  isStructuredAuthoringEnabled?: boolean | undefined;
  /**
   * Indicates if Enable Portal Search for Draft and Staging Articles is enabled for the portal.
   */
  enableDraftSearchInPortal?: boolean | undefined;
  /**
   * The settings for this portal.
   */
  portalSettings?: PortalSettings | undefined;
  /**
   * KB languages
   */
  kbLanguages?: KbLanguages | undefined;
  /**
   * Defines the relationship between this resource and another object.
   */
  link?: Link | undefined;
};

/** @internal */
export const Portal$inboundSchema: z.ZodType<Portal, z.ZodTypeDef, unknown> = z
  .object({
    id: z.string(),
    name: z.string(),
    departmentId: z.string().optional(),
    description: z.string().optional(),
    defaultContentLanguageId: z.string().optional(),
    defaultContentLanguageCode: z.string().optional(),
    createdBy: CreatedBy$inboundSchema.optional(),
    createdDate: z.string().optional(),
    modifiedBy: ModifiedBy$inboundSchema.optional(),
    modifiedDate: z.string().optional(),
    isStructuredAuthoringEnabled: z.boolean().optional(),
    enableDraftSearchInPortal: z.boolean().optional(),
    portalSettings: PortalSettings$inboundSchema.optional(),
    kbLanguages: KbLanguages$inboundSchema.optional(),
    link: Link$inboundSchema.optional(),
  });

/** @internal */
export type Portal$Outbound = {
  id: string;
  name: string;
  departmentId?: string | undefined;
  description?: string | undefined;
  defaultContentLanguageId?: string | undefined;
  defaultContentLanguageCode?: string | undefined;
  createdBy?: CreatedBy$Outbound | undefined;
  createdDate?: string | undefined;
  modifiedBy?: ModifiedBy$Outbound | undefined;
  modifiedDate?: string | undefined;
  isStructuredAuthoringEnabled?: boolean | undefined;
  enableDraftSearchInPortal?: boolean | undefined;
  portalSettings?: PortalSettings$Outbound | undefined;
  kbLanguages?: KbLanguages$Outbound | undefined;
  link?: Link$Outbound | undefined;
};

/** @internal */
export const Portal$outboundSchema: z.ZodType<
  Portal$Outbound,
  z.ZodTypeDef,
  Portal
> = z.object({
  id: z.string(),
  name: z.string(),
  departmentId: z.string().optional(),
  description: z.string().optional(),
  defaultContentLanguageId: z.string().optional(),
  defaultContentLanguageCode: z.string().optional(),
  createdBy: CreatedBy$outboundSchema.optional(),
  createdDate: z.string().optional(),
  modifiedBy: ModifiedBy$outboundSchema.optional(),
  modifiedDate: z.string().optional(),
  isStructuredAuthoringEnabled: z.boolean().optional(),
  enableDraftSearchInPortal: z.boolean().optional(),
  portalSettings: PortalSettings$outboundSchema.optional(),
  kbLanguages: KbLanguages$outboundSchema.optional(),
  link: Link$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Portal$ {
  /** @deprecated use `Portal$inboundSchema` instead. */
  export const inboundSchema = Portal$inboundSchema;
  /** @deprecated use `Portal$outboundSchema` instead. */
  export const outboundSchema = Portal$outboundSchema;
  /** @deprecated use `Portal$Outbound` instead. */
  export type Outbound = Portal$Outbound;
}

export function portalToJSON(portal: Portal): string {
  return JSON.stringify(Portal$outboundSchema.parse(portal));
}

export function portalFromJSON(
  jsonString: string,
): SafeParseResult<Portal, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Portal$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Portal' from JSON`,
  );
}
