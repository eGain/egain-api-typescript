/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  Link,
  Link$inboundSchema,
  Link$Outbound,
  Link$outboundSchema,
} from "./link.js";

/**
 * This schema contains the topic ID and name of the topics. This is used by TopicBreadcrumb.
 */
export type TopicSummary = {
  /**
   * The alphanumeric ID of the topic.<br><br>A topic ID is composed of a 2-4 letter prefix, followed by a dash and 4-15 digits.
   */
  id?: string | undefined;
  /**
   * The name of the topic.
   */
  name?: string | undefined;
  /**
   * Defines the relationship between this resource and another object.
   */
  link?: Link | undefined;
};

/** @internal */
export const TopicSummary$inboundSchema: z.ZodType<
  TopicSummary,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  name: z.string().optional(),
  link: Link$inboundSchema.optional(),
});

/** @internal */
export type TopicSummary$Outbound = {
  id?: string | undefined;
  name?: string | undefined;
  link?: Link$Outbound | undefined;
};

/** @internal */
export const TopicSummary$outboundSchema: z.ZodType<
  TopicSummary$Outbound,
  z.ZodTypeDef,
  TopicSummary
> = z.object({
  id: z.string().optional(),
  name: z.string().optional(),
  link: Link$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TopicSummary$ {
  /** @deprecated use `TopicSummary$inboundSchema` instead. */
  export const inboundSchema = TopicSummary$inboundSchema;
  /** @deprecated use `TopicSummary$outboundSchema` instead. */
  export const outboundSchema = TopicSummary$outboundSchema;
  /** @deprecated use `TopicSummary$Outbound` instead. */
  export type Outbound = TopicSummary$Outbound;
}

export function topicSummaryToJSON(topicSummary: TopicSummary): string {
  return JSON.stringify(TopicSummary$outboundSchema.parse(topicSummary));
}

export function topicSummaryFromJSON(
  jsonString: string,
): SafeParseResult<TopicSummary, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TopicSummary$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TopicSummary' from JSON`,
  );
}
