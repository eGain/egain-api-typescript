/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  SchemasTag,
  SchemasTag$inboundSchema,
  SchemasTag$Outbound,
  SchemasTag$outboundSchema,
} from "./schemastag.js";
import {
  SchemasTagGroup,
  SchemasTagGroup$inboundSchema,
  SchemasTagGroup$Outbound,
  SchemasTagGroup$outboundSchema,
} from "./schemastaggroup.js";
import {
  UserView,
  UserView$inboundSchema,
  UserView$Outbound,
  UserView$outboundSchema,
} from "./userview.js";

/**
 * Date the Tag Category was created.
 */
export type CreatedDateAndTime = {
  user?: UserView | undefined;
  /**
   * The date in the format <code>YYYY-MM-DDTHH:MM:SS</code>.
   */
  date: Date;
};

/**
 * Date of last modification.
 */
export type LastModifiedDateAndTime = {
  user?: UserView | undefined;
  /**
   * The date in the format <code>YYYY-MM-DDTHH:MM:SS</code>.
   */
  date: Date;
};

export type SchemasTagCategory = {
  /**
   * name of the tag category.
   */
  name?: string | undefined;
  tagGroup?: Array<SchemasTagGroup> | undefined;
  tag?: Array<SchemasTag> | undefined;
  /**
   * Date the Tag Category was created.
   */
  created?: CreatedDateAndTime | undefined;
  /**
   * Date of last modification.
   */
  lastModified?: LastModifiedDateAndTime | undefined;
};

/** @internal */
export const CreatedDateAndTime$inboundSchema: z.ZodType<
  CreatedDateAndTime,
  z.ZodTypeDef,
  unknown
> = z.object({
  user: UserView$inboundSchema.optional(),
  date: z.string().datetime({ offset: true }).transform(v => new Date(v)),
});

/** @internal */
export type CreatedDateAndTime$Outbound = {
  user?: UserView$Outbound | undefined;
  date: string;
};

/** @internal */
export const CreatedDateAndTime$outboundSchema: z.ZodType<
  CreatedDateAndTime$Outbound,
  z.ZodTypeDef,
  CreatedDateAndTime
> = z.object({
  user: UserView$outboundSchema.optional(),
  date: z.date().transform(v => v.toISOString()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatedDateAndTime$ {
  /** @deprecated use `CreatedDateAndTime$inboundSchema` instead. */
  export const inboundSchema = CreatedDateAndTime$inboundSchema;
  /** @deprecated use `CreatedDateAndTime$outboundSchema` instead. */
  export const outboundSchema = CreatedDateAndTime$outboundSchema;
  /** @deprecated use `CreatedDateAndTime$Outbound` instead. */
  export type Outbound = CreatedDateAndTime$Outbound;
}

export function createdDateAndTimeToJSON(
  createdDateAndTime: CreatedDateAndTime,
): string {
  return JSON.stringify(
    CreatedDateAndTime$outboundSchema.parse(createdDateAndTime),
  );
}

export function createdDateAndTimeFromJSON(
  jsonString: string,
): SafeParseResult<CreatedDateAndTime, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreatedDateAndTime$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreatedDateAndTime' from JSON`,
  );
}

/** @internal */
export const LastModifiedDateAndTime$inboundSchema: z.ZodType<
  LastModifiedDateAndTime,
  z.ZodTypeDef,
  unknown
> = z.object({
  user: UserView$inboundSchema.optional(),
  date: z.string().datetime({ offset: true }).transform(v => new Date(v)),
});

/** @internal */
export type LastModifiedDateAndTime$Outbound = {
  user?: UserView$Outbound | undefined;
  date: string;
};

/** @internal */
export const LastModifiedDateAndTime$outboundSchema: z.ZodType<
  LastModifiedDateAndTime$Outbound,
  z.ZodTypeDef,
  LastModifiedDateAndTime
> = z.object({
  user: UserView$outboundSchema.optional(),
  date: z.date().transform(v => v.toISOString()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LastModifiedDateAndTime$ {
  /** @deprecated use `LastModifiedDateAndTime$inboundSchema` instead. */
  export const inboundSchema = LastModifiedDateAndTime$inboundSchema;
  /** @deprecated use `LastModifiedDateAndTime$outboundSchema` instead. */
  export const outboundSchema = LastModifiedDateAndTime$outboundSchema;
  /** @deprecated use `LastModifiedDateAndTime$Outbound` instead. */
  export type Outbound = LastModifiedDateAndTime$Outbound;
}

export function lastModifiedDateAndTimeToJSON(
  lastModifiedDateAndTime: LastModifiedDateAndTime,
): string {
  return JSON.stringify(
    LastModifiedDateAndTime$outboundSchema.parse(lastModifiedDateAndTime),
  );
}

export function lastModifiedDateAndTimeFromJSON(
  jsonString: string,
): SafeParseResult<LastModifiedDateAndTime, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LastModifiedDateAndTime$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LastModifiedDateAndTime' from JSON`,
  );
}

/** @internal */
export const SchemasTagCategory$inboundSchema: z.ZodType<
  SchemasTagCategory,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string().optional(),
  tagGroup: z.array(SchemasTagGroup$inboundSchema).optional(),
  tag: z.array(SchemasTag$inboundSchema).optional(),
  created: z.lazy(() => CreatedDateAndTime$inboundSchema).optional(),
  lastModified: z.lazy(() => LastModifiedDateAndTime$inboundSchema).optional(),
});

/** @internal */
export type SchemasTagCategory$Outbound = {
  name?: string | undefined;
  tagGroup?: Array<SchemasTagGroup$Outbound> | undefined;
  tag?: Array<SchemasTag$Outbound> | undefined;
  created?: CreatedDateAndTime$Outbound | undefined;
  lastModified?: LastModifiedDateAndTime$Outbound | undefined;
};

/** @internal */
export const SchemasTagCategory$outboundSchema: z.ZodType<
  SchemasTagCategory$Outbound,
  z.ZodTypeDef,
  SchemasTagCategory
> = z.object({
  name: z.string().optional(),
  tagGroup: z.array(SchemasTagGroup$outboundSchema).optional(),
  tag: z.array(SchemasTag$outboundSchema).optional(),
  created: z.lazy(() => CreatedDateAndTime$outboundSchema).optional(),
  lastModified: z.lazy(() => LastModifiedDateAndTime$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SchemasTagCategory$ {
  /** @deprecated use `SchemasTagCategory$inboundSchema` instead. */
  export const inboundSchema = SchemasTagCategory$inboundSchema;
  /** @deprecated use `SchemasTagCategory$outboundSchema` instead. */
  export const outboundSchema = SchemasTagCategory$outboundSchema;
  /** @deprecated use `SchemasTagCategory$Outbound` instead. */
  export type Outbound = SchemasTagCategory$Outbound;
}

export function schemasTagCategoryToJSON(
  schemasTagCategory: SchemasTagCategory,
): string {
  return JSON.stringify(
    SchemasTagCategory$outboundSchema.parse(schemasTagCategory),
  );
}

export function schemasTagCategoryFromJSON(
  jsonString: string,
): SafeParseResult<SchemasTagCategory, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SchemasTagCategory$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SchemasTagCategory' from JSON`,
  );
}
