/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import {
  Comment,
  Comment$inboundSchema,
  Comment$Outbound,
  Comment$outboundSchema,
} from "./comment.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

/**
 * This schema contains the definition of an array of comments.
 */
export type Comments = {
  /**
   * The number of comments.
   */
  count?: number | undefined;
  /**
   * The list of comments.
   */
  comments?: Array<Comment> | undefined;
};

/** @internal */
export const Comments$inboundSchema: z.ZodType<
  Comments,
  z.ZodTypeDef,
  unknown
> = z.object({
  count: z.number().int().optional(),
  comments: z.array(Comment$inboundSchema).optional(),
});

/** @internal */
export type Comments$Outbound = {
  count?: number | undefined;
  comments?: Array<Comment$Outbound> | undefined;
};

/** @internal */
export const Comments$outboundSchema: z.ZodType<
  Comments$Outbound,
  z.ZodTypeDef,
  Comments
> = z.object({
  count: z.number().int().optional(),
  comments: z.array(Comment$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Comments$ {
  /** @deprecated use `Comments$inboundSchema` instead. */
  export const inboundSchema = Comments$inboundSchema;
  /** @deprecated use `Comments$outboundSchema` instead. */
  export const outboundSchema = Comments$outboundSchema;
  /** @deprecated use `Comments$Outbound` instead. */
  export type Outbound = Comments$Outbound;
}

export function commentsToJSON(comments: Comments): string {
  return JSON.stringify(Comments$outboundSchema.parse(comments));
}

export function commentsFromJSON(
  jsonString: string,
): SafeParseResult<Comments, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Comments$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Comments' from JSON`,
  );
}
