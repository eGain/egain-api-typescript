/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

/**
 * Format of the source document (HTML, Doc, or PDF).
 */
export const AdditionalSnippetsDocType = {
  Html: "HTML",
  Doc: "Doc",
  Pdf: "Pdf",
} as const;
/**
 * Format of the source document (HTML, Doc, or PDF).
 */
export type AdditionalSnippetsDocType = ClosedEnum<
  typeof AdditionalSnippetsDocType
>;

export type AdditionalSnippets = {
  /**
   * The ID of the Article. <br><br> An Article ID is composed of a 2-4 letter prefix, followed by a dash and 4-15 digits.
   */
  id: string;
  /**
   * The name of the Article or source content.
   */
  name: string;
  /**
   * Format of the source document (HTML, Doc, or PDF).
   */
  docType: AdditionalSnippetsDocType;
  /**
   * Name of the attachment, if an attachment was used as the source content.
   */
  docName?: string | undefined;
  /**
   * A snippet of the article content.
   */
  snippet: string;
  /**
   * A keyword snippet of the article content.
   */
  keywordSnippet?: string | undefined;
  /**
   * Generated confidence score (0.0-1.0) for the snippet's relevance to the query.
   */
  relevanceScore: number;
};

/** @internal */
export const AdditionalSnippetsDocType$inboundSchema: z.ZodNativeEnum<
  typeof AdditionalSnippetsDocType
> = z.nativeEnum(AdditionalSnippetsDocType);

/** @internal */
export const AdditionalSnippetsDocType$outboundSchema: z.ZodNativeEnum<
  typeof AdditionalSnippetsDocType
> = AdditionalSnippetsDocType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AdditionalSnippetsDocType$ {
  /** @deprecated use `AdditionalSnippetsDocType$inboundSchema` instead. */
  export const inboundSchema = AdditionalSnippetsDocType$inboundSchema;
  /** @deprecated use `AdditionalSnippetsDocType$outboundSchema` instead. */
  export const outboundSchema = AdditionalSnippetsDocType$outboundSchema;
}

/** @internal */
export const AdditionalSnippets$inboundSchema: z.ZodType<
  AdditionalSnippets,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  name: z.string(),
  docType: AdditionalSnippetsDocType$inboundSchema,
  docName: z.string().optional(),
  snippet: z.string(),
  keywordSnippet: z.string().optional(),
  relevanceScore: z.number(),
});

/** @internal */
export type AdditionalSnippets$Outbound = {
  id: string;
  name: string;
  docType: string;
  docName?: string | undefined;
  snippet: string;
  keywordSnippet?: string | undefined;
  relevanceScore: number;
};

/** @internal */
export const AdditionalSnippets$outboundSchema: z.ZodType<
  AdditionalSnippets$Outbound,
  z.ZodTypeDef,
  AdditionalSnippets
> = z.object({
  id: z.string(),
  name: z.string(),
  docType: AdditionalSnippetsDocType$outboundSchema,
  docName: z.string().optional(),
  snippet: z.string(),
  keywordSnippet: z.string().optional(),
  relevanceScore: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AdditionalSnippets$ {
  /** @deprecated use `AdditionalSnippets$inboundSchema` instead. */
  export const inboundSchema = AdditionalSnippets$inboundSchema;
  /** @deprecated use `AdditionalSnippets$outboundSchema` instead. */
  export const outboundSchema = AdditionalSnippets$outboundSchema;
  /** @deprecated use `AdditionalSnippets$Outbound` instead. */
  export type Outbound = AdditionalSnippets$Outbound;
}

export function additionalSnippetsToJSON(
  additionalSnippets: AdditionalSnippets,
): string {
  return JSON.stringify(
    AdditionalSnippets$outboundSchema.parse(additionalSnippets),
  );
}

export function additionalSnippetsFromJSON(
  jsonString: string,
): SafeParseResult<AdditionalSnippets, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AdditionalSnippets$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AdditionalSnippets' from JSON`,
  );
}
