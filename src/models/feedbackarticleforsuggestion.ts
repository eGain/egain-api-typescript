/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import {
  ArticleResult,
  ArticleResult$inboundSchema,
  ArticleResult$Outbound,
  ArticleResult$outboundSchema,
} from "./articleresult.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

/**
 * This schema contains information about a Suggestion.
 */
export type FeedbackArticleForSuggestion = {
  /**
   * The ID of the Suggestion. A Suggestion ID is composed of a 2-4 letter prefix, followed by a dash and 4-15 digits.
   */
  id?: string | undefined;
  /**
   * The name of the Suggestion.
   */
  name?: string | undefined;
  /**
   * Related Articles for the Suggestion.
   */
  relatedArticles?: Array<ArticleResult> | undefined;
};

/** @internal */
export const FeedbackArticleForSuggestion$inboundSchema: z.ZodType<
  FeedbackArticleForSuggestion,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  name: z.string().optional(),
  relatedArticles: z.array(ArticleResult$inboundSchema).optional(),
});

/** @internal */
export type FeedbackArticleForSuggestion$Outbound = {
  id?: string | undefined;
  name?: string | undefined;
  relatedArticles?: Array<ArticleResult$Outbound> | undefined;
};

/** @internal */
export const FeedbackArticleForSuggestion$outboundSchema: z.ZodType<
  FeedbackArticleForSuggestion$Outbound,
  z.ZodTypeDef,
  FeedbackArticleForSuggestion
> = z.object({
  id: z.string().optional(),
  name: z.string().optional(),
  relatedArticles: z.array(ArticleResult$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FeedbackArticleForSuggestion$ {
  /** @deprecated use `FeedbackArticleForSuggestion$inboundSchema` instead. */
  export const inboundSchema = FeedbackArticleForSuggestion$inboundSchema;
  /** @deprecated use `FeedbackArticleForSuggestion$outboundSchema` instead. */
  export const outboundSchema = FeedbackArticleForSuggestion$outboundSchema;
  /** @deprecated use `FeedbackArticleForSuggestion$Outbound` instead. */
  export type Outbound = FeedbackArticleForSuggestion$Outbound;
}

export function feedbackArticleForSuggestionToJSON(
  feedbackArticleForSuggestion: FeedbackArticleForSuggestion,
): string {
  return JSON.stringify(
    FeedbackArticleForSuggestion$outboundSchema.parse(
      feedbackArticleForSuggestion,
    ),
  );
}

export function feedbackArticleForSuggestionFromJSON(
  jsonString: string,
): SafeParseResult<FeedbackArticleForSuggestion, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FeedbackArticleForSuggestion$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FeedbackArticleForSuggestion' from JSON`,
  );
}
