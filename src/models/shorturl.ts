/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type ShortURL = {
  /**
   * The alphanumeric ID of the short URL.<br><br>A topic ID is composed of a 2-4 letter prefix, followed by a dash and 4-15 digits.
   */
  id?: string | undefined;
  /**
   * Name of template
   */
  templateName?: string | undefined;
  /**
   * Name of ShortURL
   */
  shortURLName?: string | undefined;
  isDefault?: boolean | undefined;
};

/** @internal */
export const ShortURL$inboundSchema: z.ZodType<
  ShortURL,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  templateName: z.string().optional(),
  shortURLName: z.string().optional(),
  isDefault: z.boolean().optional(),
});

/** @internal */
export type ShortURL$Outbound = {
  id?: string | undefined;
  templateName?: string | undefined;
  shortURLName?: string | undefined;
  isDefault?: boolean | undefined;
};

/** @internal */
export const ShortURL$outboundSchema: z.ZodType<
  ShortURL$Outbound,
  z.ZodTypeDef,
  ShortURL
> = z.object({
  id: z.string().optional(),
  templateName: z.string().optional(),
  shortURLName: z.string().optional(),
  isDefault: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ShortURL$ {
  /** @deprecated use `ShortURL$inboundSchema` instead. */
  export const inboundSchema = ShortURL$inboundSchema;
  /** @deprecated use `ShortURL$outboundSchema` instead. */
  export const outboundSchema = ShortURL$outboundSchema;
  /** @deprecated use `ShortURL$Outbound` instead. */
  export type Outbound = ShortURL$Outbound;
}

export function shortURLToJSON(shortURL: ShortURL): string {
  return JSON.stringify(ShortURL$outboundSchema.parse(shortURL));
}

export function shortURLFromJSON(
  jsonString: string,
): SafeParseResult<ShortURL, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ShortURL$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ShortURL' from JSON`,
  );
}
