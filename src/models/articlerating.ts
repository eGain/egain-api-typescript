/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

/**
 * This schema contains general information about the article rating.
 */
export type ArticleRating = {
  /**
   * The ID of the rating.
   */
  id?: string | undefined;
  /**
   * The ID of the article.<br><br>An article ID is composed of a 2-4 letter prefix, followed by a dash and 4-15 digits.
   */
  articleId?: string | undefined;
  /**
   * The score value of the rating. This must be a value between 0 and 100.
   */
  ratingValue?: number | undefined;
  /**
   * Comments about the rating.
   */
  ratingComments?: string | undefined;
  /**
   * The ID of the user that rated the article.
   */
  userId?: string | undefined;
  /**
   * The timestamp for when the article was rated.
   */
  ratingTimestamp?: Date | undefined;
};

/** @internal */
export const ArticleRating$inboundSchema: z.ZodType<
  ArticleRating,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  articleId: z.string().optional(),
  ratingValue: z.number().int().optional(),
  ratingComments: z.string().optional(),
  userId: z.string().optional(),
  ratingTimestamp: z.string().datetime({ offset: true }).transform(v =>
    new Date(v)
  ).optional(),
});

/** @internal */
export type ArticleRating$Outbound = {
  id?: string | undefined;
  articleId?: string | undefined;
  ratingValue?: number | undefined;
  ratingComments?: string | undefined;
  userId?: string | undefined;
  ratingTimestamp?: string | undefined;
};

/** @internal */
export const ArticleRating$outboundSchema: z.ZodType<
  ArticleRating$Outbound,
  z.ZodTypeDef,
  ArticleRating
> = z.object({
  id: z.string().optional(),
  articleId: z.string().optional(),
  ratingValue: z.number().int().optional(),
  ratingComments: z.string().optional(),
  userId: z.string().optional(),
  ratingTimestamp: z.date().transform(v => v.toISOString()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ArticleRating$ {
  /** @deprecated use `ArticleRating$inboundSchema` instead. */
  export const inboundSchema = ArticleRating$inboundSchema;
  /** @deprecated use `ArticleRating$outboundSchema` instead. */
  export const outboundSchema = ArticleRating$outboundSchema;
  /** @deprecated use `ArticleRating$Outbound` instead. */
  export type Outbound = ArticleRating$Outbound;
}

export function articleRatingToJSON(articleRating: ArticleRating): string {
  return JSON.stringify(ArticleRating$outboundSchema.parse(articleRating));
}

export function articleRatingFromJSON(
  jsonString: string,
): SafeParseResult<ArticleRating, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ArticleRating$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ArticleRating' from JSON`,
  );
}
