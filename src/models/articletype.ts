/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

/**
 * Indicates the article category name.
 */
export const ArticleTypeTypeName = {
  General: "General",
  GuidedHelp: "Guided Help",
  DataLink: "Data Link",
  TopicHome: "Topic Home",
  Suggestion: "Suggestion",
  VirtualAssistantAction: "Virtual Assistant Action",
  RichMessage: "Rich Message",
} as const;
/**
 * Indicates the article category name.
 */
export type ArticleTypeTypeName = ClosedEnum<typeof ArticleTypeTypeName>;

/**
 * The type of the Article and its attributes.
 */
export type ArticleType = {
  /**
   * Specifies the article category ID.
   */
  articleCategoryId?: number | undefined;
  /**
   * Indicates the article category name.
   */
  typeName?: ArticleTypeTypeName | undefined;
  /**
   * Indicates whether to use Structured Authoring for the Article Type.
   */
  useStructuredAuthoring?: boolean | undefined;
  /**
   * The ID of the Article Type.
   */
  articleTypeId?: string | undefined;
};

/** @internal */
export const ArticleTypeTypeName$inboundSchema: z.ZodNativeEnum<
  typeof ArticleTypeTypeName
> = z.nativeEnum(ArticleTypeTypeName);

/** @internal */
export const ArticleTypeTypeName$outboundSchema: z.ZodNativeEnum<
  typeof ArticleTypeTypeName
> = ArticleTypeTypeName$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ArticleTypeTypeName$ {
  /** @deprecated use `ArticleTypeTypeName$inboundSchema` instead. */
  export const inboundSchema = ArticleTypeTypeName$inboundSchema;
  /** @deprecated use `ArticleTypeTypeName$outboundSchema` instead. */
  export const outboundSchema = ArticleTypeTypeName$outboundSchema;
}

/** @internal */
export const ArticleType$inboundSchema: z.ZodType<
  ArticleType,
  z.ZodTypeDef,
  unknown
> = z.object({
  articleCategoryId: z.number().int().optional(),
  typeName: ArticleTypeTypeName$inboundSchema.optional(),
  useStructuredAuthoring: z.boolean().optional(),
  articleTypeId: z.string().optional(),
});

/** @internal */
export type ArticleType$Outbound = {
  articleCategoryId?: number | undefined;
  typeName?: string | undefined;
  useStructuredAuthoring?: boolean | undefined;
  articleTypeId?: string | undefined;
};

/** @internal */
export const ArticleType$outboundSchema: z.ZodType<
  ArticleType$Outbound,
  z.ZodTypeDef,
  ArticleType
> = z.object({
  articleCategoryId: z.number().int().optional(),
  typeName: ArticleTypeTypeName$outboundSchema.optional(),
  useStructuredAuthoring: z.boolean().optional(),
  articleTypeId: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ArticleType$ {
  /** @deprecated use `ArticleType$inboundSchema` instead. */
  export const inboundSchema = ArticleType$inboundSchema;
  /** @deprecated use `ArticleType$outboundSchema` instead. */
  export const outboundSchema = ArticleType$outboundSchema;
  /** @deprecated use `ArticleType$Outbound` instead. */
  export type Outbound = ArticleType$Outbound;
}

export function articleTypeToJSON(articleType: ArticleType): string {
  return JSON.stringify(ArticleType$outboundSchema.parse(articleType));
}

export function articleTypeFromJSON(
  jsonString: string,
): SafeParseResult<ArticleType, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ArticleType$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ArticleType' from JSON`,
  );
}
