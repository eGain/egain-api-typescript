/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  Link,
  Link$inboundSchema,
  Link$Outbound,
  Link$outboundSchema,
} from "./link.js";
import {
  PublishProfile,
  PublishProfile$inboundSchema,
  PublishProfile$Outbound,
  PublishProfile$outboundSchema,
} from "./publishprofile.js";
import {
  SchemasTagCategory,
  SchemasTagCategory$inboundSchema,
  SchemasTagCategory$Outbound,
  SchemasTagCategory$outboundSchema,
} from "./schemastagcategory.js";

export type EditionWithContentAccessTags = {
  /**
   * An array of tag categories. Note that the total number of tag categories cannot exceed 20.
   */
  tagCategory?: Array<SchemasTagCategory> | undefined;
};

/**
 * This schema contains information about article edition.
 */
export type EditionWithContent = {
  /**
   * ID of the edition.
   */
  id?: string | undefined;
  /**
   * Name of the edition.
   */
  name?: string | undefined;
  /**
   * This schema contains information about Profile.
   */
  publishProfile?: PublishProfile | undefined;
  /**
   * The raw content of the article. The maximum allowed Article content size is 5 MB.
   */
  content?: string | undefined;
  /**
   * Plain text version of the content. The maximum allowed Article content size is 5 MB.
   */
  contentText?: string | undefined;
  accessTags?: EditionWithContentAccessTags | undefined;
  /**
   * Defines the relationship between this resource and another object.
   */
  link?: Link | undefined;
};

/** @internal */
export const EditionWithContentAccessTags$inboundSchema: z.ZodType<
  EditionWithContentAccessTags,
  z.ZodTypeDef,
  unknown
> = z.object({
  tagCategory: z.array(SchemasTagCategory$inboundSchema).optional(),
});

/** @internal */
export type EditionWithContentAccessTags$Outbound = {
  tagCategory?: Array<SchemasTagCategory$Outbound> | undefined;
};

/** @internal */
export const EditionWithContentAccessTags$outboundSchema: z.ZodType<
  EditionWithContentAccessTags$Outbound,
  z.ZodTypeDef,
  EditionWithContentAccessTags
> = z.object({
  tagCategory: z.array(SchemasTagCategory$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EditionWithContentAccessTags$ {
  /** @deprecated use `EditionWithContentAccessTags$inboundSchema` instead. */
  export const inboundSchema = EditionWithContentAccessTags$inboundSchema;
  /** @deprecated use `EditionWithContentAccessTags$outboundSchema` instead. */
  export const outboundSchema = EditionWithContentAccessTags$outboundSchema;
  /** @deprecated use `EditionWithContentAccessTags$Outbound` instead. */
  export type Outbound = EditionWithContentAccessTags$Outbound;
}

export function editionWithContentAccessTagsToJSON(
  editionWithContentAccessTags: EditionWithContentAccessTags,
): string {
  return JSON.stringify(
    EditionWithContentAccessTags$outboundSchema.parse(
      editionWithContentAccessTags,
    ),
  );
}

export function editionWithContentAccessTagsFromJSON(
  jsonString: string,
): SafeParseResult<EditionWithContentAccessTags, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EditionWithContentAccessTags$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EditionWithContentAccessTags' from JSON`,
  );
}

/** @internal */
export const EditionWithContent$inboundSchema: z.ZodType<
  EditionWithContent,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  name: z.string().optional(),
  publishProfile: PublishProfile$inboundSchema.optional(),
  content: z.string().optional(),
  contentText: z.string().optional(),
  accessTags: z.lazy(() => EditionWithContentAccessTags$inboundSchema)
    .optional(),
  link: Link$inboundSchema.optional(),
});

/** @internal */
export type EditionWithContent$Outbound = {
  id?: string | undefined;
  name?: string | undefined;
  publishProfile?: PublishProfile$Outbound | undefined;
  content?: string | undefined;
  contentText?: string | undefined;
  accessTags?: EditionWithContentAccessTags$Outbound | undefined;
  link?: Link$Outbound | undefined;
};

/** @internal */
export const EditionWithContent$outboundSchema: z.ZodType<
  EditionWithContent$Outbound,
  z.ZodTypeDef,
  EditionWithContent
> = z.object({
  id: z.string().optional(),
  name: z.string().optional(),
  publishProfile: PublishProfile$outboundSchema.optional(),
  content: z.string().optional(),
  contentText: z.string().optional(),
  accessTags: z.lazy(() => EditionWithContentAccessTags$outboundSchema)
    .optional(),
  link: Link$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EditionWithContent$ {
  /** @deprecated use `EditionWithContent$inboundSchema` instead. */
  export const inboundSchema = EditionWithContent$inboundSchema;
  /** @deprecated use `EditionWithContent$outboundSchema` instead. */
  export const outboundSchema = EditionWithContent$outboundSchema;
  /** @deprecated use `EditionWithContent$Outbound` instead. */
  export type Outbound = EditionWithContent$Outbound;
}

export function editionWithContentToJSON(
  editionWithContent: EditionWithContent,
): string {
  return JSON.stringify(
    EditionWithContent$outboundSchema.parse(editionWithContent),
  );
}

export function editionWithContentFromJSON(
  jsonString: string,
): SafeParseResult<EditionWithContent, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EditionWithContent$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EditionWithContent' from JSON`,
  );
}
