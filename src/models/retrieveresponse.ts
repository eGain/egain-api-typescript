/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  ReferenceResponse,
  ReferenceResponse$inboundSchema,
  ReferenceResponse$Outbound,
  ReferenceResponse$outboundSchema,
} from "./referenceresponse.js";
import {
  SearchResult,
  SearchResult$inboundSchema,
  SearchResult$Outbound,
  SearchResult$outboundSchema,
} from "./searchresult.js";

/**
 * Specifies that the answer produced was a certified answer.
 */
export const RetrieveResponseAnswerType = {
  Certified: "certified",
} as const;
/**
 * Specifies that the answer produced was a certified answer.
 */
export type RetrieveResponseAnswerType = ClosedEnum<
  typeof RetrieveResponseAnswerType
>;

/**
 * If a certified answer is given. The answer object will be present. <br><br> This will be shown only if certified answers are configured and the certified answer meets the configured threshold.
 */
export type RetrieveResponseAnswer = {
  /**
   * The certified answer.
   */
  answerValue: string;
  /**
   * Source used to produce the certified answer.
   */
  references: Array<ReferenceResponse>;
  /**
   * Specifies that the answer produced was a certified answer.
   */
  answerType: RetrieveResponseAnswerType;
  /**
   * Confidence score (0.0-1.0) reflecting how well the answer matches the query.
   */
  relevanceScore: number;
};

/**
 * The channel where the query originated, e.g., directly from the portal or via a custom integration.
 */
export const RetrieveResponseType = {
  Portal: "portal",
  Custom: "custom",
} as const;
/**
 * The channel where the query originated, e.g., directly from the portal or via a custom integration.
 */
export type RetrieveResponseType = ClosedEnum<typeof RetrieveResponseType>;

export type RetrieveResponseChannel = {
  /**
   * The channel where the query originated, e.g., directly from the portal or via a custom integration.
   */
  type: RetrieveResponseType;
  /**
   * The channel name.
   */
  name?: string | undefined;
};

export type RetrieveResponse = {
  /**
   * If a certified answer is given. The answer object will be present. <br><br> This will be shown only if certified answers are configured and the certified answer meets the configured threshold.
   */
  answer?: RetrieveResponseAnswer | undefined;
  /**
   * Top search results with relevance scores and metadata.
   */
  searchResults: Array<SearchResult>;
  channel?: RetrieveResponseChannel | undefined;
  /**
   * Unique ID for this specific API call or event.
   */
  eventId?: string | undefined;
  /**
   * ID that ties multiple API calls to the same user session. Will be used as part of to tie events back to a session.
   */
  sessionId: string;
};

/** @internal */
export const RetrieveResponseAnswerType$inboundSchema: z.ZodNativeEnum<
  typeof RetrieveResponseAnswerType
> = z.nativeEnum(RetrieveResponseAnswerType);

/** @internal */
export const RetrieveResponseAnswerType$outboundSchema: z.ZodNativeEnum<
  typeof RetrieveResponseAnswerType
> = RetrieveResponseAnswerType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RetrieveResponseAnswerType$ {
  /** @deprecated use `RetrieveResponseAnswerType$inboundSchema` instead. */
  export const inboundSchema = RetrieveResponseAnswerType$inboundSchema;
  /** @deprecated use `RetrieveResponseAnswerType$outboundSchema` instead. */
  export const outboundSchema = RetrieveResponseAnswerType$outboundSchema;
}

/** @internal */
export const RetrieveResponseAnswer$inboundSchema: z.ZodType<
  RetrieveResponseAnswer,
  z.ZodTypeDef,
  unknown
> = z.object({
  answerValue: z.string(),
  references: z.array(ReferenceResponse$inboundSchema),
  answerType: RetrieveResponseAnswerType$inboundSchema,
  relevanceScore: z.number(),
});

/** @internal */
export type RetrieveResponseAnswer$Outbound = {
  answerValue: string;
  references: Array<ReferenceResponse$Outbound>;
  answerType: string;
  relevanceScore: number;
};

/** @internal */
export const RetrieveResponseAnswer$outboundSchema: z.ZodType<
  RetrieveResponseAnswer$Outbound,
  z.ZodTypeDef,
  RetrieveResponseAnswer
> = z.object({
  answerValue: z.string(),
  references: z.array(ReferenceResponse$outboundSchema),
  answerType: RetrieveResponseAnswerType$outboundSchema,
  relevanceScore: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RetrieveResponseAnswer$ {
  /** @deprecated use `RetrieveResponseAnswer$inboundSchema` instead. */
  export const inboundSchema = RetrieveResponseAnswer$inboundSchema;
  /** @deprecated use `RetrieveResponseAnswer$outboundSchema` instead. */
  export const outboundSchema = RetrieveResponseAnswer$outboundSchema;
  /** @deprecated use `RetrieveResponseAnswer$Outbound` instead. */
  export type Outbound = RetrieveResponseAnswer$Outbound;
}

export function retrieveResponseAnswerToJSON(
  retrieveResponseAnswer: RetrieveResponseAnswer,
): string {
  return JSON.stringify(
    RetrieveResponseAnswer$outboundSchema.parse(retrieveResponseAnswer),
  );
}

export function retrieveResponseAnswerFromJSON(
  jsonString: string,
): SafeParseResult<RetrieveResponseAnswer, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RetrieveResponseAnswer$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RetrieveResponseAnswer' from JSON`,
  );
}

/** @internal */
export const RetrieveResponseType$inboundSchema: z.ZodNativeEnum<
  typeof RetrieveResponseType
> = z.nativeEnum(RetrieveResponseType);

/** @internal */
export const RetrieveResponseType$outboundSchema: z.ZodNativeEnum<
  typeof RetrieveResponseType
> = RetrieveResponseType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RetrieveResponseType$ {
  /** @deprecated use `RetrieveResponseType$inboundSchema` instead. */
  export const inboundSchema = RetrieveResponseType$inboundSchema;
  /** @deprecated use `RetrieveResponseType$outboundSchema` instead. */
  export const outboundSchema = RetrieveResponseType$outboundSchema;
}

/** @internal */
export const RetrieveResponseChannel$inboundSchema: z.ZodType<
  RetrieveResponseChannel,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: RetrieveResponseType$inboundSchema,
  name: z.string().optional(),
});

/** @internal */
export type RetrieveResponseChannel$Outbound = {
  type: string;
  name?: string | undefined;
};

/** @internal */
export const RetrieveResponseChannel$outboundSchema: z.ZodType<
  RetrieveResponseChannel$Outbound,
  z.ZodTypeDef,
  RetrieveResponseChannel
> = z.object({
  type: RetrieveResponseType$outboundSchema,
  name: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RetrieveResponseChannel$ {
  /** @deprecated use `RetrieveResponseChannel$inboundSchema` instead. */
  export const inboundSchema = RetrieveResponseChannel$inboundSchema;
  /** @deprecated use `RetrieveResponseChannel$outboundSchema` instead. */
  export const outboundSchema = RetrieveResponseChannel$outboundSchema;
  /** @deprecated use `RetrieveResponseChannel$Outbound` instead. */
  export type Outbound = RetrieveResponseChannel$Outbound;
}

export function retrieveResponseChannelToJSON(
  retrieveResponseChannel: RetrieveResponseChannel,
): string {
  return JSON.stringify(
    RetrieveResponseChannel$outboundSchema.parse(retrieveResponseChannel),
  );
}

export function retrieveResponseChannelFromJSON(
  jsonString: string,
): SafeParseResult<RetrieveResponseChannel, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RetrieveResponseChannel$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RetrieveResponseChannel' from JSON`,
  );
}

/** @internal */
export const RetrieveResponse$inboundSchema: z.ZodType<
  RetrieveResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  answer: z.lazy(() => RetrieveResponseAnswer$inboundSchema).optional(),
  searchResults: z.array(SearchResult$inboundSchema),
  channel: z.lazy(() => RetrieveResponseChannel$inboundSchema).optional(),
  eventId: z.string().optional(),
  sessionId: z.string(),
});

/** @internal */
export type RetrieveResponse$Outbound = {
  answer?: RetrieveResponseAnswer$Outbound | undefined;
  searchResults: Array<SearchResult$Outbound>;
  channel?: RetrieveResponseChannel$Outbound | undefined;
  eventId?: string | undefined;
  sessionId: string;
};

/** @internal */
export const RetrieveResponse$outboundSchema: z.ZodType<
  RetrieveResponse$Outbound,
  z.ZodTypeDef,
  RetrieveResponse
> = z.object({
  answer: z.lazy(() => RetrieveResponseAnswer$outboundSchema).optional(),
  searchResults: z.array(SearchResult$outboundSchema),
  channel: z.lazy(() => RetrieveResponseChannel$outboundSchema).optional(),
  eventId: z.string().optional(),
  sessionId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RetrieveResponse$ {
  /** @deprecated use `RetrieveResponse$inboundSchema` instead. */
  export const inboundSchema = RetrieveResponse$inboundSchema;
  /** @deprecated use `RetrieveResponse$outboundSchema` instead. */
  export const outboundSchema = RetrieveResponse$outboundSchema;
  /** @deprecated use `RetrieveResponse$Outbound` instead. */
  export type Outbound = RetrieveResponse$Outbound;
}

export function retrieveResponseToJSON(
  retrieveResponse: RetrieveResponse,
): string {
  return JSON.stringify(
    RetrieveResponse$outboundSchema.parse(retrieveResponse),
  );
}

export function retrieveResponseFromJSON(
  jsonString: string,
): SafeParseResult<RetrieveResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RetrieveResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RetrieveResponse' from JSON`,
  );
}
