/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type Department = {
  /**
   * ID of department
   */
  id?: string | undefined;
  /**
   * Name of Department
   */
  name?: string | undefined;
};

/** @internal */
export const Department$inboundSchema: z.ZodType<
  Department,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  name: z.string().optional(),
});

/** @internal */
export type Department$Outbound = {
  id?: string | undefined;
  name?: string | undefined;
};

/** @internal */
export const Department$outboundSchema: z.ZodType<
  Department$Outbound,
  z.ZodTypeDef,
  Department
> = z.object({
  id: z.string().optional(),
  name: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Department$ {
  /** @deprecated use `Department$inboundSchema` instead. */
  export const inboundSchema = Department$inboundSchema;
  /** @deprecated use `Department$outboundSchema` instead. */
  export const outboundSchema = Department$outboundSchema;
  /** @deprecated use `Department$Outbound` instead. */
  export type Outbound = Department$Outbound;
}

export function departmentToJSON(department: Department): string {
  return JSON.stringify(Department$outboundSchema.parse(department));
}

export function departmentFromJSON(
  jsonString: string,
): SafeParseResult<Department, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Department$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Department' from JSON`,
  );
}
