/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import {
  AdditionalSnippets,
  AdditionalSnippets$inboundSchema,
  AdditionalSnippets$Outbound,
  AdditionalSnippets$outboundSchema,
} from "./additionalsnippets.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  SchemasTags,
  SchemasTags$inboundSchema,
  SchemasTags$Outbound,
  SchemasTags$outboundSchema,
} from "./schemastags.js";
import {
  TopicBreadcrumb,
  TopicBreadcrumb$inboundSchema,
  TopicBreadcrumb$Outbound,
  TopicBreadcrumb$outboundSchema,
} from "./topicbreadcrumb.js";

/**
 * Format of the source document (HTML, Doc, or PDF).
 */
export const ArticleAISearchResultDocType = {
  Html: "HTML",
  Doc: "Doc",
  Pdf: "Pdf",
} as const;
/**
 * Format of the source document (HTML, Doc, or PDF).
 */
export type ArticleAISearchResultDocType = ClosedEnum<
  typeof ArticleAISearchResultDocType
>;

/**
 * The source type.
 */
export const ArticleAISearchResultSource = {
  EGainArticle: "eGain Article",
  EGainAttachment: "eGain Attachment",
} as const;
/**
 * The source type.
 */
export type ArticleAISearchResultSource = ClosedEnum<
  typeof ArticleAISearchResultSource
>;

/**
 * The custom attribute's type.
 */
export const ArticleAISearchResultType = {
  String: "STRING",
  Integer: "INTEGER",
  Boolean: "BOOLEAN",
  Datetime: "DATETIME",
} as const;
/**
 * The custom attribute's type.
 */
export type ArticleAISearchResultType = ClosedEnum<
  typeof ArticleAISearchResultType
>;

export type ArticleAISearchResultCustomAttribute = {
  /**
   * The custom attribute's name.
   */
  name?: string | undefined;
  /**
   * The custom attribute's values.
   */
  value?: Array<string> | undefined;
  /**
   * The custom attribute's type.
   */
  type?: ArticleAISearchResultType | undefined;
};

/**
 * Article content used for highlighting a keyword search result
 */
export type OpensearchHighlightingRaw = {
  articleContent?: Array<string> | undefined;
};

/**
 * The type of the Article and its attributes.
 */
export type ArticleTypeAttributes = {
  /**
   * Indicates the article category name.
   */
  typeName?: string | undefined;
  /**
   * The ID of the Article Type.
   */
  articleTypeId?: any | undefined;
};

/**
 * Defines the relationship between this resource and another object.
 */
export type ArticleAISearchResultLink = {
  /**
   * Defines the relationship between a linked resource and the current object. <br><br> For example: self, prev, next or an object name such as 'user', 'folder' etc.
   */
  rel?: string | undefined;
  /**
   * The URL that specifies the link's destination.
   */
  href?: string | undefined;
};

/**
 * Represents a single document or snippet returned by search, along with its metadata and relevance score.
 */
export type ArticleAISearchResult = {
  /**
   * The ID of the Article. <br><br> An Article ID is composed of a 2-4 letter prefix, followed by a dash and 4-15 digits.
   */
  id: string;
  /**
   * The name of the Article or source content.
   */
  name: string;
  /**
   * Format of the source document (HTML, Doc, or PDF).
   */
  docType: ArticleAISearchResultDocType;
  /**
   * Name of the attachment, if an attachment was used as the source content.
   */
  docName?: string | undefined;
  /**
   * The source type.
   */
  source: ArticleAISearchResultSource;
  /**
   * Custom attributes assigned to an article
   */
  customAttributes?: Array<ArticleAISearchResultCustomAttribute> | undefined;
  /**
   * A snippet of the article content.
   */
  snippet: string;
  /**
   * A keyword search snippet of article content.
   */
  keywordSnippet?: string | undefined;
  /**
   * An array of snippets belonging to the same article.
   */
  additionalSnippets?: Array<AdditionalSnippets> | undefined;
  /**
   * Number of additional snippets.
   */
  additionalSnippetCount?: number | undefined;
  /**
   * Article content used for highlighting a keyword search result
   */
  opensearchHighlightingRaw?: OpensearchHighlightingRaw | undefined;
  /**
   * Contextual Summary generated as part of metadata for embedding.
   */
  contextualSummary?: string | undefined;
  /**
   * A description of the Article. The maximum allowed Article description size is 1 KB.
   */
  description?: string | undefined;
  /**
   * A brief summary of the Article, provided as metadata. 1 KB max size limit.
   */
  summary?: string | undefined;
  /**
   * The date on which the Article was last modified.
   */
  lastModifiedDate?: string | undefined;
  /**
   * The header path of the snippet retrieved.
   */
  headerPath?: string | undefined;
  /**
   * A list of topics from the root topic to this Article. There may be multiple paths.
   */
  topicBreadcrumb: Array<TopicBreadcrumb>;
  /**
   * An array of tag categories. Note that the total number of tag categories cannot exceed 20.
   */
  tagCategories?: Array<SchemasTags> | undefined;
  keywords?: string | undefined;
  /**
   * The type of the Article and its attributes.
   */
  articleTypeAttributes?: ArticleTypeAttributes | undefined;
  /**
   * Generated confidence score (0.0-1.0) for the snippet's relevance to the query.
   */
  relevanceScore: number;
  /**
   * Defines the relationship between this resource and another object.
   */
  link?: ArticleAISearchResultLink | undefined;
};

/** @internal */
export const ArticleAISearchResultDocType$inboundSchema: z.ZodNativeEnum<
  typeof ArticleAISearchResultDocType
> = z.nativeEnum(ArticleAISearchResultDocType);

/** @internal */
export const ArticleAISearchResultDocType$outboundSchema: z.ZodNativeEnum<
  typeof ArticleAISearchResultDocType
> = ArticleAISearchResultDocType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ArticleAISearchResultDocType$ {
  /** @deprecated use `ArticleAISearchResultDocType$inboundSchema` instead. */
  export const inboundSchema = ArticleAISearchResultDocType$inboundSchema;
  /** @deprecated use `ArticleAISearchResultDocType$outboundSchema` instead. */
  export const outboundSchema = ArticleAISearchResultDocType$outboundSchema;
}

/** @internal */
export const ArticleAISearchResultSource$inboundSchema: z.ZodNativeEnum<
  typeof ArticleAISearchResultSource
> = z.nativeEnum(ArticleAISearchResultSource);

/** @internal */
export const ArticleAISearchResultSource$outboundSchema: z.ZodNativeEnum<
  typeof ArticleAISearchResultSource
> = ArticleAISearchResultSource$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ArticleAISearchResultSource$ {
  /** @deprecated use `ArticleAISearchResultSource$inboundSchema` instead. */
  export const inboundSchema = ArticleAISearchResultSource$inboundSchema;
  /** @deprecated use `ArticleAISearchResultSource$outboundSchema` instead. */
  export const outboundSchema = ArticleAISearchResultSource$outboundSchema;
}

/** @internal */
export const ArticleAISearchResultType$inboundSchema: z.ZodNativeEnum<
  typeof ArticleAISearchResultType
> = z.nativeEnum(ArticleAISearchResultType);

/** @internal */
export const ArticleAISearchResultType$outboundSchema: z.ZodNativeEnum<
  typeof ArticleAISearchResultType
> = ArticleAISearchResultType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ArticleAISearchResultType$ {
  /** @deprecated use `ArticleAISearchResultType$inboundSchema` instead. */
  export const inboundSchema = ArticleAISearchResultType$inboundSchema;
  /** @deprecated use `ArticleAISearchResultType$outboundSchema` instead. */
  export const outboundSchema = ArticleAISearchResultType$outboundSchema;
}

/** @internal */
export const ArticleAISearchResultCustomAttribute$inboundSchema: z.ZodType<
  ArticleAISearchResultCustomAttribute,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string().optional(),
  value: z.array(z.string()).optional(),
  type: ArticleAISearchResultType$inboundSchema.optional(),
});

/** @internal */
export type ArticleAISearchResultCustomAttribute$Outbound = {
  name?: string | undefined;
  value?: Array<string> | undefined;
  type?: string | undefined;
};

/** @internal */
export const ArticleAISearchResultCustomAttribute$outboundSchema: z.ZodType<
  ArticleAISearchResultCustomAttribute$Outbound,
  z.ZodTypeDef,
  ArticleAISearchResultCustomAttribute
> = z.object({
  name: z.string().optional(),
  value: z.array(z.string()).optional(),
  type: ArticleAISearchResultType$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ArticleAISearchResultCustomAttribute$ {
  /** @deprecated use `ArticleAISearchResultCustomAttribute$inboundSchema` instead. */
  export const inboundSchema =
    ArticleAISearchResultCustomAttribute$inboundSchema;
  /** @deprecated use `ArticleAISearchResultCustomAttribute$outboundSchema` instead. */
  export const outboundSchema =
    ArticleAISearchResultCustomAttribute$outboundSchema;
  /** @deprecated use `ArticleAISearchResultCustomAttribute$Outbound` instead. */
  export type Outbound = ArticleAISearchResultCustomAttribute$Outbound;
}

export function articleAISearchResultCustomAttributeToJSON(
  articleAISearchResultCustomAttribute: ArticleAISearchResultCustomAttribute,
): string {
  return JSON.stringify(
    ArticleAISearchResultCustomAttribute$outboundSchema.parse(
      articleAISearchResultCustomAttribute,
    ),
  );
}

export function articleAISearchResultCustomAttributeFromJSON(
  jsonString: string,
): SafeParseResult<ArticleAISearchResultCustomAttribute, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ArticleAISearchResultCustomAttribute$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ArticleAISearchResultCustomAttribute' from JSON`,
  );
}

/** @internal */
export const OpensearchHighlightingRaw$inboundSchema: z.ZodType<
  OpensearchHighlightingRaw,
  z.ZodTypeDef,
  unknown
> = z.object({
  articleContent: z.array(z.string()).optional(),
});

/** @internal */
export type OpensearchHighlightingRaw$Outbound = {
  articleContent?: Array<string> | undefined;
};

/** @internal */
export const OpensearchHighlightingRaw$outboundSchema: z.ZodType<
  OpensearchHighlightingRaw$Outbound,
  z.ZodTypeDef,
  OpensearchHighlightingRaw
> = z.object({
  articleContent: z.array(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpensearchHighlightingRaw$ {
  /** @deprecated use `OpensearchHighlightingRaw$inboundSchema` instead. */
  export const inboundSchema = OpensearchHighlightingRaw$inboundSchema;
  /** @deprecated use `OpensearchHighlightingRaw$outboundSchema` instead. */
  export const outboundSchema = OpensearchHighlightingRaw$outboundSchema;
  /** @deprecated use `OpensearchHighlightingRaw$Outbound` instead. */
  export type Outbound = OpensearchHighlightingRaw$Outbound;
}

export function opensearchHighlightingRawToJSON(
  opensearchHighlightingRaw: OpensearchHighlightingRaw,
): string {
  return JSON.stringify(
    OpensearchHighlightingRaw$outboundSchema.parse(opensearchHighlightingRaw),
  );
}

export function opensearchHighlightingRawFromJSON(
  jsonString: string,
): SafeParseResult<OpensearchHighlightingRaw, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OpensearchHighlightingRaw$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OpensearchHighlightingRaw' from JSON`,
  );
}

/** @internal */
export const ArticleTypeAttributes$inboundSchema: z.ZodType<
  ArticleTypeAttributes,
  z.ZodTypeDef,
  unknown
> = z.object({
  typeName: z.string().optional(),
  articleTypeId: z.any().optional(),
});

/** @internal */
export type ArticleTypeAttributes$Outbound = {
  typeName?: string | undefined;
  articleTypeId?: any | undefined;
};

/** @internal */
export const ArticleTypeAttributes$outboundSchema: z.ZodType<
  ArticleTypeAttributes$Outbound,
  z.ZodTypeDef,
  ArticleTypeAttributes
> = z.object({
  typeName: z.string().optional(),
  articleTypeId: z.any().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ArticleTypeAttributes$ {
  /** @deprecated use `ArticleTypeAttributes$inboundSchema` instead. */
  export const inboundSchema = ArticleTypeAttributes$inboundSchema;
  /** @deprecated use `ArticleTypeAttributes$outboundSchema` instead. */
  export const outboundSchema = ArticleTypeAttributes$outboundSchema;
  /** @deprecated use `ArticleTypeAttributes$Outbound` instead. */
  export type Outbound = ArticleTypeAttributes$Outbound;
}

export function articleTypeAttributesToJSON(
  articleTypeAttributes: ArticleTypeAttributes,
): string {
  return JSON.stringify(
    ArticleTypeAttributes$outboundSchema.parse(articleTypeAttributes),
  );
}

export function articleTypeAttributesFromJSON(
  jsonString: string,
): SafeParseResult<ArticleTypeAttributes, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ArticleTypeAttributes$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ArticleTypeAttributes' from JSON`,
  );
}

/** @internal */
export const ArticleAISearchResultLink$inboundSchema: z.ZodType<
  ArticleAISearchResultLink,
  z.ZodTypeDef,
  unknown
> = z.object({
  rel: z.string().optional(),
  href: z.string().optional(),
});

/** @internal */
export type ArticleAISearchResultLink$Outbound = {
  rel?: string | undefined;
  href?: string | undefined;
};

/** @internal */
export const ArticleAISearchResultLink$outboundSchema: z.ZodType<
  ArticleAISearchResultLink$Outbound,
  z.ZodTypeDef,
  ArticleAISearchResultLink
> = z.object({
  rel: z.string().optional(),
  href: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ArticleAISearchResultLink$ {
  /** @deprecated use `ArticleAISearchResultLink$inboundSchema` instead. */
  export const inboundSchema = ArticleAISearchResultLink$inboundSchema;
  /** @deprecated use `ArticleAISearchResultLink$outboundSchema` instead. */
  export const outboundSchema = ArticleAISearchResultLink$outboundSchema;
  /** @deprecated use `ArticleAISearchResultLink$Outbound` instead. */
  export type Outbound = ArticleAISearchResultLink$Outbound;
}

export function articleAISearchResultLinkToJSON(
  articleAISearchResultLink: ArticleAISearchResultLink,
): string {
  return JSON.stringify(
    ArticleAISearchResultLink$outboundSchema.parse(articleAISearchResultLink),
  );
}

export function articleAISearchResultLinkFromJSON(
  jsonString: string,
): SafeParseResult<ArticleAISearchResultLink, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ArticleAISearchResultLink$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ArticleAISearchResultLink' from JSON`,
  );
}

/** @internal */
export const ArticleAISearchResult$inboundSchema: z.ZodType<
  ArticleAISearchResult,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  name: z.string(),
  docType: ArticleAISearchResultDocType$inboundSchema,
  docName: z.string().optional(),
  source: ArticleAISearchResultSource$inboundSchema,
  customAttributes: z.array(
    z.lazy(() => ArticleAISearchResultCustomAttribute$inboundSchema),
  ).optional(),
  snippet: z.string(),
  keywordSnippet: z.string().optional(),
  additionalSnippets: z.array(AdditionalSnippets$inboundSchema).optional(),
  additionalSnippetCount: z.number().int().optional(),
  opensearchHighlightingRaw: z.lazy(() =>
    OpensearchHighlightingRaw$inboundSchema
  ).optional(),
  contextualSummary: z.string().optional(),
  description: z.string().optional(),
  summary: z.string().optional(),
  lastModifiedDate: z.string().optional(),
  headerPath: z.string().optional(),
  topicBreadcrumb: z.array(TopicBreadcrumb$inboundSchema),
  tagCategories: z.array(SchemasTags$inboundSchema).optional(),
  keywords: z.string().optional(),
  articleTypeAttributes: z.lazy(() => ArticleTypeAttributes$inboundSchema)
    .optional(),
  relevanceScore: z.number(),
  link: z.lazy(() => ArticleAISearchResultLink$inboundSchema).optional(),
});

/** @internal */
export type ArticleAISearchResult$Outbound = {
  id: string;
  name: string;
  docType: string;
  docName?: string | undefined;
  source: string;
  customAttributes?:
    | Array<ArticleAISearchResultCustomAttribute$Outbound>
    | undefined;
  snippet: string;
  keywordSnippet?: string | undefined;
  additionalSnippets?: Array<AdditionalSnippets$Outbound> | undefined;
  additionalSnippetCount?: number | undefined;
  opensearchHighlightingRaw?: OpensearchHighlightingRaw$Outbound | undefined;
  contextualSummary?: string | undefined;
  description?: string | undefined;
  summary?: string | undefined;
  lastModifiedDate?: string | undefined;
  headerPath?: string | undefined;
  topicBreadcrumb: Array<TopicBreadcrumb$Outbound>;
  tagCategories?: Array<SchemasTags$Outbound> | undefined;
  keywords?: string | undefined;
  articleTypeAttributes?: ArticleTypeAttributes$Outbound | undefined;
  relevanceScore: number;
  link?: ArticleAISearchResultLink$Outbound | undefined;
};

/** @internal */
export const ArticleAISearchResult$outboundSchema: z.ZodType<
  ArticleAISearchResult$Outbound,
  z.ZodTypeDef,
  ArticleAISearchResult
> = z.object({
  id: z.string(),
  name: z.string(),
  docType: ArticleAISearchResultDocType$outboundSchema,
  docName: z.string().optional(),
  source: ArticleAISearchResultSource$outboundSchema,
  customAttributes: z.array(
    z.lazy(() => ArticleAISearchResultCustomAttribute$outboundSchema),
  ).optional(),
  snippet: z.string(),
  keywordSnippet: z.string().optional(),
  additionalSnippets: z.array(AdditionalSnippets$outboundSchema).optional(),
  additionalSnippetCount: z.number().int().optional(),
  opensearchHighlightingRaw: z.lazy(() =>
    OpensearchHighlightingRaw$outboundSchema
  ).optional(),
  contextualSummary: z.string().optional(),
  description: z.string().optional(),
  summary: z.string().optional(),
  lastModifiedDate: z.string().optional(),
  headerPath: z.string().optional(),
  topicBreadcrumb: z.array(TopicBreadcrumb$outboundSchema),
  tagCategories: z.array(SchemasTags$outboundSchema).optional(),
  keywords: z.string().optional(),
  articleTypeAttributes: z.lazy(() => ArticleTypeAttributes$outboundSchema)
    .optional(),
  relevanceScore: z.number(),
  link: z.lazy(() => ArticleAISearchResultLink$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ArticleAISearchResult$ {
  /** @deprecated use `ArticleAISearchResult$inboundSchema` instead. */
  export const inboundSchema = ArticleAISearchResult$inboundSchema;
  /** @deprecated use `ArticleAISearchResult$outboundSchema` instead. */
  export const outboundSchema = ArticleAISearchResult$outboundSchema;
  /** @deprecated use `ArticleAISearchResult$Outbound` instead. */
  export type Outbound = ArticleAISearchResult$Outbound;
}

export function articleAISearchResultToJSON(
  articleAISearchResult: ArticleAISearchResult,
): string {
  return JSON.stringify(
    ArticleAISearchResult$outboundSchema.parse(articleAISearchResult),
  );
}

export function articleAISearchResultFromJSON(
  jsonString: string,
): SafeParseResult<ArticleAISearchResult, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ArticleAISearchResult$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ArticleAISearchResult' from JSON`,
  );
}
