/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type SchemasTags = {
  /**
   * Tag Category ID
   */
  id?: string | undefined;
  tags?: Array<string> | undefined;
};

/** @internal */
export const SchemasTags$inboundSchema: z.ZodType<
  SchemasTags,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  tags: z.array(z.string()).optional(),
});

/** @internal */
export type SchemasTags$Outbound = {
  id?: string | undefined;
  tags?: Array<string> | undefined;
};

/** @internal */
export const SchemasTags$outboundSchema: z.ZodType<
  SchemasTags$Outbound,
  z.ZodTypeDef,
  SchemasTags
> = z.object({
  id: z.string().optional(),
  tags: z.array(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SchemasTags$ {
  /** @deprecated use `SchemasTags$inboundSchema` instead. */
  export const inboundSchema = SchemasTags$inboundSchema;
  /** @deprecated use `SchemasTags$outboundSchema` instead. */
  export const outboundSchema = SchemasTags$outboundSchema;
  /** @deprecated use `SchemasTags$Outbound` instead. */
  export type Outbound = SchemasTags$Outbound;
}

export function schemasTagsToJSON(schemasTags: SchemasTags): string {
  return JSON.stringify(SchemasTags$outboundSchema.parse(schemasTags));
}

export function schemasTagsFromJSON(
  jsonString: string,
): SafeParseResult<SchemasTags, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SchemasTags$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SchemasTags' from JSON`,
  );
}
