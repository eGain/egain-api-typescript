/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  TagGroups,
  TagGroups$inboundSchema,
  TagGroups$Outbound,
  TagGroups$outboundSchema,
} from "./taggroups.js";
import {
  Tags,
  Tags$inboundSchema,
  Tags$Outbound,
  Tags$outboundSchema,
} from "./tags.js";

/**
 * A tag category is a grouping of tags and tag groups.
 */
export type TagCategory = {
  /**
   * The name of the tag category.
   */
  name?: string | undefined;
  /**
   * The ID of the tag category. A tag category ID is composed of a 4-letter prefix, followed by a dash and 4-15 digits.
   */
  id?: string | undefined;
  tags?: Tags | undefined;
  tagGroups?: TagGroups | undefined;
};

/** @internal */
export const TagCategory$inboundSchema: z.ZodType<
  TagCategory,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string().optional(),
  id: z.string().optional(),
  tags: Tags$inboundSchema.optional(),
  tagGroups: TagGroups$inboundSchema.optional(),
});

/** @internal */
export type TagCategory$Outbound = {
  name?: string | undefined;
  id?: string | undefined;
  tags?: Tags$Outbound | undefined;
  tagGroups?: TagGroups$Outbound | undefined;
};

/** @internal */
export const TagCategory$outboundSchema: z.ZodType<
  TagCategory$Outbound,
  z.ZodTypeDef,
  TagCategory
> = z.object({
  name: z.string().optional(),
  id: z.string().optional(),
  tags: Tags$outboundSchema.optional(),
  tagGroups: TagGroups$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TagCategory$ {
  /** @deprecated use `TagCategory$inboundSchema` instead. */
  export const inboundSchema = TagCategory$inboundSchema;
  /** @deprecated use `TagCategory$outboundSchema` instead. */
  export const outboundSchema = TagCategory$outboundSchema;
  /** @deprecated use `TagCategory$Outbound` instead. */
  export type Outbound = TagCategory$Outbound;
}

export function tagCategoryToJSON(tagCategory: TagCategory): string {
  return JSON.stringify(TagCategory$outboundSchema.parse(tagCategory));
}

export function tagCategoryFromJSON(
  jsonString: string,
): SafeParseResult<TagCategory, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TagCategory$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TagCategory' from JSON`,
  );
}
