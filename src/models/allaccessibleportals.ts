/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import {
  AccessiblePortal,
  AccessiblePortal$inboundSchema,
  AccessiblePortal$Outbound,
  AccessiblePortal$outboundSchema,
} from "./accessibleportal.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  PaginationInfo,
  PaginationInfo$inboundSchema,
  PaginationInfo$Outbound,
  PaginationInfo$outboundSchema,
} from "./paginationinfo.js";

/**
 * Success
 */
export type AllAccessiblePortals = {
  /**
   * portals
   */
  portal?: Array<AccessiblePortal> | undefined;
  paginationInfo?: PaginationInfo | undefined;
};

/** @internal */
export const AllAccessiblePortals$inboundSchema: z.ZodType<
  AllAccessiblePortals,
  z.ZodTypeDef,
  unknown
> = z.object({
  portal: z.array(AccessiblePortal$inboundSchema).optional(),
  paginationInfo: PaginationInfo$inboundSchema.optional(),
});

/** @internal */
export type AllAccessiblePortals$Outbound = {
  portal?: Array<AccessiblePortal$Outbound> | undefined;
  paginationInfo?: PaginationInfo$Outbound | undefined;
};

/** @internal */
export const AllAccessiblePortals$outboundSchema: z.ZodType<
  AllAccessiblePortals$Outbound,
  z.ZodTypeDef,
  AllAccessiblePortals
> = z.object({
  portal: z.array(AccessiblePortal$outboundSchema).optional(),
  paginationInfo: PaginationInfo$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AllAccessiblePortals$ {
  /** @deprecated use `AllAccessiblePortals$inboundSchema` instead. */
  export const inboundSchema = AllAccessiblePortals$inboundSchema;
  /** @deprecated use `AllAccessiblePortals$outboundSchema` instead. */
  export const outboundSchema = AllAccessiblePortals$outboundSchema;
  /** @deprecated use `AllAccessiblePortals$Outbound` instead. */
  export type Outbound = AllAccessiblePortals$Outbound;
}

export function allAccessiblePortalsToJSON(
  allAccessiblePortals: AllAccessiblePortals,
): string {
  return JSON.stringify(
    AllAccessiblePortals$outboundSchema.parse(allAccessiblePortals),
  );
}

export function allAccessiblePortalsFromJSON(
  jsonString: string,
): SafeParseResult<AllAccessiblePortals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AllAccessiblePortals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AllAccessiblePortals' from JSON`,
  );
}
