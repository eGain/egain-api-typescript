/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  TopicBreadcrumb,
  TopicBreadcrumb$inboundSchema,
  TopicBreadcrumb$Outbound,
  TopicBreadcrumb$outboundSchema,
} from "./topicbreadcrumb.js";

/**
 * Format of the source document (HTML, Doc, or PDF).
 */
export const SearchResultDocType = {
  Html: "HTML",
  Doc: "Doc",
  Pdf: "Pdf",
} as const;
/**
 * Format of the source document (HTML, Doc, or PDF).
 */
export type SearchResultDocType = ClosedEnum<typeof SearchResultDocType>;

/**
 * The repository or system where the content originated (e.g., eGain Article, eGain Attachment).
 */
export const SearchResultSource = {
  EGainArticle: "eGain Article",
  EGainAttachment: "eGain Attachment",
} as const;
/**
 * The repository or system where the content originated (e.g., eGain Article, eGain Attachment).
 */
export type SearchResultSource = ClosedEnum<typeof SearchResultSource>;

export const SnippetType = {
  Chunks: "chunks",
  ArticleContent: "articleContent",
} as const;
export type SnippetType = ClosedEnum<typeof SnippetType>;

/**
 * Represents a single document or snippet returned by search, along with its metadata and relevance score.
 */
export type SearchResult = {
  /**
   * The ID of the Article. <br><br> An Article ID is composed of a 2-4 letter prefix, followed by a dash and 4-15 digits.
   */
  id: string;
  /**
   * The name of the Article or source content.
   */
  name: string;
  /**
   * Name of the attachment, if an attachment was used as the source content.
   */
  docName?: string | undefined;
  /**
   * Format of the source document (HTML, Doc, or PDF).
   */
  docType: SearchResultDocType;
  /**
   * The repository or system where the content originated (e.g., eGain Article, eGain Attachment).
   */
  source: SearchResultSource;
  /**
   * Retrieved text returned for the query. This may be a **chunk of an article** or the **entire article content** if the content is small enough.
   */
  snippet: string;
  snippetType?: SnippetType | undefined;
  /**
   * Generated confidence score (0.0-1.0) for the snippet's relevance to the query.
   */
  relevanceScore: number;
  topicBreadcrumb?: Array<TopicBreadcrumb> | undefined;
};

/** @internal */
export const SearchResultDocType$inboundSchema: z.ZodNativeEnum<
  typeof SearchResultDocType
> = z.nativeEnum(SearchResultDocType);

/** @internal */
export const SearchResultDocType$outboundSchema: z.ZodNativeEnum<
  typeof SearchResultDocType
> = SearchResultDocType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchResultDocType$ {
  /** @deprecated use `SearchResultDocType$inboundSchema` instead. */
  export const inboundSchema = SearchResultDocType$inboundSchema;
  /** @deprecated use `SearchResultDocType$outboundSchema` instead. */
  export const outboundSchema = SearchResultDocType$outboundSchema;
}

/** @internal */
export const SearchResultSource$inboundSchema: z.ZodNativeEnum<
  typeof SearchResultSource
> = z.nativeEnum(SearchResultSource);

/** @internal */
export const SearchResultSource$outboundSchema: z.ZodNativeEnum<
  typeof SearchResultSource
> = SearchResultSource$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchResultSource$ {
  /** @deprecated use `SearchResultSource$inboundSchema` instead. */
  export const inboundSchema = SearchResultSource$inboundSchema;
  /** @deprecated use `SearchResultSource$outboundSchema` instead. */
  export const outboundSchema = SearchResultSource$outboundSchema;
}

/** @internal */
export const SnippetType$inboundSchema: z.ZodNativeEnum<typeof SnippetType> = z
  .nativeEnum(SnippetType);

/** @internal */
export const SnippetType$outboundSchema: z.ZodNativeEnum<typeof SnippetType> =
  SnippetType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SnippetType$ {
  /** @deprecated use `SnippetType$inboundSchema` instead. */
  export const inboundSchema = SnippetType$inboundSchema;
  /** @deprecated use `SnippetType$outboundSchema` instead. */
  export const outboundSchema = SnippetType$outboundSchema;
}

/** @internal */
export const SearchResult$inboundSchema: z.ZodType<
  SearchResult,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  name: z.string(),
  docName: z.string().optional(),
  docType: SearchResultDocType$inboundSchema,
  source: SearchResultSource$inboundSchema,
  snippet: z.string(),
  snippetType: SnippetType$inboundSchema.optional(),
  relevanceScore: z.number(),
  topicBreadcrumb: z.array(TopicBreadcrumb$inboundSchema).optional(),
});

/** @internal */
export type SearchResult$Outbound = {
  id: string;
  name: string;
  docName?: string | undefined;
  docType: string;
  source: string;
  snippet: string;
  snippetType?: string | undefined;
  relevanceScore: number;
  topicBreadcrumb?: Array<TopicBreadcrumb$Outbound> | undefined;
};

/** @internal */
export const SearchResult$outboundSchema: z.ZodType<
  SearchResult$Outbound,
  z.ZodTypeDef,
  SearchResult
> = z.object({
  id: z.string(),
  name: z.string(),
  docName: z.string().optional(),
  docType: SearchResultDocType$outboundSchema,
  source: SearchResultSource$outboundSchema,
  snippet: z.string(),
  snippetType: SnippetType$outboundSchema.optional(),
  relevanceScore: z.number(),
  topicBreadcrumb: z.array(TopicBreadcrumb$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchResult$ {
  /** @deprecated use `SearchResult$inboundSchema` instead. */
  export const inboundSchema = SearchResult$inboundSchema;
  /** @deprecated use `SearchResult$outboundSchema` instead. */
  export const outboundSchema = SearchResult$outboundSchema;
  /** @deprecated use `SearchResult$Outbound` instead. */
  export type Outbound = SearchResult$Outbound;
}

export function searchResultToJSON(searchResult: SearchResult): string {
  return JSON.stringify(SearchResult$outboundSchema.parse(searchResult));
}

export function searchResultFromJSON(
  jsonString: string,
): SafeParseResult<SearchResult, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SearchResult$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SearchResult' from JSON`,
  );
}
