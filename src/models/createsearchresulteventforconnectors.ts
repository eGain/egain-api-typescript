/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  KbLanguageCode,
  KbLanguageCode$inboundSchema,
  KbLanguageCode$outboundSchema,
} from "./kblanguagecode.js";

export type CreateSearchResultEventForConnectors = {
  /**
   * A short language code. A list of codes can be found below:
   *
   * @remarks
   *
   * |Code|Description
   * |----|-----------
   * |en-US|English (United States)
   * |en-GB|English (United Kingdom)
   * |fr-FR|French (France)
   * |es-ES|Spanish (Spain)
   * |it-IT|Italian (Italy)
   * |de-DE|German (Germany)
   * |nl-NL|Dutch (Netherlands)
   * |pt-BR|Portuguese (Brazil)
   * |pt-PT|Portuguese (Portugal)
   * |da-DK|Danish (Denmark)
   * |sv-SE|Swedish (Sweden)
   * |ru-RU|Russian (Russia)
   * |fr-CA|French (Canada)
   * |zh-CN|Chinese (Simplified, China)
   * |ja-JP|Japanese (Japan)
   * |ko-KR|Korean (South Korea)
   * |nn-NO|Norwegian Nynorsk (Norway)
   */
  languageCode: KbLanguageCode;
  /**
   * The string to use for the search.
   */
  q: string;
  numberOfSearchResults: number;
};

/** @internal */
export const CreateSearchResultEventForConnectors$inboundSchema: z.ZodType<
  CreateSearchResultEventForConnectors,
  z.ZodTypeDef,
  unknown
> = z.object({
  languageCode: KbLanguageCode$inboundSchema,
  q: z.string(),
  numberOfSearchResults: z.number().int(),
});

/** @internal */
export type CreateSearchResultEventForConnectors$Outbound = {
  languageCode: string;
  q: string;
  numberOfSearchResults: number;
};

/** @internal */
export const CreateSearchResultEventForConnectors$outboundSchema: z.ZodType<
  CreateSearchResultEventForConnectors$Outbound,
  z.ZodTypeDef,
  CreateSearchResultEventForConnectors
> = z.object({
  languageCode: KbLanguageCode$outboundSchema,
  q: z.string(),
  numberOfSearchResults: z.number().int(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateSearchResultEventForConnectors$ {
  /** @deprecated use `CreateSearchResultEventForConnectors$inboundSchema` instead. */
  export const inboundSchema =
    CreateSearchResultEventForConnectors$inboundSchema;
  /** @deprecated use `CreateSearchResultEventForConnectors$outboundSchema` instead. */
  export const outboundSchema =
    CreateSearchResultEventForConnectors$outboundSchema;
  /** @deprecated use `CreateSearchResultEventForConnectors$Outbound` instead. */
  export type Outbound = CreateSearchResultEventForConnectors$Outbound;
}

export function createSearchResultEventForConnectorsToJSON(
  createSearchResultEventForConnectors: CreateSearchResultEventForConnectors,
): string {
  return JSON.stringify(
    CreateSearchResultEventForConnectors$outboundSchema.parse(
      createSearchResultEventForConnectors,
    ),
  );
}

export function createSearchResultEventForConnectorsFromJSON(
  jsonString: string,
): SafeParseResult<CreateSearchResultEventForConnectors, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      CreateSearchResultEventForConnectors$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateSearchResultEventForConnectors' from JSON`,
  );
}
