/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  TagGroup,
  TagGroup$inboundSchema,
  TagGroup$Outbound,
  TagGroup$outboundSchema,
} from "./taggroup.js";

export type TagGroups = {
  /**
   * An array of tag groups.
   */
  tagGroup?: Array<TagGroup> | undefined;
};

/** @internal */
export const TagGroups$inboundSchema: z.ZodType<
  TagGroups,
  z.ZodTypeDef,
  unknown
> = z.object({
  tagGroup: z.array(TagGroup$inboundSchema).optional(),
});

/** @internal */
export type TagGroups$Outbound = {
  tagGroup?: Array<TagGroup$Outbound> | undefined;
};

/** @internal */
export const TagGroups$outboundSchema: z.ZodType<
  TagGroups$Outbound,
  z.ZodTypeDef,
  TagGroups
> = z.object({
  tagGroup: z.array(TagGroup$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TagGroups$ {
  /** @deprecated use `TagGroups$inboundSchema` instead. */
  export const inboundSchema = TagGroups$inboundSchema;
  /** @deprecated use `TagGroups$outboundSchema` instead. */
  export const outboundSchema = TagGroups$outboundSchema;
  /** @deprecated use `TagGroups$Outbound` instead. */
  export type Outbound = TagGroups$Outbound;
}

export function tagGroupsToJSON(tagGroups: TagGroups): string {
  return JSON.stringify(TagGroups$outboundSchema.parse(tagGroups));
}

export function tagGroupsFromJSON(
  jsonString: string,
): SafeParseResult<TagGroups, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TagGroups$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TagGroups' from JSON`,
  );
}
