/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type UserProfile = {
  /**
   * The Readable ID of the user profile.<br>
   *
   * @remarks
   */
  id?: string | undefined;
  /**
   * Name given to the user profile
   */
  name?: string | undefined;
  /**
   * Indicates if the profile was the last one used by the current user in the portal.
   */
  isLastUsedInPortal?: boolean | undefined;
};

/** @internal */
export const UserProfile$inboundSchema: z.ZodType<
  UserProfile,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  name: z.string().optional(),
  isLastUsedInPortal: z.boolean().optional(),
});

/** @internal */
export type UserProfile$Outbound = {
  id?: string | undefined;
  name?: string | undefined;
  isLastUsedInPortal?: boolean | undefined;
};

/** @internal */
export const UserProfile$outboundSchema: z.ZodType<
  UserProfile$Outbound,
  z.ZodTypeDef,
  UserProfile
> = z.object({
  id: z.string().optional(),
  name: z.string().optional(),
  isLastUsedInPortal: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UserProfile$ {
  /** @deprecated use `UserProfile$inboundSchema` instead. */
  export const inboundSchema = UserProfile$inboundSchema;
  /** @deprecated use `UserProfile$outboundSchema` instead. */
  export const outboundSchema = UserProfile$outboundSchema;
  /** @deprecated use `UserProfile$Outbound` instead. */
  export type Outbound = UserProfile$Outbound;
}

export function userProfileToJSON(userProfile: UserProfile): string {
  return JSON.stringify(UserProfile$outboundSchema.parse(userProfile));
}

export function userProfileFromJSON(
  jsonString: string,
): SafeParseResult<UserProfile, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UserProfile$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UserProfile' from JSON`,
  );
}
