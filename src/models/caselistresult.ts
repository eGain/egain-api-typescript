/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import {
  CreatedBy,
  CreatedBy$inboundSchema,
  CreatedBy$Outbound,
  CreatedBy$outboundSchema,
} from "./createdby.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  Link,
  Link$inboundSchema,
  Link$Outbound,
  Link$outboundSchema,
} from "./link.js";
import {
  ModifiedBy,
  ModifiedBy$inboundSchema,
  ModifiedBy$Outbound,
  ModifiedBy$outboundSchema,
} from "./modifiedby.js";

export type CaseListResult = {
  /**
   * The numerical ID of the case.
   */
  id?: string | undefined;
  /**
   * short name of the case.
   */
  shortName?: string | undefined;
  /**
   * title of the case
   */
  title?: string | undefined;
  /**
   * The ID of the guided help profile.<br>
   *
   * @remarks
   * 1 will always be the **system profile**.
   */
  profileId?: string | undefined;
  /**
   * The numerical ID of the Casebase Release in which case in created
   */
  releaseId?: string | undefined;
  /**
   * ID of the cluster in which case is created
   */
  clusterId?: string | undefined;
  /**
   * The date on which the Case was created.
   */
  createdDate?: string | undefined;
  createdBy?: CreatedBy | undefined;
  modifiedBy?: ModifiedBy | undefined;
  /**
   * The date on which the Case was last modified.
   */
  modifiedDate?: string | undefined;
  /**
   * Defines the relationship between this resource and another object.
   */
  link?: Link | undefined;
};

/** @internal */
export const CaseListResult$inboundSchema: z.ZodType<
  CaseListResult,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  shortName: z.string().optional(),
  title: z.string().optional(),
  profileId: z.string().optional(),
  releaseId: z.string().optional(),
  clusterId: z.string().optional(),
  createdDate: z.string().optional(),
  createdBy: CreatedBy$inboundSchema.optional(),
  modifiedBy: ModifiedBy$inboundSchema.optional(),
  modifiedDate: z.string().optional(),
  link: Link$inboundSchema.optional(),
});

/** @internal */
export type CaseListResult$Outbound = {
  id?: string | undefined;
  shortName?: string | undefined;
  title?: string | undefined;
  profileId?: string | undefined;
  releaseId?: string | undefined;
  clusterId?: string | undefined;
  createdDate?: string | undefined;
  createdBy?: CreatedBy$Outbound | undefined;
  modifiedBy?: ModifiedBy$Outbound | undefined;
  modifiedDate?: string | undefined;
  link?: Link$Outbound | undefined;
};

/** @internal */
export const CaseListResult$outboundSchema: z.ZodType<
  CaseListResult$Outbound,
  z.ZodTypeDef,
  CaseListResult
> = z.object({
  id: z.string().optional(),
  shortName: z.string().optional(),
  title: z.string().optional(),
  profileId: z.string().optional(),
  releaseId: z.string().optional(),
  clusterId: z.string().optional(),
  createdDate: z.string().optional(),
  createdBy: CreatedBy$outboundSchema.optional(),
  modifiedBy: ModifiedBy$outboundSchema.optional(),
  modifiedDate: z.string().optional(),
  link: Link$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CaseListResult$ {
  /** @deprecated use `CaseListResult$inboundSchema` instead. */
  export const inboundSchema = CaseListResult$inboundSchema;
  /** @deprecated use `CaseListResult$outboundSchema` instead. */
  export const outboundSchema = CaseListResult$outboundSchema;
  /** @deprecated use `CaseListResult$Outbound` instead. */
  export type Outbound = CaseListResult$Outbound;
}

export function caseListResultToJSON(caseListResult: CaseListResult): string {
  return JSON.stringify(CaseListResult$outboundSchema.parse(caseListResult));
}

export function caseListResultFromJSON(
  jsonString: string,
): SafeParseResult<CaseListResult, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CaseListResult$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CaseListResult' from JSON`,
  );
}
