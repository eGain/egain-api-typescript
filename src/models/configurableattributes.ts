/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import {
  ConfigurableAttribute,
  ConfigurableAttribute$inboundSchema,
  ConfigurableAttribute$Outbound,
  ConfigurableAttribute$outboundSchema,
} from "./configurableattribute.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type ConfigurableAttributes = {
  attribute?: Array<ConfigurableAttribute> | undefined;
};

/** @internal */
export const ConfigurableAttributes$inboundSchema: z.ZodType<
  ConfigurableAttributes,
  z.ZodTypeDef,
  unknown
> = z.object({
  attribute: z.array(ConfigurableAttribute$inboundSchema).optional(),
});

/** @internal */
export type ConfigurableAttributes$Outbound = {
  attribute?: Array<ConfigurableAttribute$Outbound> | undefined;
};

/** @internal */
export const ConfigurableAttributes$outboundSchema: z.ZodType<
  ConfigurableAttributes$Outbound,
  z.ZodTypeDef,
  ConfigurableAttributes
> = z.object({
  attribute: z.array(ConfigurableAttribute$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ConfigurableAttributes$ {
  /** @deprecated use `ConfigurableAttributes$inboundSchema` instead. */
  export const inboundSchema = ConfigurableAttributes$inboundSchema;
  /** @deprecated use `ConfigurableAttributes$outboundSchema` instead. */
  export const outboundSchema = ConfigurableAttributes$outboundSchema;
  /** @deprecated use `ConfigurableAttributes$Outbound` instead. */
  export type Outbound = ConfigurableAttributes$Outbound;
}

export function configurableAttributesToJSON(
  configurableAttributes: ConfigurableAttributes,
): string {
  return JSON.stringify(
    ConfigurableAttributes$outboundSchema.parse(configurableAttributes),
  );
}

export function configurableAttributesFromJSON(
  jsonString: string,
): SafeParseResult<ConfigurableAttributes, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ConfigurableAttributes$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ConfigurableAttributes' from JSON`,
  );
}
