/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  SchemasTag,
  SchemasTag$inboundSchema,
  SchemasTag$Outbound,
  SchemasTag$outboundSchema,
} from "./schemastag.js";

export type SchemasTagGroup = {
  /**
   * The unique identifier for the tag group.
   */
  id?: string | undefined;
  /**
   * Name of the tag group.
   */
  name?: string | undefined;
  tagGroup?: Array<SchemasTagGroup> | undefined;
  tag?: Array<SchemasTag> | undefined;
};

/** @internal */
export const SchemasTagGroup$inboundSchema: z.ZodType<
  SchemasTagGroup,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  name: z.string().optional(),
  tagGroup: z.array(z.lazy(() => SchemasTagGroup$inboundSchema)).optional(),
  tag: z.array(SchemasTag$inboundSchema).optional(),
});

/** @internal */
export type SchemasTagGroup$Outbound = {
  id?: string | undefined;
  name?: string | undefined;
  tagGroup?: Array<SchemasTagGroup$Outbound> | undefined;
  tag?: Array<SchemasTag$Outbound> | undefined;
};

/** @internal */
export const SchemasTagGroup$outboundSchema: z.ZodType<
  SchemasTagGroup$Outbound,
  z.ZodTypeDef,
  SchemasTagGroup
> = z.object({
  id: z.string().optional(),
  name: z.string().optional(),
  tagGroup: z.array(z.lazy(() => SchemasTagGroup$outboundSchema)).optional(),
  tag: z.array(SchemasTag$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SchemasTagGroup$ {
  /** @deprecated use `SchemasTagGroup$inboundSchema` instead. */
  export const inboundSchema = SchemasTagGroup$inboundSchema;
  /** @deprecated use `SchemasTagGroup$outboundSchema` instead. */
  export const outboundSchema = SchemasTagGroup$outboundSchema;
  /** @deprecated use `SchemasTagGroup$Outbound` instead. */
  export type Outbound = SchemasTagGroup$Outbound;
}

export function schemasTagGroupToJSON(
  schemasTagGroup: SchemasTagGroup,
): string {
  return JSON.stringify(SchemasTagGroup$outboundSchema.parse(schemasTagGroup));
}

export function schemasTagGroupFromJSON(
  jsonString: string,
): SafeParseResult<SchemasTagGroup, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SchemasTagGroup$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SchemasTagGroup' from JSON`,
  );
}
