/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

/**
 * Tag
 */
export type ComponentsSchemasTag = {
  /**
   * Name of the Tag
   */
  name?: string | undefined;
  /**
   * The ID of the Tag .<br>A Tag ID is composed of a 2-4 letter prefix, followed by a dash and 4-15 digits.
   */
  id?: string | undefined;
};

/** @internal */
export const ComponentsSchemasTag$inboundSchema: z.ZodType<
  ComponentsSchemasTag,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string().optional(),
  id: z.string().optional(),
});

/** @internal */
export type ComponentsSchemasTag$Outbound = {
  name?: string | undefined;
  id?: string | undefined;
};

/** @internal */
export const ComponentsSchemasTag$outboundSchema: z.ZodType<
  ComponentsSchemasTag$Outbound,
  z.ZodTypeDef,
  ComponentsSchemasTag
> = z.object({
  name: z.string().optional(),
  id: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ComponentsSchemasTag$ {
  /** @deprecated use `ComponentsSchemasTag$inboundSchema` instead. */
  export const inboundSchema = ComponentsSchemasTag$inboundSchema;
  /** @deprecated use `ComponentsSchemasTag$outboundSchema` instead. */
  export const outboundSchema = ComponentsSchemasTag$outboundSchema;
  /** @deprecated use `ComponentsSchemasTag$Outbound` instead. */
  export type Outbound = ComponentsSchemasTag$Outbound;
}

export function componentsSchemasTagToJSON(
  componentsSchemasTag: ComponentsSchemasTag,
): string {
  return JSON.stringify(
    ComponentsSchemasTag$outboundSchema.parse(componentsSchemasTag),
  );
}

export function componentsSchemasTagFromJSON(
  jsonString: string,
): SafeParseResult<ComponentsSchemasTag, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ComponentsSchemasTag$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ComponentsSchemasTag' from JSON`,
  );
}
