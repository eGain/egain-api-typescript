/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  Tag,
  Tag$inboundSchema,
  Tag$Outbound,
  Tag$outboundSchema,
} from "./tag.js";

export type Tags = {
  /**
   * An array of tags.
   */
  tag?: Array<Tag> | undefined;
};

/** @internal */
export const Tags$inboundSchema: z.ZodType<Tags, z.ZodTypeDef, unknown> = z
  .object({
    tag: z.array(Tag$inboundSchema).optional(),
  });

/** @internal */
export type Tags$Outbound = {
  tag?: Array<Tag$Outbound> | undefined;
};

/** @internal */
export const Tags$outboundSchema: z.ZodType<Tags$Outbound, z.ZodTypeDef, Tags> =
  z.object({
    tag: z.array(Tag$outboundSchema).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Tags$ {
  /** @deprecated use `Tags$inboundSchema` instead. */
  export const inboundSchema = Tags$inboundSchema;
  /** @deprecated use `Tags$outboundSchema` instead. */
  export const outboundSchema = Tags$outboundSchema;
  /** @deprecated use `Tags$Outbound` instead. */
  export type Outbound = Tags$Outbound;
}

export function tagsToJSON(tags: Tags): string {
  return JSON.stringify(Tags$outboundSchema.parse(tags));
}

export function tagsFromJSON(
  jsonString: string,
): SafeParseResult<Tags, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Tags$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Tags' from JSON`,
  );
}
