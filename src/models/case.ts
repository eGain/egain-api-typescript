/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import {
  Action,
  Action$inboundSchema,
  Action$Outbound,
  Action$outboundSchema,
} from "./action.js";
import {
  CaseQuestionDetail,
  CaseQuestionDetail$inboundSchema,
  CaseQuestionDetail$Outbound,
  CaseQuestionDetail$outboundSchema,
} from "./casequestiondetail.js";
import {
  CreatedBy,
  CreatedBy$inboundSchema,
  CreatedBy$Outbound,
  CreatedBy$outboundSchema,
} from "./createdby.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  Link,
  Link$inboundSchema,
  Link$Outbound,
  Link$outboundSchema,
} from "./link.js";
import {
  Metadata,
  Metadata$inboundSchema,
  Metadata$Outbound,
  Metadata$outboundSchema,
} from "./metadata.js";
import {
  ModifiedBy,
  ModifiedBy$inboundSchema,
  ModifiedBy$Outbound,
  ModifiedBy$outboundSchema,
} from "./modifiedby.js";

/**
 * Threshold type indicating if thresholdValue is default or custom.
 */
export const ThresholdType = {
  Default: "Default",
  Custom: "Custom",
} as const;
/**
 * Threshold type indicating if thresholdValue is default or custom.
 */
export type ThresholdType = ClosedEnum<typeof ThresholdType>;

/**
 * Type of the case. Control or Content type
 */
export const CaseType = {
  Control: "Control",
  Content: "Content",
} as const;
/**
 * Type of the case. Control or Content type
 */
export type CaseType = ClosedEnum<typeof CaseType>;

/**
 * Success
 */
export type Case = {
  /**
   * The numerical ID of the case.
   */
  id?: string | undefined;
  /**
   * short name of the case.
   */
  shortName?: string | undefined;
  /**
   * title of the case
   */
  title?: string | undefined;
  /**
   * comments on the case
   */
  comments?: string | undefined;
  /**
   * The ID of the guided help profile.<br>
   *
   * @remarks
   * 1 will always be the **system profile**.
   */
  profileId?: string | undefined;
  /**
   * The numerical ID of the Casebase Release in which case in created
   */
  releaseId?: string | undefined;
  /**
   * ID of the cluster in which case is created
   */
  clusterId?: string | undefined;
  /**
   * The date on which the Case was created.
   */
  createdDate?: string | undefined;
  createdBy?: CreatedBy | undefined;
  modifiedBy?: ModifiedBy | undefined;
  /**
   * The date on which the Case was last modified.
   */
  modifiedDate?: string | undefined;
  /**
   * Flag indicating if the case is visible
   */
  isVisible?: boolean | undefined;
  /**
   * number of times case was rejected.
   */
  rejectCount?: number | undefined;
  /**
   * number of times case was accepted.
   */
  acceptCount?: number | undefined;
  /**
   * actions in the case
   */
  action?: Array<Action> | undefined;
  /**
   * Metadata of the case
   */
  metadata?: Array<Metadata> | undefined;
  /**
   * Threshold value of the case
   */
  thresholdValue?: number | undefined;
  /**
   * Threshold type indicating if thresholdValue is default or custom.
   */
  thresholdType?: ThresholdType | undefined;
  /**
   * Threshold value of the cluster in which case is created
   */
  thresholdValueFromCluster?: number | undefined;
  /**
   * Type of the case. Control or Content type
   */
  caseType?: CaseType | undefined;
  /**
   * Questions in the case
   */
  questionDetail?: Array<CaseQuestionDetail> | undefined;
  /**
   * Defines the relationship between this resource and another object.
   */
  link?: Link | undefined;
};

/** @internal */
export const ThresholdType$inboundSchema: z.ZodNativeEnum<
  typeof ThresholdType
> = z.nativeEnum(ThresholdType);

/** @internal */
export const ThresholdType$outboundSchema: z.ZodNativeEnum<
  typeof ThresholdType
> = ThresholdType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ThresholdType$ {
  /** @deprecated use `ThresholdType$inboundSchema` instead. */
  export const inboundSchema = ThresholdType$inboundSchema;
  /** @deprecated use `ThresholdType$outboundSchema` instead. */
  export const outboundSchema = ThresholdType$outboundSchema;
}

/** @internal */
export const CaseType$inboundSchema: z.ZodNativeEnum<typeof CaseType> = z
  .nativeEnum(CaseType);

/** @internal */
export const CaseType$outboundSchema: z.ZodNativeEnum<typeof CaseType> =
  CaseType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CaseType$ {
  /** @deprecated use `CaseType$inboundSchema` instead. */
  export const inboundSchema = CaseType$inboundSchema;
  /** @deprecated use `CaseType$outboundSchema` instead. */
  export const outboundSchema = CaseType$outboundSchema;
}

/** @internal */
export const Case$inboundSchema: z.ZodType<Case, z.ZodTypeDef, unknown> = z
  .object({
    id: z.string().optional(),
    shortName: z.string().optional(),
    title: z.string().optional(),
    comments: z.string().optional(),
    profileId: z.string().optional(),
    releaseId: z.string().optional(),
    clusterId: z.string().optional(),
    createdDate: z.string().optional(),
    createdBy: CreatedBy$inboundSchema.optional(),
    modifiedBy: ModifiedBy$inboundSchema.optional(),
    modifiedDate: z.string().optional(),
    isVisible: z.boolean().optional(),
    rejectCount: z.number().int().optional(),
    acceptCount: z.number().int().optional(),
    action: z.array(Action$inboundSchema).optional(),
    metadata: z.array(Metadata$inboundSchema).optional(),
    thresholdValue: z.number().int().optional(),
    thresholdType: ThresholdType$inboundSchema.optional(),
    thresholdValueFromCluster: z.number().optional(),
    caseType: CaseType$inboundSchema.optional(),
    questionDetail: z.array(CaseQuestionDetail$inboundSchema).optional(),
    link: Link$inboundSchema.optional(),
  });

/** @internal */
export type Case$Outbound = {
  id?: string | undefined;
  shortName?: string | undefined;
  title?: string | undefined;
  comments?: string | undefined;
  profileId?: string | undefined;
  releaseId?: string | undefined;
  clusterId?: string | undefined;
  createdDate?: string | undefined;
  createdBy?: CreatedBy$Outbound | undefined;
  modifiedBy?: ModifiedBy$Outbound | undefined;
  modifiedDate?: string | undefined;
  isVisible?: boolean | undefined;
  rejectCount?: number | undefined;
  acceptCount?: number | undefined;
  action?: Array<Action$Outbound> | undefined;
  metadata?: Array<Metadata$Outbound> | undefined;
  thresholdValue?: number | undefined;
  thresholdType?: string | undefined;
  thresholdValueFromCluster?: number | undefined;
  caseType?: string | undefined;
  questionDetail?: Array<CaseQuestionDetail$Outbound> | undefined;
  link?: Link$Outbound | undefined;
};

/** @internal */
export const Case$outboundSchema: z.ZodType<Case$Outbound, z.ZodTypeDef, Case> =
  z.object({
    id: z.string().optional(),
    shortName: z.string().optional(),
    title: z.string().optional(),
    comments: z.string().optional(),
    profileId: z.string().optional(),
    releaseId: z.string().optional(),
    clusterId: z.string().optional(),
    createdDate: z.string().optional(),
    createdBy: CreatedBy$outboundSchema.optional(),
    modifiedBy: ModifiedBy$outboundSchema.optional(),
    modifiedDate: z.string().optional(),
    isVisible: z.boolean().optional(),
    rejectCount: z.number().int().optional(),
    acceptCount: z.number().int().optional(),
    action: z.array(Action$outboundSchema).optional(),
    metadata: z.array(Metadata$outboundSchema).optional(),
    thresholdValue: z.number().int().optional(),
    thresholdType: ThresholdType$outboundSchema.optional(),
    thresholdValueFromCluster: z.number().optional(),
    caseType: CaseType$outboundSchema.optional(),
    questionDetail: z.array(CaseQuestionDetail$outboundSchema).optional(),
    link: Link$outboundSchema.optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Case$ {
  /** @deprecated use `Case$inboundSchema` instead. */
  export const inboundSchema = Case$inboundSchema;
  /** @deprecated use `Case$outboundSchema` instead. */
  export const outboundSchema = Case$outboundSchema;
  /** @deprecated use `Case$Outbound` instead. */
  export type Outbound = Case$Outbound;
}

export function caseToJSON(value: Case): string {
  return JSON.stringify(Case$outboundSchema.parse(value));
}

export function caseFromJSON(
  jsonString: string,
): SafeParseResult<Case, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Case$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Case' from JSON`,
  );
}
