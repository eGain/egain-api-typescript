/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  PaginationInfo,
  PaginationInfo$inboundSchema,
  PaginationInfo$Outbound,
  PaginationInfo$outboundSchema,
} from "./paginationinfo.js";
import {
  Portal,
  Portal$inboundSchema,
  Portal$Outbound,
  Portal$outboundSchema,
} from "./portal.js";

/**
 * Success
 */
export type PortalResult = {
  /**
   * portals
   */
  portal?: Array<Portal> | undefined;
  paginationInfo?: PaginationInfo | undefined;
};

/** @internal */
export const PortalResult$inboundSchema: z.ZodType<
  PortalResult,
  z.ZodTypeDef,
  unknown
> = z.object({
  portal: z.array(Portal$inboundSchema).optional(),
  paginationInfo: PaginationInfo$inboundSchema.optional(),
});

/** @internal */
export type PortalResult$Outbound = {
  portal?: Array<Portal$Outbound> | undefined;
  paginationInfo?: PaginationInfo$Outbound | undefined;
};

/** @internal */
export const PortalResult$outboundSchema: z.ZodType<
  PortalResult$Outbound,
  z.ZodTypeDef,
  PortalResult
> = z.object({
  portal: z.array(Portal$outboundSchema).optional(),
  paginationInfo: PaginationInfo$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PortalResult$ {
  /** @deprecated use `PortalResult$inboundSchema` instead. */
  export const inboundSchema = PortalResult$inboundSchema;
  /** @deprecated use `PortalResult$outboundSchema` instead. */
  export const outboundSchema = PortalResult$outboundSchema;
  /** @deprecated use `PortalResult$Outbound` instead. */
  export type Outbound = PortalResult$Outbound;
}

export function portalResultToJSON(portalResult: PortalResult): string {
  return JSON.stringify(PortalResult$outboundSchema.parse(portalResult));
}

export function portalResultFromJSON(
  jsonString: string,
): SafeParseResult<PortalResult, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PortalResult$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PortalResult' from JSON`,
  );
}
