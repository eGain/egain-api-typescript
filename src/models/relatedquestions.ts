/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

/**
 * Related questions for the article.
 */
export type RelatedQuestions = {
  /**
   * An array of related questions.
   */
  relatedQuestion?: Array<string> | undefined;
  /**
   * The total count of related questions for the article.
   */
  count?: number | undefined;
};

/** @internal */
export const RelatedQuestions$inboundSchema: z.ZodType<
  RelatedQuestions,
  z.ZodTypeDef,
  unknown
> = z.object({
  relatedQuestion: z.array(z.string()).optional(),
  count: z.number().int().optional(),
});

/** @internal */
export type RelatedQuestions$Outbound = {
  relatedQuestion?: Array<string> | undefined;
  count?: number | undefined;
};

/** @internal */
export const RelatedQuestions$outboundSchema: z.ZodType<
  RelatedQuestions$Outbound,
  z.ZodTypeDef,
  RelatedQuestions
> = z.object({
  relatedQuestion: z.array(z.string()).optional(),
  count: z.number().int().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RelatedQuestions$ {
  /** @deprecated use `RelatedQuestions$inboundSchema` instead. */
  export const inboundSchema = RelatedQuestions$inboundSchema;
  /** @deprecated use `RelatedQuestions$outboundSchema` instead. */
  export const outboundSchema = RelatedQuestions$outboundSchema;
  /** @deprecated use `RelatedQuestions$Outbound` instead. */
  export type Outbound = RelatedQuestions$Outbound;
}

export function relatedQuestionsToJSON(
  relatedQuestions: RelatedQuestions,
): string {
  return JSON.stringify(
    RelatedQuestions$outboundSchema.parse(relatedQuestions),
  );
}

export function relatedQuestionsFromJSON(
  jsonString: string,
): SafeParseResult<RelatedQuestions, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RelatedQuestions$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RelatedQuestions' from JSON`,
  );
}
