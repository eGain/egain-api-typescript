/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

/**
 * User permissions on the parent folder.
 */
export type ArticlePermissions = {
  /**
   * User has 'View Folder' permission on the parent folder.
   */
  view?: boolean | undefined;
  /**
   * User has 'Edit Article' permission on the parent folder.
   */
  edit?: boolean | undefined;
};

/** @internal */
export const ArticlePermissions$inboundSchema: z.ZodType<
  ArticlePermissions,
  z.ZodTypeDef,
  unknown
> = z.object({
  view: z.boolean().optional(),
  edit: z.boolean().optional(),
});

/** @internal */
export type ArticlePermissions$Outbound = {
  view?: boolean | undefined;
  edit?: boolean | undefined;
};

/** @internal */
export const ArticlePermissions$outboundSchema: z.ZodType<
  ArticlePermissions$Outbound,
  z.ZodTypeDef,
  ArticlePermissions
> = z.object({
  view: z.boolean().optional(),
  edit: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ArticlePermissions$ {
  /** @deprecated use `ArticlePermissions$inboundSchema` instead. */
  export const inboundSchema = ArticlePermissions$inboundSchema;
  /** @deprecated use `ArticlePermissions$outboundSchema` instead. */
  export const outboundSchema = ArticlePermissions$outboundSchema;
  /** @deprecated use `ArticlePermissions$Outbound` instead. */
  export type Outbound = ArticlePermissions$Outbound;
}

export function articlePermissionsToJSON(
  articlePermissions: ArticlePermissions,
): string {
  return JSON.stringify(
    ArticlePermissions$outboundSchema.parse(articlePermissions),
  );
}

export function articlePermissionsFromJSON(
  jsonString: string,
): SafeParseResult<ArticlePermissions, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ArticlePermissions$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ArticlePermissions' from JSON`,
  );
}
